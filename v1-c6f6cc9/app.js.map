{"version":3,"file":"MonoSketch.js","mappings":"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","sources":["webpack://MonoSketch/webpack/universalModuleDefinition","webpack://MonoSketch/../../../../libs/action-manager/src/main/kotlin/mono/actionmanager/ActionManager.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/common/src/generated/_Collections.kt","webpack://MonoSketch/../../../../libs/action-manager/src/main/kotlin/mono/actionmanager/DebugCommandController.kt","webpack://MonoSketch/../../../../libs/action-manager/src/main/kotlin/mono/actionmanager/OneTimeActionType.kt","webpack://MonoSketch/../../../../libs/action-manager/src/main/kotlin/mono/actionmanager/RetainableActionType.kt","webpack://MonoSketch/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/dynamic.kt","webpack://MonoSketch/../../../../app/src/main/kotlin/mono/app/MonoSketchAppModel.kt","webpack://MonoSketch/../../../../app/src/main/kotlin/mono/app/MonoSketchApplication.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/src/kotlin/text/Strings.kt","webpack://MonoSketch/../../../../libs/build-environment/src/main/kotlin/mono/environment/Build.kt","webpack://MonoSketch/../../../../../<js-code>","webpack://MonoSketch/../../../../libs/commons/src/main/kotlin/mono/common/Characters.kt","webpack://MonoSketch/../../../../libs/commons/src/main/kotlin/mono/common/ElementExt.kt","webpack://MonoSketch/../../../../libs/commons/src/main/kotlin/mono/common/Key.kt","webpack://MonoSketch/../../../../libs/commons/src/main/kotlin/mono/common/MouseCursor.kt","webpack://MonoSketch/../../../../libs/commons/src/main/kotlin/mono/common/WindowExt.kt","webpack://MonoSketch/../../../../libs/commons/src/main/kotlin/mono/common/EventExt.kt","webpack://MonoSketch/../../../../libs/commons/src/main/kotlin/mono/common/ObjectExt.kt","webpack://MonoSketch/../../../../libs/commons/src/main/kotlin/mono/common/BooleanExt.kt","webpack://MonoSketch/../../../../libs/export-shapes-modal/src/main/kotlin/mono/export/ExportShapesHelper.kt","webpack://MonoSketch/../../../../libs/export-shapes-modal/src/main/kotlin/mono/export/ExportShapesModal.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/src/kotlin/util/Standard.kt","webpack://MonoSketch/../../../../libs/graphicsgeo/src/main/kotlin/mono/graphics.geo/MousePointer.kt","webpack://MonoSketch/../../../../libs/graphicsgeo/src/main/kotlin/mono/graphics.geo/Point.kt","webpack://MonoSketch/../../../../libs/graphicsgeo/src/main/kotlin/mono/graphics.geo/Rect.kt","webpack://MonoSketch/../../../../libs/graphicsgeo/src/main/kotlin/mono/graphics.geo/Size.kt","webpack://MonoSketch/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/math.kt","webpack://MonoSketch/../../../../libs/html-dsl/src/main/kotlin/mono/html/ElementExt.kt","webpack://MonoSketch/../../../../libs/html-dsl/src/main/kotlin/mono/html/Elements.kt","webpack://MonoSketch/../../../../libs/html-dsl/src/main/kotlin/mono/html/StyleExt.kt","webpack://MonoSketch/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections.kt","webpack://MonoSketch/../../../../libs/html-dsl/src/main/kotlin/mono/html/EventExt.kt","webpack://MonoSketch/../../../../libs/htmlcanvas/src/main/kotlin/mono/html/canvas/CanvasViewController.kt","webpack://MonoSketch/../../../../libs/htmlcanvas/src/main/kotlin/mono/html/canvas/canvas/AxisCanvasViewController.kt","webpack://MonoSketch/../../../../libs/htmlcanvas/src/main/kotlin/mono/html/canvas/canvas/BaseCanvasViewController.kt","webpack://MonoSketch/../../../../libs/htmlcanvas/src/main/kotlin/mono/html/canvas/canvas/BoardCanvasViewController.kt","webpack://MonoSketch/../../../../libs/htmlcanvas/src/main/kotlin/mono/html/canvas/canvas/DrawingInfoController.kt","webpack://MonoSketch/../../../../libs/htmlcanvas/src/main/kotlin/mono/html/canvas/canvas/GridCanvasViewController.kt","webpack://MonoSketch/../../../../libs/htmlcanvas/src/main/kotlin/mono/html/canvas/canvas/InteractionCanvasViewController.kt","webpack://MonoSketch/../../../../../builtins/Library.kt","webpack://MonoSketch/../../../../libs/htmlcanvas/src/main/kotlin/mono/html/canvas/canvas/SelectionCanvasViewController.kt","webpack://MonoSketch/../../../../libs/htmlcanvas/src/main/kotlin/mono/html/canvas/mouse/MouseEventObserver.kt","webpack://MonoSketch/../../../../libs/htmlmodal/src/main/kotlin/mono/html/modal/DropDownMenu.kt","webpack://MonoSketch/../../../../libs/htmlmodal/src/main/kotlin/mono/html/modal/EditTextModal.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/src/kotlin/text/regex/RegexExtensions.kt","webpack://MonoSketch/../../../../libs/htmlmodal/src/main/kotlin/mono/html/modal/Tooltip.kt","webpack://MonoSketch/../../../../libs/htmltoolbar/src/main/kotlin/mono/html/toolbar/ToolbarViewController.kt","webpack://MonoSketch/../../../../libs/htmltoolbar/src/main/kotlin/mono/html/toolbar/view/MouseActionToolbar.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/common/src/generated/_Arrays.kt","webpack://MonoSketch/../../../../libs/htmltoolbar/src/main/kotlin/mono/html/toolbar/view/RightToolbar.kt","webpack://MonoSketch/../../../../libs/htmltoolbar/src/main/kotlin/mono/html/toolbar/view/SvgExt.kt","webpack://MonoSketch/../../../../libs/htmltoolbar/src/main/kotlin/mono/html/toolbar/view/keyboardshortcut/KeyboardShortcuts.kt","webpack://MonoSketch/../../../../libs/htmltoolbar/src/main/kotlin/mono/html/toolbar/view/shapetool/AppearanceDataController.kt","webpack://MonoSketch/../../../../libs/htmltoolbar/src/main/kotlin/mono/html/toolbar/view/shapetool/AppearanceTool.kt","webpack://MonoSketch/../../../../libs/htmltoolbar/src/main/kotlin/mono/html/toolbar/view/shapetool/CssClass.kt","webpack://MonoSketch/../../../../libs/htmltoolbar/src/main/kotlin/mono/html/toolbar/view/shapetool/ReorderTool.kt","webpack://MonoSketch/../../../../libs/htmltoolbar/src/main/kotlin/mono/html/toolbar/view/shapetool/ShapeToolViewController.kt","webpack://MonoSketch/../../../../libs/htmltoolbar/src/main/kotlin/mono/html/toolbar/view/shapetool/TextTool.kt","webpack://MonoSketch/../../../../libs/htmltoolbar/src/main/kotlin/mono/html/toolbar/view/shapetool/ToolViews.kt","webpack://MonoSketch/../../../../libs/htmltoolbar/src/main/kotlin/mono/html/toolbar/view/shapetool/TransformTool.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/Maps.kt","webpack://MonoSketch/../../../../libs/keycommand/src/main/kotlin/mono/keycommand/KeyCommand.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/Collections.kt","webpack://MonoSketch/../../../../libs/keycommand/src/main/kotlin/mono/keycommand/KeyCommandController.kt","webpack://MonoSketch/../../../../libs/lifecycle/src/main/kotlin/mono/lifecycle/LifecycleOwner.kt","webpack://MonoSketch/../../../../libs/lifecycle/src/main/kotlin/mono/lifecycle/LifecycleObserver.kt","webpack://MonoSketch/../../../../libs/livedata/src/main/kotlin/mono/livedata/CombineLineDataUtils.kt","webpack://MonoSketch/../../../../libs/livedata/src/main/kotlin/mono/livedata/LiveData.kt","webpack://MonoSketch/../../../../libs/livedata/src/main/kotlin/mono/livedata/Observer.kt","webpack://MonoSketch/../../../../libs/monobitmap-manager/src/main/kotlin/mono/bitmap/manager/MonoBitmapManager.kt","webpack://MonoSketch/../../../../libs/monobitmap-manager/src/main/kotlin/mono/bitmap/manager/factory/LineBitmapFactory.kt","webpack://MonoSketch/../../../../libs/monobitmap-manager/src/main/kotlin/mono/bitmap/manager/factory/PointChar.kt","webpack://MonoSketch/../../../../libs/monobitmap-manager/src/main/kotlin/mono/bitmap/manager/factory/RectangleBitmapFactory.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/common/src/generated/_Sequences.kt","webpack://MonoSketch/../../../../libs/monobitmap-manager/src/main/kotlin/mono/bitmap/manager/factory/TextBitmapFactory.kt","webpack://MonoSketch/../../../../libs/monobitmap/src/main/kotlin/mono/graphics/bitmap/MonoBitmap.kt","webpack://MonoSketch/../../../../libs/monobitmap/src/main/kotlin/mono/graphics/bitmap/drawable/CharDrawable.kt","webpack://MonoSketch/../../../../libs/monoboard/src/main/kotlin/mono/graphics/board/CrossingResources.kt","webpack://MonoSketch/../../../../libs/monoboard/src/main/kotlin/mono/graphics/board/MonoBoard.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/MutableCollections.kt","webpack://MonoSketch/../../../../libs/monoboard/src/main/kotlin/mono/graphics/board/PainterBoard.kt","webpack://MonoSketch/../../../../libs/monoboard/src/main/kotlin/mono/graphics/board/Pixel.kt","webpack://MonoSketch/../../../../libs/shape-clipboard/src/main/kotlin/mono/shape/clipboard/ShapeClipboardManager.kt","webpack://MonoSketch/../../../../../Z:/BuildAgent/work/b2fef8360e1bcf3d/core/commonMain/src/kotlinx/serialization/SerialFormat.kt","webpack://MonoSketch/../../../../../Z:/BuildAgent/work/b2fef8360e1bcf3d/core/commonMain/src/kotlinx/serialization/Serializers.kt","webpack://MonoSketch/../../../../../Z:/BuildAgent/work/b2fef8360e1bcf3d/core/commonMain/src/kotlinx/serialization/internal/Platform.common.kt","webpack://MonoSketch/../../../../libs/shape-interaction-bound/src/main/kotlin/mono/shapebound/InteractionPoint.kt","webpack://MonoSketch/../../../../libs/shape-interaction-bound/src/main/kotlin/mono/shapebound/LineInteractionBound.kt","webpack://MonoSketch/../../../../libs/shape-interaction-bound/src/main/kotlin/mono/shapebound/ScalableInteractionBound.kt","webpack://MonoSketch/../../../../libs/shape-selection/src/main/kotlin/mono/shape/selection/SelectedShapeManager.kt","webpack://MonoSketch/../../../../libs/shape-serialization/src/main/kotlin/mono/shape/serialization/ShapeSerializationUtil.kt","webpack://MonoSketch/../../../../libs/shape/src/main/kotlin/mono/shape/ShapeExtraManager.kt","webpack://MonoSketch/../../../../libs/shape/src/main/kotlin/mono/shape/ShapeManager.kt","webpack://MonoSketch/../../../../libs/shape/src/main/kotlin/mono/shape/command/GeneralShapeCommands.kt","webpack://MonoSketch/../../../../libs/shape/src/main/kotlin/mono/shape/command/LineCommands.kt","webpack://MonoSketch/../../../../libs/shape/src/main/kotlin/mono/shape/command/ShapeManagerCommands.kt","webpack://MonoSketch/../../../../libs/shape/src/main/kotlin/mono/shape/command/TextCommands.kt","webpack://MonoSketch/../../../../libs/shape/src/main/kotlin/mono/shape/extra/LineExtra.kt","webpack://MonoSketch/../../../../libs/shape/src/main/kotlin/mono/shape/extra/RectangleExtra.kt","webpack://MonoSketch/../../../../libs/shape/src/main/kotlin/mono/shape/extra/ShapeExtra.kt","webpack://MonoSketch/../../../../libs/shape/src/main/kotlin/mono/shape/extra/TextExtra.kt","webpack://MonoSketch/../../../../libs/shape/src/main/kotlin/mono/shape/extra/style/TextAlign.kt","webpack://MonoSketch/../../../../libs/shape/src/main/kotlin/mono/shape/extra/manager/predefined/PredefinedAnchorChar.kt","webpack://MonoSketch/../../../../libs/shape/src/main/kotlin/mono/shape/extra/manager/predefined/PredefinedRectangleFillStyle.kt","webpack://MonoSketch/../../../../libs/shape/src/main/kotlin/mono/shape/extra/manager/predefined/PredefinedStraightStrokeStyle.kt","webpack://MonoSketch/../../../../libs/shape/src/main/kotlin/mono/shape/extra/style/AnchorChar.kt","webpack://MonoSketch/../../../../libs/shape/src/main/kotlin/mono/shape/extra/style/RectangleFillStyle.kt","webpack://MonoSketch/../../../../libs/shape/src/main/kotlin/mono/shape/extra/style/StraightStrokeDashPattern.kt","webpack://MonoSketch/../../../../libs/shape/src/main/kotlin/mono/shape/extra/style/StraightStrokeStyle.kt","webpack://MonoSketch/../../../../libs/shape/src/main/kotlin/mono/shape/list/QuickList.kt","webpack://MonoSketch/../../../../libs/shape/src/main/kotlin/mono/shape/serialization/AbstractSerializableShape.kt","webpack://MonoSketch/../../../../libs/shape/src/main/kotlin/mono/shape/shape/AbstractShape.kt","webpack://MonoSketch/../../../../libs/shape/src/main/kotlin/mono/shape/shape/Group.kt","webpack://MonoSketch/../../../../libs/shape/src/main/kotlin/mono/shape/shape/Line.kt","webpack://MonoSketch/../../../../libs/shape/src/main/kotlin/mono/shape/shape/Rectangle.kt","webpack://MonoSketch/../../../../libs/shape/src/main/kotlin/mono/shape/shape/RootGroup.kt","webpack://MonoSketch/../../../../libs/shape/src/main/kotlin/mono/shape/shape/Text.kt","webpack://MonoSketch/../../../../libs/shape/src/main/kotlin/mono/shape/shape/line/LineHelper.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/common/src/generated/_Strings.kt","webpack://MonoSketch/../../../../libs/shapesearcher/src/main/kotlin/mono/shapesearcher/ShapeSearcher.kt","webpack://MonoSketch/../../../../libs/shapesearcher/src/main/kotlin/mono/shapesearcher/ShapeZoneAddressManager.kt","webpack://MonoSketch/../../../../libs/shapesearcher/src/main/kotlin/mono/shapesearcher/ZoneAddressFactory.kt","webpack://MonoSketch/../../../../libs/shapesearcher/src/main/kotlin/mono/shapesearcher/ZoneOwnersManager.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/Sets.kt","webpack://MonoSketch/../../../../libs/statemanager/src/main/kotlin/mono/state/ClipboardManager.kt","webpack://MonoSketch/../../../../libs/statemanager/src/main/kotlin/mono/state/FileMediator.kt","webpack://MonoSketch/../../../../../jsMainSources/libraries/stdlib/js/src/org.w3c/org.w3c.files.kt","webpack://MonoSketch/../../../../libs/statemanager/src/main/kotlin/mono/state/MainStateManager.kt","webpack://MonoSketch/../../../../libs/statemanager/src/main/kotlin/mono/state/OneTimeActionHandler.kt","webpack://MonoSketch/../../../../libs/statemanager/src/main/kotlin/mono/state/StateHistoryManager.kt","webpack://MonoSketch/../../../../libs/statemanager/src/main/kotlin/mono/state/command/CommandEnvironment.kt","webpack://MonoSketch/../../../../libs/statemanager/src/main/kotlin/mono/state/command/MouseCommandFactory.kt","webpack://MonoSketch/../../../../libs/statemanager/src/main/kotlin/mono/state/command/mouse/AddLineMouseCommand.kt","webpack://MonoSketch/../../../../libs/statemanager/src/main/kotlin/mono/state/command/mouse/AddTextMouseCommand.kt","webpack://MonoSketch/../../../../libs/statemanager/src/main/kotlin/mono/state/command/mouse/LineInteractionMouseCommand.kt","webpack://MonoSketch/../../../../libs/statemanager/src/main/kotlin/mono/state/command/mouse/MoveShapeMouseCommand.kt","webpack://MonoSketch/../../../../libs/statemanager/src/main/kotlin/mono/state/command/mouse/ScaleShapeMouseCommand.kt","webpack://MonoSketch/../../../../libs/statemanager/src/main/kotlin/mono/state/command/mouse/SelectShapeMouseCommand.kt","webpack://MonoSketch/../../../../libs/statemanager/src/main/kotlin/mono/state/command/text/EditTextShapeHelper.kt","webpack://MonoSketch/../../../../libs/store-manager/src/main/kotlin/mono/store/manager/StoreKeys.kt","webpack://MonoSketch/../../../../libs/store-manager/src/main/kotlin/mono/store/manager/StoreManager.kt","webpack://MonoSketch/../../../../../jsMainSources/libraries/stdlib/js/src/org.w3c/org.w3c.dom.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/src/kotlin/util/Preconditions.kt","webpack://MonoSketch/../../../../libs/ui-app-state-manager/src/main/kotlin/mono/ui/appstate/AppThemeManager.kt","webpack://MonoSketch/../../../../libs/ui-app-state-manager/src/main/kotlin/mono/ui/appstate/AppUiStateManager.kt","webpack://MonoSketch/../../../../libs/ui-theme/src/main/kotlin/mono/ui/theme/ThemeColor.kt","webpack://MonoSketch/../../../../libs/ui-theme/src/main/kotlin/mono/ui/theme/ThemeManager.kt","webpack://MonoSketch/../../../../libs/uuid/src/main/kotlin/mono/uuid/UUID.kt","webpack://MonoSketch/../../../../src/main/kotlin/app.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/Sequences.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/common/src/generated/_OneToManyTitlecaseMappings.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/src/kotlin/text/Char.kt","webpack://MonoSketch/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/text/string.kt","webpack://MonoSketch/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/text/char.kt","webpack://MonoSketch/../../../../../src/generated/_TitlecaseMappings.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/src/kotlin/CharCode.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/common/src/generated/_Ranges.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/Iterables.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/AbstractMap.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/AbstractSet.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/IndexedValue.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/Iterators.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/SequenceBuilder.kt","webpack://MonoSketch/../../../../../src/kotlin/coroutines_13/IntrinsicsJs.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/src/kotlin/coroutines/CoroutineContextImpl.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/src/kotlin/coroutines/intrinsics/Intrinsics.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/src/kotlin/random/Random.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/src/kotlin/random/XorWowRandom.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/src/kotlin/reflect/KTypeProjection.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/src/kotlin/text/Appendable.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/src/kotlin/text/Indent.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/src/kotlin/text/StringNumberConversions.kt","webpack://MonoSketch/../../../../../runtime/long.kt","webpack://MonoSketch/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/text/stringsCode.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/src/kotlin/util/DeepRecursive.kt","webpack://MonoSketch/../../../../../runtime/typeCheckUtils.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/src/kotlin/util/Result.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/src/kotlin/util/Lazy.kt","webpack://MonoSketch/../../../../../src/kotlin/exceptions.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/src/kotlin/util/Tuples.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/unsigned/src/kotlin/UByte.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/unsigned/src/kotlin/UInt.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/unsigned/src/kotlin/ULong.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/unsigned/src/kotlin/UnsignedUtils.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/unsigned/src/kotlin/UShort.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/unsigned/src/kotlin/UStrings.kt","webpack://MonoSketch/../../../../../jsMainSources/core/builtins/src/kotlin/ProgressionIterators.kt","webpack://MonoSketch/../../../../../jsMainSources/core/builtins/src/kotlin/Progressions.kt","webpack://MonoSketch/../../../../../jsMainSources/core/builtins/src/kotlin/internal/progressionUtil.kt","webpack://MonoSketch/../../../../../jsMainSources/core/builtins/src/kotlin/Ranges.kt","webpack://MonoSketch/../../../../../jsMainSources/libraries/stdlib/js/runtime/primitiveCompanionObjects.kt","webpack://MonoSketch/../../../../../runtime/kotlinHacks.kt","webpack://MonoSketch/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/AbstractMutableCollection.kt","webpack://MonoSketch/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/AbstractMutableList.kt","webpack://MonoSketch/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/AbstractMutableMap.kt","webpack://MonoSketch/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/AbstractMutableSet.kt","webpack://MonoSketch/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/ArrayList.kt","webpack://MonoSketch/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/HashMap.kt","webpack://MonoSketch/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/HashSet.kt","webpack://MonoSketch/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/InternalHashCodeMap.kt","webpack://MonoSketch/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/LinkedHashMap.kt","webpack://MonoSketch/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/LinkedHashSet.kt","webpack://MonoSketch/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/console.kt","webpack://MonoSketch/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/numbers.kt","webpack://MonoSketch/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/reflect/JsClass.kt","webpack://MonoSketch/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/reflect/KClassImpl.kt","webpack://MonoSketch/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/reflect/KTypeImpl.kt","webpack://MonoSketch/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/reflect/primitives.kt","webpack://MonoSketch/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/reflect/reflection.kt","webpack://MonoSketch/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/text/StringBuilderJs.kt","webpack://MonoSketch/../../../../../src/generated/_WhitespaceChars.kt","webpack://MonoSketch/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/text/numberConversions.kt","webpack://MonoSketch/../../../../../src/generated/_DigitChars.kt","webpack://MonoSketch/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/text/regex.kt","webpack://MonoSketch/../../../../../src/generated/_ComparisonsJs.kt","webpack://MonoSketch/../../../../../jsMainSources/libraries/stdlib/js/src/kotlinx/dom/Classes.kt","webpack://MonoSketch/../../../../../builtins/Char.kt","webpack://MonoSketch/../../../../../builtins/Enum.kt","webpack://MonoSketch/../../../../../runtime/arrays.kt","webpack://MonoSketch/../../../../../runtime/noPackageHacks.kt","webpack://MonoSketch/../../../../../runtime/bitUtils.kt","webpack://MonoSketch/../../../../../runtime/charSequence.kt","webpack://MonoSketch/../../../../../runtime/collectionsHacks.kt","webpack://MonoSketch/../../../../../runtime/compareTo.kt","webpack://MonoSketch/../../../../../runtime/coreRuntime.kt","webpack://MonoSketch/../../../../../runtime/hacks.kt","webpack://MonoSketch/../../../../../runtime/longjs.kt","webpack://MonoSketch/../../../../../runtime/numberConversion.kt","webpack://MonoSketch/../../../../../runtime/rangeTo.kt","webpack://MonoSketch/../../../../../runtime/reflectRuntime.kt","webpack://MonoSketch/../../../../../src/generated/_ArraysJs.kt","webpack://MonoSketch/../../../../../src/generated/_CharCategories.kt","webpack://MonoSketch/../../../../../src/generated/_LetterChars.kt","webpack://MonoSketch/../../../../../src/generated/_OtherLowercaseChars.kt","webpack://MonoSketch/../../../../../src/kotlin/coroutines_13/CoroutineImpl.kt","webpack://MonoSketch/../../../../../src/kotlin/jsOperators.kt","webpack://MonoSketch/../../../../../src/kotlin/text/numberConversions_js-ir.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/AbstractCollection.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/AbstractList.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/src/kotlin/coroutines/Continuation.kt","webpack://MonoSketch/../../../../../jsMainSources/core/builtins/src/kotlin/Iterators.kt","webpack://MonoSketch/../../../../../jsMainSources/core/builtins/src/kotlin/Unit.kt","webpack://MonoSketch/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/EqualityComparator.kt","webpack://MonoSketch/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/regexp.kt","webpack://MonoSketch/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/InternalMap.kt","webpack://MonoSketch/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/reflect/KTypeHelpers.kt","webpack://MonoSketch/../../../../../src/kotlin/reflection_js-ir.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/MapWithDefault.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/common/src/generated/_Sets.kt","webpack://MonoSketch/../../../../../src/generated/_CollectionsJs.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/src/kotlin/ranges/Ranges.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/SlidingWindow.kt","webpack://MonoSketch/../../../../../src/kotlin/numbers_js-ir.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/src/kotlin/text/StringBuilder.kt","webpack://MonoSketch/../../../../../Z:/BuildAgent/work/b2fef8360e1bcf3d/core/commonMain/src/kotlinx/serialization/descriptors/SerialDescriptor.kt","webpack://MonoSketch/../../../../../Z:/BuildAgent/work/b2fef8360e1bcf3d/core/commonMain/src/kotlinx/serialization/encoding/Decoding.kt","webpack://MonoSketch/../../../../../Z:/BuildAgent/work/b2fef8360e1bcf3d/core/commonMain/src/kotlinx/serialization/encoding/Encoding.kt","webpack://MonoSketch/../../../../../Z:/BuildAgent/work/b2fef8360e1bcf3d/core/commonMain/src/kotlinx/serialization/internal/PluginHelperInterfaces.kt","webpack://MonoSketch/../../../../../Z:/BuildAgent/work/b2fef8360e1bcf3d/core/commonMain/src/kotlinx/serialization/PolymorphicSerializer.kt","webpack://MonoSketch/../../../../../Z:/BuildAgent/work/b2fef8360e1bcf3d/core/commonMain/src/kotlinx/serialization/internal/AbstractPolymorphicSerializer.kt","webpack://MonoSketch/../../../../../Z:/BuildAgent/work/b2fef8360e1bcf3d/core/commonMain/src/kotlinx/serialization/descriptors/ContextAware.kt","webpack://MonoSketch/../../../../../Z:/BuildAgent/work/b2fef8360e1bcf3d/core/commonMain/src/kotlinx/serialization/SealedSerializer.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/Grouping.kt","webpack://MonoSketch/../../../../../Z:/BuildAgent/work/b2fef8360e1bcf3d/core/commonMain/src/kotlinx/serialization/SerializationException.kt","webpack://MonoSketch/../../../../../Z:/BuildAgent/work/b2fef8360e1bcf3d/core/jsMain/src/kotlinx/serialization/internal/Platform.kt","webpack://MonoSketch/../../../../../Z:/BuildAgent/work/b2fef8360e1bcf3d/core/commonMain/src/kotlinx/serialization/builtins/BuiltinSerializers.kt","webpack://MonoSketch/../../../../../Z:/BuildAgent/work/b2fef8360e1bcf3d/core/commonMain/src/kotlinx/serialization/internal/Primitives.kt","webpack://MonoSketch/../../../../../Z:/BuildAgent/work/b2fef8360e1bcf3d/core/commonMain/src/kotlinx/serialization/descriptors/SerialDescriptors.kt","webpack://MonoSketch/../../../../../Z:/BuildAgent/work/b2fef8360e1bcf3d/core/commonMain/src/kotlinx/serialization/descriptors/SerialKinds.kt","webpack://MonoSketch/../../../../../Z:/BuildAgent/work/b2fef8360e1bcf3d/core/commonMain/src/kotlinx/serialization/internal/CollectionDescriptors.kt","webpack://MonoSketch/../../../../../Z:/BuildAgent/work/b2fef8360e1bcf3d/core/commonMain/src/kotlinx/serialization/internal/CollectionSerializers.kt","webpack://MonoSketch/../../../../../Z:/BuildAgent/work/b2fef8360e1bcf3d/core/commonMain/src/kotlinx/serialization/internal/ElementMarker.kt","webpack://MonoSketch/../../../../../Z:/BuildAgent/work/b2fef8360e1bcf3d/core/commonMain/src/kotlinx/serialization/internal/InlineClassDescriptor.kt","webpack://MonoSketch/../../../../../Z:/BuildAgent/work/b2fef8360e1bcf3d/core/commonMain/src/kotlinx/serialization/internal/InlineClasses.kt","webpack://MonoSketch/../../../../../Z:/BuildAgent/work/b2fef8360e1bcf3d/core/commonMain/src/kotlinx/serialization/internal/NullableSerializer.kt","webpack://MonoSketch/../../../../../Z:/BuildAgent/work/b2fef8360e1bcf3d/core/commonMain/src/kotlinx/serialization/internal/ObjectSerializer.kt","webpack://MonoSketch/../../../../../Z:/BuildAgent/work/b2fef8360e1bcf3d/core/commonMain/src/kotlinx/serialization/internal/PluginGeneratedSerialDescriptor.kt","webpack://MonoSketch/../../../../../commonMainSources/libraries/stdlib/src/kotlin/util/HashCode.kt","webpack://MonoSketch/../../../../../Z:/BuildAgent/work/b2fef8360e1bcf3d/core/commonMain/src/kotlinx/serialization/internal/PrimitiveArraysSerializers.kt","webpack://MonoSketch/../../../../../Z:/BuildAgent/work/b2fef8360e1bcf3d/core/commonMain/src/kotlinx/serialization/internal/Tagged.kt","webpack://MonoSketch/../../../../../Z:/BuildAgent/work/b2fef8360e1bcf3d/core/commonMain/src/kotlinx/serialization/internal/Tuples.kt","webpack://MonoSketch/../../../../../Z:/BuildAgent/work/b2fef8360e1bcf3d/core/commonMain/src/kotlinx/serialization/modules/SerializersModule.kt","webpack://MonoSketch/../../../../../Z:/BuildAgent/work/b2fef8360e1bcf3d/core/jsMain/src/kotlinx/serialization/Serializers.kt","webpack://MonoSketch/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/reflect/AssociatedObjects.kt","webpack://MonoSketch/../../../../../Z:/BuildAgent/work/b2fef8360e1bcf3d/core/commonMain/src/kotlinx/serialization/encoding/AbstractDecoder.kt","webpack://MonoSketch/../../../../../Z:/BuildAgent/work/b2fef8360e1bcf3d/core/commonMain/src/kotlinx/serialization/encoding/AbstractEncoder.kt","webpack://MonoSketch/../../../../../Z:/BuildAgent/work/b2fef8360e1bcf3d/core/commonMain/src/kotlinx/serialization/internal/JsonInternalDependencies.kt","webpack://MonoSketch/../../../../../Z:/BuildAgent/work/b2fef8360e1bcf3d/core/commonMain/src/kotlinx/serialization/internal/PluginExceptions.kt","webpack://MonoSketch/../../../../../Json.kt","webpack://MonoSketch/../../../../../JsonConfiguration.kt","webpack://MonoSketch/../../../../../JsonElement.kt","webpack://MonoSketch/../../../../../StringOps.kt","webpack://MonoSketch/../../../../../JsonElementSerializers.kt","webpack://MonoSketch/../../../../../Composers.kt","webpack://MonoSketch/../../../../../JsonElementMarker.kt","webpack://MonoSketch/../../../../../JsonExceptions.kt","webpack://MonoSketch/../../../../../AbstractJsonLexer.kt","webpack://MonoSketch/../../../../../JsonNamesMap.kt","webpack://MonoSketch/../../../../../JsonPath.kt","webpack://MonoSketch/../../../../../JsonTreeReader.kt","webpack://MonoSketch/../../../../../Polymorphic.kt","webpack://MonoSketch/../../../../../TreeJsonEncoder.kt","webpack://MonoSketch/../../../../../TreeJsonDecoder.kt","webpack://MonoSketch/../../../../../SchemaCache.kt","webpack://MonoSketch/../../../../../StreamingJsonDecoder.kt","webpack://MonoSketch/../../../../../StreamingJsonEncoder.kt","webpack://MonoSketch/../../../../../WriteMode.kt","webpack://MonoSketch/../../../../../StringJsonLexer.kt","webpack://MonoSketch/../../../../../JsonSchemaCache.kt","webpack://MonoSketch/../../../../../JsonStringBuilder.kt","webpack://MonoSketch/../../../../../createMapForCache.kt","webpack://MonoSketch/webpack/bootstrap","webpack://MonoSketch/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"MonoSketch\"] = factory();\n\telse\n\t\troot[\"MonoSketch\"] = factory();\n})(this, () => {\nreturn ","package mono.actionmanager\n\nimport kotlinx.browser.window\nimport mono.common.exhaustive\nimport mono.environment.Build\nimport mono.keycommand.KeyCommand\nimport mono.lifecycle.LifecycleOwner\nimport mono.livedata.LiveData\nimport mono.livedata.MutableLiveData\nimport mono.livedata.distinctUntilChange\n\n/**\n * A class which gathers UI events and converts them into equivalent command.\n */\nclass ActionManager(\n    lifecycleOwner: LifecycleOwner,\n    keyCommandLiveData: LiveData<KeyCommand>\n) {\n    private val retainableActionMutableLiveData: MutableLiveData<RetainableActionType> =\n        MutableLiveData(RetainableActionType.IDLE)\n    val retainableActionLiveData: LiveData<RetainableActionType> = retainableActionMutableLiveData\n\n    private val oneTimeActionMutableLiveData: MutableLiveData<OneTimeActionType> =\n        MutableLiveData(OneTimeActionType.Idle)\n    val oneTimeActionLiveData: LiveData<OneTimeActionType> = oneTimeActionMutableLiveData\n\n    init {\n        keyCommandLiveData.distinctUntilChange().observe(lifecycleOwner, listener = ::onKeyEvent)\n    }\n\n    private fun onKeyEvent(keyCommand: KeyCommand) {\n        when (keyCommand) {\n            KeyCommand.IDLE -> Unit\n            KeyCommand.SELECT_ALL ->\n                setOneTimeAction(OneTimeActionType.SelectAllShapes)\n            KeyCommand.DESELECTION ->\n                setOneTimeAction(OneTimeActionType.DeselectShapes)\n\n            KeyCommand.DELETE ->\n                setOneTimeAction(OneTimeActionType.DeleteSelectedShapes)\n\n            KeyCommand.MOVE_LEFT ->\n                setOneTimeAction(OneTimeActionType.MoveShapes(0, -1))\n            KeyCommand.MOVE_UP ->\n                setOneTimeAction(OneTimeActionType.MoveShapes(-1, 0))\n            KeyCommand.MOVE_RIGHT ->\n                setOneTimeAction(OneTimeActionType.MoveShapes(0, 1))\n            KeyCommand.MOVE_DOWN ->\n                setOneTimeAction(OneTimeActionType.MoveShapes(1, 0))\n\n            KeyCommand.FAST_MOVE_LEFT ->\n                setOneTimeAction(OneTimeActionType.MoveShapes(0, -5))\n            KeyCommand.FAST_MOVE_UP ->\n                setOneTimeAction(OneTimeActionType.MoveShapes(-5, 0))\n            KeyCommand.FAST_MOVE_RIGHT ->\n                setOneTimeAction(OneTimeActionType.MoveShapes(0, 5))\n            KeyCommand.FAST_MOVE_DOWN ->\n                setOneTimeAction(OneTimeActionType.MoveShapes(5, 0))\n\n            KeyCommand.ADD_RECTANGLE ->\n                setRetainableAction(RetainableActionType.ADD_RECTANGLE)\n            KeyCommand.ADD_TEXT ->\n                setRetainableAction(RetainableActionType.ADD_TEXT)\n            KeyCommand.ADD_LINE ->\n                setRetainableAction(RetainableActionType.ADD_LINE)\n\n            KeyCommand.SELECTION_MODE ->\n                setRetainableAction(RetainableActionType.IDLE)\n            KeyCommand.ENTER_EDIT_MODE ->\n                setOneTimeAction(OneTimeActionType.EditSelectedShapes)\n\n            KeyCommand.COPY -> setOneTimeAction(OneTimeActionType.Copy(false))\n            KeyCommand.CUT -> setOneTimeAction(OneTimeActionType.Copy(true))\n            KeyCommand.DUPLICATE -> setOneTimeAction(OneTimeActionType.Duplicate)\n\n            KeyCommand.COPY_TEXT -> setOneTimeAction(OneTimeActionType.CopyText)\n\n            KeyCommand.UNDO -> setOneTimeAction(OneTimeActionType.Undo)\n            KeyCommand.REDO -> setOneTimeAction(OneTimeActionType.Redo)\n\n            KeyCommand.SHIFT_KEY -> Unit\n        }.exhaustive\n    }\n\n    fun setRetainableAction(actionType: RetainableActionType) {\n        retainableActionMutableLiveData.value = actionType\n    }\n\n    fun setOneTimeAction(actionType: OneTimeActionType) {\n        oneTimeActionMutableLiveData.value = actionType\n        oneTimeActionMutableLiveData.value = OneTimeActionType.Idle\n    }\n\n    fun installDebugCommand() {\n        if (!Build.DEBUG) {\n            return\n        }\n        val debugCommand = DebugCommandController(::setOneTimeAction)\n        window.asDynamic().cmd = debugCommand::executeCommand\n    }\n}\n",null,"package mono.actionmanager\n\n/**\n * A controller to execute command trigger from Dev tool's console.\n */\ninternal class DebugCommandController(private val setOneTimeAction: (OneTimeActionType) -> Unit) {\n    fun executeCommand(command: String, vararg params: String) {\n        console.log(\"Command:\", command, params)\n        val action = NO_PARAMS_ACTIONS[command]\n        if (action != null) {\n            setOneTimeAction(action)\n            return\n        }\n\n        console.error(\"Not support '$command' yet\")\n    }\n\n    companion object {\n        private val NO_PARAMS_ACTIONS = listOf(\n            OneTimeActionType.SaveShapesAs,\n            OneTimeActionType.OpenShapes,\n            OneTimeActionType.ExportSelectedShapes,\n            OneTimeActionType.ShowKeyboardShortcuts,\n            OneTimeActionType.SelectAllShapes,\n            OneTimeActionType.DeselectShapes,\n            OneTimeActionType.DeleteSelectedShapes,\n            OneTimeActionType.EditSelectedShapes,\n            OneTimeActionType.CopyText,\n            OneTimeActionType.Undo,\n            OneTimeActionType.Redo\n        ).associateBy { it::class.simpleName }\n    }\n}\n","package mono.actionmanager\n\nimport mono.shape.command.ChangeOrder\nimport mono.shape.extra.style.TextAlign\nimport mono.shape.shape.AbstractShape\n\n/**\n * An enum class which defines all action types which are only have affect once.\n */\nsealed interface OneTimeActionType {\n    object Idle : OneTimeActionType\n\n    // Main dropdown menu\n    object SaveShapesAs : OneTimeActionType\n    object OpenShapes : OneTimeActionType\n    object ExportSelectedShapes : OneTimeActionType\n    object ShowFormatPanel : OneTimeActionType\n    object HideFormatPanel : OneTimeActionType\n    object ShowKeyboardShortcuts : OneTimeActionType\n\n    object SelectAllShapes : OneTimeActionType\n    object DeselectShapes : OneTimeActionType\n    object DeleteSelectedShapes : OneTimeActionType\n    object EditSelectedShapes : OneTimeActionType\n    data class EditSelectedShape(val shape: AbstractShape?) : OneTimeActionType\n\n    data class TextAlignment(\n        val newHorizontalAlign: TextAlign.HorizontalAlign? = null,\n        val newVerticalAlign: TextAlign.VerticalAlign? = null\n    ) : OneTimeActionType\n\n    data class MoveShapes(val offsetRow: Int, val offsetCol: Int) : OneTimeActionType\n    data class ChangeShapeBound(\n        val newLeft: Int? = null,\n        val newTop: Int? = null,\n        val newWidth: Int? = null,\n        val newHeight: Int? = null\n    ) : OneTimeActionType\n\n    data class ChangeShapeFillExtra(\n        val isEnabled: Boolean? = null,\n        val newFillStyleId: String? = null\n    ) : OneTimeActionType\n\n    data class ChangeShapeBorderExtra(\n        val isEnabled: Boolean? = null,\n        val newBorderStyleId: String? = null\n    ) : OneTimeActionType\n\n    data class ChangeShapeBorderDashPatternExtra(\n        val dash: Int?,\n        val gap: Int?,\n        val offset: Int?\n    ) : OneTimeActionType\n\n    data class ChangeLineStrokeExtra(\n        val isEnabled: Boolean? = null,\n        val newStrokeStyleId: String? = null\n    ) : OneTimeActionType\n\n    data class ChangeLineStrokeDashPatternExtra(\n        val dash: Int?,\n        val gap: Int?,\n        val offset: Int?\n    ) : OneTimeActionType\n\n    data class ChangeLineStartAnchorExtra(\n        val isEnabled: Boolean? = null,\n        val newHeadId: String? = null\n    ) : OneTimeActionType\n\n    data class ChangeLineEndAnchorExtra(\n        val isEnabled: Boolean? = null,\n        val newHeadId: String? = null\n    ) : OneTimeActionType\n\n    data class ReorderShape(val orderType: ChangeOrder.ChangeOrderType) : OneTimeActionType\n\n    data class Copy(val isRemoveRequired: Boolean) : OneTimeActionType\n    object Duplicate : OneTimeActionType\n\n    object CopyText : OneTimeActionType\n\n    object Undo : OneTimeActionType\n    object Redo : OneTimeActionType\n}\n","package mono.actionmanager\n\nimport mono.common.MouseCursor\n\n/**\n * An enum class which defines all action types which repeatedly have effects after triggered.\n */\nenum class RetainableActionType(val mouseCursor: MouseCursor) {\n    IDLE(MouseCursor.DEFAULT),\n    ADD_RECTANGLE(MouseCursor.CROSSHAIR),\n    ADD_TEXT(MouseCursor.TEXT),\n    ADD_LINE(MouseCursor.CROSSHAIR)\n}\n",null,"package mono.app\n\nimport mono.graphics.geo.Size\nimport mono.livedata.LiveData\nimport mono.livedata.MutableLiveData\n\nclass MonoSketchAppModel {\n    private val windowSizeMutableLiveData: MutableLiveData<Size> =\n        MutableLiveData(Size(0, 0))\n    val windowSizeLiveData: LiveData<Size> = windowSizeMutableLiveData\n\n    fun setWindowSize(size: Size) {\n        windowSizeMutableLiveData.value = size\n    }\n}\n","package mono.app\n\nimport kotlinx.browser.document\nimport kotlinx.browser.window\nimport mono.actionmanager.ActionManager\nimport mono.bitmap.manager.MonoBitmapManager\nimport mono.graphics.board.MonoBoard\nimport mono.graphics.geo.Size\nimport mono.html.canvas.CanvasViewController\nimport mono.html.toolbar.ToolbarViewController\nimport mono.html.toolbar.view.shapetool.ShapeToolViewController\nimport mono.keycommand.KeyCommand\nimport mono.keycommand.KeyCommandController\nimport mono.lifecycle.LifecycleOwner\nimport mono.livedata.map\nimport mono.shape.ShapeManager\nimport mono.shape.clipboard.ShapeClipboardManager\nimport mono.shape.selection.SelectedShapeManager\nimport mono.state.MainStateManager\nimport mono.ui.appstate.AppUiStateManager\nimport org.w3c.dom.HTMLDivElement\nimport org.w3c.dom.HTMLElement\nimport org.w3c.dom.url.URLSearchParams\n\n/**\n * Main class of the app to handle all kinds of events, UI, actions, etc.\n */\nclass MonoSketchApplication : LifecycleOwner() {\n    private val model = MonoSketchAppModel()\n\n    private val mainBoard = MonoBoard()\n    private val shapeManager = ShapeManager()\n    private val selectedShapeManager = SelectedShapeManager()\n    private val bitmapManager = MonoBitmapManager()\n\n    // Init AppUiStateManager here to apply theme as soon as possible.\n    private val appUiStateManager = AppUiStateManager(this)\n\n    private var mainStateManager: MainStateManager? = null\n\n    /**\n     * The entry point for all actions. This is called after window is loaded (`window.onload`)\n     */\n    override fun onStartInternal() {\n        val body = document.body ?: return\n\n        val boardCanvasContainer =\n            document.getElementById(CONTAINER_ID) as? HTMLDivElement ?: return\n        val axisCanvasContainer =\n            document.getElementById(AXIS_CONTAINER_ID) as? HTMLDivElement ?: return\n\n        val keyCommandController = KeyCommandController(body)\n\n        val canvasViewController = CanvasViewController(\n            this,\n            boardCanvasContainer,\n            axisCanvasContainer,\n            mainBoard,\n            model.windowSizeLiveData,\n            keyCommandController.keyCommandLiveData.map { it == KeyCommand.SHIFT_KEY }\n        )\n\n        val actionManager = ActionManager(this, keyCommandController.keyCommandLiveData)\n        actionManager.installDebugCommand()\n\n        mainStateManager = MainStateManager(\n            this,\n            mainBoard,\n            shapeManager,\n            selectedShapeManager,\n            bitmapManager,\n            canvasViewController,\n            ShapeClipboardManager(body),\n            canvasViewController.mousePointerLiveData,\n            actionManager,\n            appUiStateManager,\n            initialRootId = getInitialRootIdFromUrl()\n        )\n\n        ToolbarViewController(\n            this,\n            appUiStateManager.shapeToolVisibilityLiveData,\n            actionManager\n        )\n        ShapeToolViewController(\n            this,\n            document.getElementById(\"shape-tools\") as HTMLElement,\n            actionManager,\n            selectedShapeManager.selectedShapesLiveData,\n            shapeManager.versionLiveData,\n            appUiStateManager.shapeToolVisibilityLiveData\n        )\n        onResize()\n\n        appUiStateManager.observeTheme(\n            document.documentElement!!,\n            mainStateManager!!::forceFullyRedrawWorkspace\n        )\n    }\n\n    fun onResize() {\n        val body = document.body ?: return\n        val newSize = Size(body.clientWidth, body.clientHeight)\n        model.setWindowSize(newSize)\n    }\n\n    private fun getInitialRootIdFromUrl(): String {\n        val urlParams = URLSearchParams(window.location.search)\n        return urlParams.get(URL_PARAM_ID).orEmpty()\n    }\n\n    companion object {\n        private const val CONTAINER_ID = \"monoboard-canvas-container\"\n        private const val AXIS_CONTAINER_ID = \"monoboard-axis-container\"\n\n        private const val URL_PARAM_ID = \"id\"\n    }\n}\n",null,"package mono.environment\n\n/**\n * A special object for extracting build environments.\n */\nobject Build {\n    private const val BUILD_MODE_DEVELOPMENT = \"development\"\n    private const val BUILD_MODE_PRODUCTION = \"production\"\n\n    val BUILD_MODE = js(\"process.env.NODE_ENV\")\n    val DEBUG: Boolean = BUILD_MODE == BUILD_MODE_DEVELOPMENT\n}\n",null,"package mono.common\n\nobject Characters {\n    // Transparent in both rendering and selection\n    const val TRANSPARENT_CHAR: Char = 0.toChar()\n\n    // Transparent in rendering but visible for selection\n    const val HALF_TRANSPARENT_CHAR: Char = 1.toChar()\n\n    /**\n     * Copies [length] characters from [src] from [srcOffset] into [dest] from [destOffset].\n     * If the character is [TRANSPARENT_CHAR], ignore.\n     */\n    fun copyChars(\n        src: List<Char>,\n        srcOffset: Int,\n        dest: MutableList<Char>,\n        destOffset: Int,\n        length: Int\n    ) {\n        src.subList(srcOffset, srcOffset + length).forEachIndexed { index, char ->\n            if (char != TRANSPARENT_CHAR) {\n                dest[destOffset + index] = char\n            }\n        }\n    }\n\n    val Char.isTransparent: Boolean\n        get() = this == TRANSPARENT_CHAR\n\n    val Char.isHalfTransparent: Boolean\n        get() = this == HALF_TRANSPARENT_CHAR\n}\n","package mono.common\n\nimport org.w3c.dom.HTMLCollection\nimport org.w3c.dom.HTMLElement\nimport org.w3c.dom.events.KeyboardEvent\nimport org.w3c.dom.events.MouseEvent\nimport org.w3c.dom.get\n\ninline fun <reified T : HTMLElement> HTMLElement.getOnlyElementByClassName(className: String) =\n    getElementsByClassName(className).firstOrNull<T>()\n\ninline fun <reified T : HTMLElement> HTMLCollection.firstOrNull(): T? =\n    if (length > 0) get(0) as? T else null\n\nfun HTMLElement.onClick(isClickThrough: Boolean = false, action: (MouseEvent) -> Unit) {\n    onclick = {\n        action(it)\n        if (!isClickThrough) {\n            it.stopPropagation()\n        }\n    }\n}\n\nfun HTMLElement.onKeyDown(isPassThrough: Boolean = false, action: (KeyboardEvent) -> Unit) {\n    onkeydown = {\n        action(it)\n        if (!isPassThrough) {\n            it.stopPropagation()\n        }\n    }\n}\n","package mono.common\n\n/**\n * An object to contains all handling key-codes.\n */\nobject Key {\n    const val KEY_ESC = 27\n    const val KEY_SHIFT = 16\n    const val KEY_ENTER = 13\n    const val KEY_BACKSPACE = 8\n    const val KEY_DELETE = 46\n    const val KEY_ARROW_LEFT = 37\n    const val KEY_ARROW_UP = 38\n    const val KEY_ARROW_RIGHT = 39\n    const val KEY_ARROW_DOWN = 40\n    const val KEY_A = 65\n    const val KEY_C = 67\n    const val KEY_D = 68\n    const val KEY_L = 76\n    const val KEY_R = 82\n    const val KEY_T = 84\n    const val KEY_V = 86\n    const val KEY_X = 88\n    const val KEY_Z = 90\n}\n","package mono.common\n\n/**\n * A class for enumerating all in-use mouse cursors.\n */\nenum class MouseCursor(val value: String) {\n    DEFAULT(\"default\"),\n    TEXT(\"text\"),\n    CROSSHAIR(\"crosshair\"),\n    MOVE(\"move\"),\n    RESIZE_NWSE(\"nwse-resize\"),\n    RESIZE_NS(\"ns-resize\"),\n    RESIZE_NESW(\"nesw-resize\"),\n    RESIZE_EW(\"ew-resize\"),\n    RESIZE_ROW(\"row-resize\"),\n    RESIZE_COL(\"col-resize\")\n}\n","package mono.common\n\nimport kotlinx.browser.window\nimport org.w3c.dom.Window\nimport kotlin.js.Date\n\nfun post(action: () -> Unit): Cancelable = setTimeout(0, action)\n\nfun setTimeout(durationMillis: Int, action: () -> Unit): Cancelable =\n    if (durationMillis == 0) {\n        AnimationFrame(window.requestAnimationFrame { action() })\n    } else {\n        Timeout(window.setTimeout(action, durationMillis))\n    }\n\nfun setInterval(durationMillis: Int, action: () -> Unit): Cancelable =\n    Interval(window.setInterval(action, durationMillis))\n\ninterface Cancelable {\n    fun cancel()\n}\n\nprivate class Timeout(private val id: Int) : Cancelable {\n    override fun cancel() = window.clearTimeout(id)\n}\n\nprivate class Interval(private val id: Int) : Cancelable {\n    override fun cancel() = window.clearInterval(id)\n}\n\nprivate class AnimationFrame(private val id: Int) : Cancelable {\n    override fun cancel() = window.cancelAnimationFrame(id)\n}\n\nfun Window.isCommandKeySupported(): Boolean = navigator.platform.startsWith(\"Mac\")\n\nfun currentTimeMillis(): Double = Date.now()\n","package mono.common\n\nimport kotlinx.browser.window\nimport org.w3c.dom.events.KeyboardEvent\nimport org.w3c.dom.events.MouseEvent\n\nval KeyboardEvent.commandKey: Boolean\n    get() = if (window.isCommandKeySupported()) metaKey else ctrlKey\n\nval MouseEvent.commandKey: Boolean\n    get() = if (window.isCommandKeySupported()) metaKey else ctrlKey\n","package mono.common\n\nval <T> T.exhaustive: T\n    get() = this\n","package mono.common\n\nfun Boolean?.nullToFalse(): Boolean = this ?: false\n","package mono.export\n\nimport mono.graphics.bitmap.MonoBitmap\nimport mono.graphics.board.Highlight\nimport mono.graphics.board.MonoBoard\nimport mono.graphics.geo.Rect\nimport mono.shape.shape.AbstractShape\nimport mono.shape.shape.Group\n\n/**\n * A helper class for exporting selected shapes.\n */\nclass ExportShapesHelper(\n    private val getBitmap: (AbstractShape) -> MonoBitmap?,\n    private val setClipboardText: (String) -> Unit\n) {\n\n    fun exportText(shapes: List<AbstractShape>, isModalRequired: Boolean) {\n        if (shapes.isEmpty()) {\n            return\n        }\n\n        val left = shapes.minOf { it.bound.left }\n        val right = shapes.maxOf { it.bound.right }\n        val top = shapes.minOf { it.bound.top }\n        val bottom = shapes.maxOf { it.bound.bottom }\n        val window = Rect.byLTRB(left, top, right, bottom)\n\n        val exportingBoard = MonoBoard().apply { clearAndSetWindow(window) }\n        drawShapesOntoExportingBoard(exportingBoard, shapes)\n\n        val text = exportingBoard.toStringInBound(window)\n        if (isModalRequired) {\n            ExportShapesModal().show(text)\n        } else {\n            setClipboardText(text)\n        }\n    }\n\n    private fun drawShapesOntoExportingBoard(board: MonoBoard, shapes: Collection<AbstractShape>) {\n        for (shape in shapes) {\n            if (shape is Group) {\n                drawShapesOntoExportingBoard(board, shape.items)\n                continue\n            }\n            val bitmap = getBitmap(shape) ?: continue\n            board.fill(shape.bound.position, bitmap, Highlight.NO)\n        }\n    }\n}\n","@file:Suppress(\"FunctionName\")\n\npackage mono.export\n\nimport kotlinx.browser.document\nimport kotlinx.dom.addClass\nimport mono.common.setTimeout\nimport mono.html.Div\nimport mono.html.Pre\nimport mono.html.Span\nimport mono.html.Svg\nimport mono.html.SvgPath\nimport mono.html.TextArea\nimport mono.html.setAttributes\nimport mono.html.setOnClickListener\nimport org.w3c.dom.Element\n\n/**\n * A modal which is for showing the board rendering selected shapes and allowing users to copy as\n * text.\n */\ninternal class ExportShapesModal {\n    private var root: Element? = null\n    fun show(content: String) {\n        root = document.body?.Div(classes = \"export-text\") {\n            Div(classes = \"background fade-in\")\n\n            Div(classes = \"export-text__modal\") {\n                CloseButton()\n                Span(text = \"Export\", classes = \"export-text__title\")\n                Content(content)\n\n                setOnClickListener {\n                    it.stopPropagation()\n                }\n            }\n\n            setOnClickListener { dismiss() }\n        }\n        root?.addClass(\"in\")\n    }\n\n    private fun Element.CloseButton() {\n        Span(classes = \"export-text__close\") {\n            SvgIcon(16) {\n                /* ktlint-disable max-line-length */\n                SvgPath(\n                    \"M13.854 2.146a.5.5 0 0 1 0 .708l-11 11a.5.5 0 0 1-.708-.708l11-11a.5.5 0 0 1 .708 0Z\"\n                )\n                SvgPath(\n                    \"M2.146 2.146a.5.5 0 0 0 0 .708l11 11a.5.5 0 0 0 .708-.708l-11-11a.5.5 0 0 0-.708 0Z\"\n                )\n                /* ktlint-enable max-line-length */\n            }\n\n            setOnClickListener { dismiss() }\n        }\n    }\n\n    private fun Element.Content(content: String) {\n        Div(classes = \"export-text__content\") {\n            val textContent = Pre(text = content) {\n                setAttributes(\"contenteditable\" to true)\n            }\n            val textBox = TextArea(classes = \"hidden\", content = content)\n            CopyButton {\n                textBox.value = textContent.innerText\n                textBox.select()\n                document.execCommand(\"copy\")\n            }\n        }\n    }\n\n    private fun Element.CopyButton(copyContent: () -> Unit) {\n        Span(classes = \"export-text__copy\") {\n            SvgIcon(24, 24) {\n                /* ktlint-disable max-line-length */\n                SvgPath(\n                    \"M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z\"\n                )\n                /* ktlint-enable max-line-length */\n            }\n\n            setAttributes(\"title\" to \"Copy\")\n            setOnClickListener { copyContent() }\n        }\n    }\n\n    private fun Element.SvgIcon(size: Int, pathBlock: Element.() -> Unit = {}) =\n        SvgIcon(size, size, pathBlock)\n\n    private fun Element.SvgIcon(width: Int, height: Int, pathBlock: Element.() -> Unit) {\n        Svg {\n            setAttributes(\n                \"width\" to width,\n                \"height\" to height,\n                \"fill\" to \"currentColor\",\n                \"viewBox\" to \"0 0 $width $height\"\n            )\n\n            pathBlock()\n        }\n    }\n\n    private fun dismiss() {\n        val nonNullRoot = root ?: return\n        nonNullRoot.addClass(\"out\")\n        setTimeout(300) {\n            nonNullRoot.remove()\n        }\n    }\n}\n",null,"package mono.graphics.geo\n\n/**\n * A sealed class which indicates mouse event pointer types.\n */\nsealed interface MousePointer {\n    object Idle : MousePointer\n\n    data class Move(\n        val point: Point,\n        val pointPx: Point\n    ) : MousePointer\n\n    data class Down(\n        val point: Point,\n        val pointPx: Point,\n        val isWithShiftKey: Boolean\n    ) : MousePointer\n\n    data class Drag(\n        val mouseDownPoint: Point,\n        val point: Point,\n        val isWithShiftKey: Boolean\n    ) : MousePointer\n\n    data class Up(\n        val mouseDownPoint: Point,\n        val point: Point,\n        val isWithShiftKey: Boolean\n    ) : MousePointer\n\n    data class Click(val point: Point, val isWithShiftKey: Boolean) : MousePointer\n\n    data class DoubleClick(val point: Point) : MousePointer\n}\n","package mono.graphics.geo\n\nimport kotlinx.serialization.KSerializer\nimport kotlinx.serialization.Serializable\nimport kotlinx.serialization.descriptors.PrimitiveKind\nimport kotlinx.serialization.descriptors.PrimitiveSerialDescriptor\nimport kotlinx.serialization.descriptors.SerialDescriptor\nimport kotlinx.serialization.encoding.Decoder\nimport kotlinx.serialization.encoding.Encoder\n\n@Serializable(with = Point.PointSerializer::class)\ndata class Point(val left: Int, val top: Int) {\n    val row: Int get() = top\n    val column: Int get() = left\n\n    operator fun minus(base: Point): Point = Point(left - base.left, top - base.top)\n\n    operator fun plus(base: Point): Point = Point(left + base.left, top + base.top)\n\n    internal object PointSerializer : KSerializer<Point> {\n        override val descriptor: SerialDescriptor =\n            PrimitiveSerialDescriptor(\"Point\", PrimitiveKind.STRING)\n\n        override fun serialize(encoder: Encoder, value: Point) {\n            encoder.encodeString(\"${value.left}|${value.top}\")\n        }\n\n        override fun deserialize(decoder: Decoder): Point {\n            val marshaledValue = decoder.decodeString()\n            val (left, top) = marshaledValue.split(\"|\")\n            return Point(left = left.toInt(), top = top.toInt())\n        }\n    }\n\n    companion object {\n        val ZERO = Point(0, 0)\n    }\n}\n\n@Serializable(with = DirectedPoint.DirectedPointSerializer::class)\ndata class DirectedPoint(val direction: Direction, val left: Int, val top: Int) {\n    val point: Point\n        get() = Point(left, top)\n\n    constructor(direction: Direction, point: Point) : this(direction, point.left, point.top)\n\n    operator fun plus(base: Point): DirectedPoint =\n        copy(left = left + base.left, top = top + base.top)\n\n    enum class Direction {\n        HORIZONTAL,\n        VERTICAL;\n\n        val normalizedDirection: Direction\n            get() = when (this) {\n                VERTICAL -> HORIZONTAL\n                HORIZONTAL -> VERTICAL\n            }\n    }\n\n    internal object DirectedPointSerializer : KSerializer<DirectedPoint> {\n        private const val MARSHAL_HORIZONTAL = \"H\"\n        private const val MARSHAL_VERTICAL = \"V\"\n\n        override val descriptor: SerialDescriptor =\n            PrimitiveSerialDescriptor(\"DirectedPoint\", PrimitiveKind.STRING)\n\n        override fun serialize(encoder: Encoder, value: DirectedPoint) {\n            val direction = when (value.direction) {\n                Direction.HORIZONTAL -> MARSHAL_HORIZONTAL\n                Direction.VERTICAL -> MARSHAL_VERTICAL\n            }\n            encoder.encodeString(\"$direction|${value.left}|${value.top}\")\n        }\n\n        override fun deserialize(decoder: Decoder): DirectedPoint {\n            val marshaledValue = decoder.decodeString()\n            val (marshaledDirection, left, top) = marshaledValue.split(\"|\")\n            val direction =\n                if (marshaledDirection == MARSHAL_HORIZONTAL) {\n                    Direction.HORIZONTAL\n                } else {\n                    Direction.VERTICAL\n                }\n            return DirectedPoint(\n                direction,\n                left = left.toInt(),\n                top = top.toInt()\n            )\n        }\n    }\n}\n","package mono.graphics.geo\n\nimport kotlinx.serialization.KSerializer\nimport kotlinx.serialization.Serializable\nimport kotlinx.serialization.descriptors.PrimitiveKind\nimport kotlinx.serialization.descriptors.PrimitiveSerialDescriptor\nimport kotlinx.serialization.descriptors.SerialDescriptor\nimport kotlinx.serialization.encoding.Decoder\nimport kotlinx.serialization.encoding.Encoder\nimport kotlin.math.abs\nimport kotlin.math.max\nimport kotlin.math.min\n\n@Serializable(with = Rect.RectSerializer::class)\ndata class Rect(\n    val position: Point,\n    val size: Size\n) {\n    val width: Int = size.width\n    val height: Int = size.height\n\n    val left: Int = position.left\n    val right: Int = position.left + width - 1\n    val top: Int = position.top\n    val bottom: Int = position.top + height - 1\n\n    private val validHorizontalRange = left..right\n    private val validVerticalRange = top..bottom\n\n    operator fun contains(point: Point): Boolean =\n        point.left in validHorizontalRange && point.top in validVerticalRange\n\n    fun getOverlappedRect(rect: Rect): Rect? {\n        if (!isOverlapped(rect)) {\n            return null\n        }\n        val offset = rect.position - position\n        val top = max(offset.top, 0)\n        val bottom = min(offset.top + rect.height, height) - 1\n        val left = max(offset.left, 0)\n        val right = min(offset.left + rect.width, width) - 1\n        return byLTRB(\n            left + position.left,\n            top + position.top,\n            right + position.left,\n            bottom + position.top\n        )\n    }\n\n    fun isOverlapped(rect: Rect): Boolean {\n        val isHorizontalOverlap = left in rect.left..rect.right || rect.left in left..right\n        val isVerticalOverlap = top in rect.top..rect.bottom || rect.top in top..bottom\n        return isHorizontalOverlap && isVerticalOverlap\n    }\n\n    override fun toString(): String = \"[$left, $top] - [$width x $height]\"\n\n    internal object RectSerializer : KSerializer<Rect> {\n        override val descriptor: SerialDescriptor =\n            PrimitiveSerialDescriptor(\"Rect\", PrimitiveKind.STRING)\n\n        override fun serialize(encoder: Encoder, value: Rect) {\n            encoder.encodeString(\"${value.left}|${value.top}|${value.width}|${value.height}\")\n        }\n\n        override fun deserialize(decoder: Decoder): Rect {\n            val marshaledValue = decoder.decodeString()\n            val (left, top, width, height) = marshaledValue.split(\"|\")\n            return byLTWH(left.toInt(), top.toInt(), width.toInt(), height.toInt())\n        }\n    }\n\n    companion object {\n        val ZERO = byLTWH(0, 0, 0, 0)\n\n        fun byLTRB(left: Int, top: Int, right: Int, bottom: Int): Rect = Rect(\n            Point(min(left, right), min(top, bottom)),\n            Size(abs(right - left) + 1, abs(bottom - top) + 1)\n        )\n\n        fun byLTWH(left: Int, top: Int, width: Int, height: Int): Rect = Rect(\n            Point(left, top),\n            Size(width, height)\n        )\n\n        fun boundOf(rectangles: Sequence<Rect>): Rect {\n            val firstRect = rectangles.first()\n            var left = firstRect.left\n            var right = firstRect.right\n            var top = firstRect.top\n            var bottom = firstRect.bottom\n\n            for (rect in rectangles) {\n                left = min(rect.left, left)\n                right = max(rect.right, right)\n                top = min(rect.top, top)\n                bottom = max(rect.bottom, bottom)\n            }\n            return byLTRB(left, top, right, bottom)\n        }\n    }\n}\n","package mono.graphics.geo\n\nimport kotlinx.serialization.KSerializer\nimport kotlinx.serialization.Serializable\nimport kotlinx.serialization.descriptors.PrimitiveKind\nimport kotlinx.serialization.descriptors.PrimitiveSerialDescriptor\nimport kotlinx.serialization.descriptors.SerialDescriptor\nimport kotlinx.serialization.encoding.Decoder\nimport kotlinx.serialization.encoding.Encoder\n\n@Serializable(with = Size.SizeSerializer::class)\ndata class Size(val width: Int, val height: Int) {\n\n    internal object SizeSerializer : KSerializer<Size> {\n        override val descriptor: SerialDescriptor =\n            PrimitiveSerialDescriptor(\"Size\", PrimitiveKind.STRING)\n\n        override fun serialize(encoder: Encoder, value: Size) {\n            encoder.encodeString(\"${value.width}|${value.height}\")\n        }\n\n        override fun deserialize(decoder: Decoder): Size {\n            val marshaledValue = decoder.decodeString()\n            val (width, height) = marshaledValue.split(\"|\")\n            return Size(width.toInt(), height.toInt())\n        }\n    }\n\n    companion object {\n        val ZERO = Size(0, 0)\n    }\n}\n\ndata class SizeF(val width: Double, val height: Double)\n",null,"package mono.html\n\nimport org.w3c.dom.Document\nimport org.w3c.dom.Element\n\nfun Element.appendElement(children: List<Element>) = appendElement(*children.toTypedArray())\n\nfun Element.appendElement(vararg children: Element) {\n    for (node in children) {\n        append(node)\n    }\n}\n\nfun Element.setAttributes(vararg attrs: Pair<String, Any>) {\n    for ((key, value) in attrs) {\n        setAttribute(key, value.toString())\n    }\n}\n\nfun Element.style(vararg attrs: Pair<String, String>) = setAttributes(\"style\" to styleOf(*attrs))\n\nfun Element.bindClass(clazz: String, isApplicable: Boolean) {\n    if (isApplicable) {\n        classList.add(clazz)\n    } else {\n        classList.remove(clazz)\n    }\n}\n\nfun Document.select(query: String): Element = querySelector(query) as Element\n","@file:Suppress(\"FunctionName\")\n\npackage mono.html\n\nimport kotlinx.browser.document\nimport kotlinx.dom.addClass\nimport org.w3c.dom.Element\nimport org.w3c.dom.HTMLAnchorElement\nimport org.w3c.dom.HTMLCanvasElement\nimport org.w3c.dom.HTMLDivElement\nimport org.w3c.dom.HTMLHeadingElement\nimport org.w3c.dom.HTMLInputElement\nimport org.w3c.dom.HTMLLIElement\nimport org.w3c.dom.HTMLLabelElement\nimport org.w3c.dom.HTMLPreElement\nimport org.w3c.dom.HTMLSpanElement\nimport org.w3c.dom.HTMLTableColElement\nimport org.w3c.dom.HTMLTableElement\nimport org.w3c.dom.HTMLTableRowElement\nimport org.w3c.dom.HTMLTextAreaElement\nimport org.w3c.dom.HTMLUListElement\n\nfun Element.Div(\n    classes: String = \"\",\n    block: HTMLDivElement.() -> Unit = {}\n): HTMLDivElement = Div(this, classes, block)\n\nfun Div(\n    parent: Element? = null,\n    classes: String = \"\",\n    block: HTMLDivElement.() -> Unit = {}\n): HTMLDivElement = parent.createElement(\"div\", classes, block)\n\nfun Element.Heading(\n    level: HeadingLevel,\n    classes: String = \"\",\n    text: String = \"\",\n    block: HTMLHeadingElement.() -> Unit\n): HTMLHeadingElement = Heading(this, level, classes, text, block)\n\nfun Heading(\n    parent: Element?,\n    level: HeadingLevel,\n    classes: String = \"\",\n    text: String = \"\",\n    block: HTMLHeadingElement.() -> Unit\n): HTMLHeadingElement = parent.createElement(level.value, classes) {\n    innerText = text\n    block()\n}\n\nenum class HeadingLevel(val value: String) {\n    H1(\"h1\"), H2(\"h2\"), H3(\"H3\"), H4(\"h4\"), H5(\"h5\")\n}\n\nfun Element.Pre(\n    classes: String = \"\",\n    text: String = \"\",\n    block: HTMLPreElement.() -> Unit = {}\n): HTMLPreElement = Pre(this, classes, text, block)\n\nfun Pre(\n    parent: Element?,\n    classes: String = \"\",\n    text: String = \"\",\n    block: HTMLPreElement.() -> Unit = {}\n): HTMLPreElement = parent.createElement(\"pre\", classes) {\n    innerText = text\n    block()\n}\n\nfun Element.Span(\n    classes: String = \"\",\n    text: String = \"\",\n    block: HTMLSpanElement.() -> Unit = {}\n): HTMLSpanElement = Span(this, classes, text, block)\n\nfun Span(\n    parent: Element? = null,\n    classes: String = \"\",\n    text: String = \"\",\n    block: HTMLSpanElement.() -> Unit = {}\n): HTMLSpanElement = parent.createElement(\"span\", classes) {\n    innerText = text\n    block()\n}\n\nfun Element.Ul(classes: String = \"\", block: HTMLUListElement.() -> Unit): HTMLUListElement =\n    Ul(this, classes, block)\n\nfun Ul(\n    parent: Element?,\n    classes: String = \"\",\n    block: HTMLUListElement.() -> Unit\n): HTMLUListElement = parent.createElement(\"ul\", classes, block)\n\nfun Element.Li(classes: String = \"\", block: HTMLLIElement.() -> Unit = {}): HTMLLIElement =\n    Li(this, classes, block)\n\nfun Li(\n    parent: Element?,\n    classes: String = \"\",\n    block: HTMLLIElement.() -> Unit = {}\n): HTMLLIElement = parent.createElement(\"li\", classes, block)\n\nfun Element.A(\n    classes: String = \"\",\n    text: String = \"\",\n    href: String = \"\",\n    block: HTMLAnchorElement.() -> Unit\n): HTMLAnchorElement = A(this, classes, text, href, block)\n\nfun A(\n    parent: Element?,\n    classes: String = \"\",\n    text: String = \"\",\n    href: String = \"\",\n    block: HTMLAnchorElement.() -> Unit\n): HTMLAnchorElement = parent.createElement(\"a\", classes) {\n    innerText = text\n    if (href.isNotEmpty()) {\n        setAttributes(\"href\" to href)\n    }\n    block()\n}\n\nfun Element.TextArea(\n    classes: String = \"\",\n    content: String,\n    block: HTMLTextAreaElement.() -> Unit = {}\n): HTMLTextAreaElement = TextArea(this, classes, content, block)\n\nfun TextArea(\n    parent: Element?,\n    classes: String,\n    content: String,\n    block: HTMLTextAreaElement.() -> Unit = {}\n): HTMLTextAreaElement = parent.createElement(\"textarea\", classes) {\n    textContent = content\n    block()\n}\n\nfun Element.Input(\n    inputType: InputType,\n    classes: String = \"\",\n    block: HTMLInputElement.() -> Unit = {}\n): HTMLInputElement = Input(this, inputType, classes, block)\n\nfun Input(\n    parent: Element?,\n    inputType: InputType,\n    classes: String = \"\",\n    block: HTMLInputElement.() -> Unit = {}\n): HTMLInputElement = parent.createElement(\"input\", classes) {\n    type = inputType.value\n    block()\n}\n\nenum class InputType(val value: String) {\n    NUMBER(\"number\"),\n    FILE(\"file\"),\n    RADIO(\"radio\"),\n    CHECK_BOX(\"checkbox\")\n}\n\nfun Element.Label(classes: String = \"\", block: HTMLLabelElement.() -> Unit): HTMLLabelElement =\n    Label(this, classes, block)\n\nfun Label(\n    parent: Element?,\n    classes: String = \"\",\n    block: HTMLLabelElement.() -> Unit\n): HTMLLabelElement = parent.createElement(\"label\", classes, block)\n\nfun Element.Canvas(\n    classes: String = \"\",\n    block: HTMLCanvasElement.() -> Unit = {}\n): HTMLCanvasElement = Canvas(this, classes, block)\n\nfun Canvas(\n    parent: Element?,\n    classes: String = \"\",\n    block: HTMLCanvasElement.() -> Unit = {}\n): HTMLCanvasElement = parent.createElement(\"canvas\", classes, block)\n\nfun Element.Table(\n    classes: String = \"\",\n    block: HTMLTableElement.() -> Unit\n): HTMLTableElement = Table(this, classes, block)\n\nfun Table(\n    parent: Element?,\n    classes: String = \"\",\n    block: HTMLTableElement.() -> Unit\n): HTMLTableElement = parent.createElement(\"table\", classes, block)\n\nfun Element.Row(\n    classes: String = \"\",\n    block: HTMLTableRowElement.() -> Unit\n): HTMLTableRowElement = Row(this, classes, block)\n\nfun Row(\n    parent: Element?,\n    classes: String,\n    block: HTMLTableRowElement.() -> Unit\n): HTMLTableRowElement = parent.createElement(\"tr\", classes, block)\n\nfun Element.Cell(\n    classes: String = \"\",\n    text: String = \"\",\n    block: HTMLTableColElement.() -> Unit = {}\n): HTMLTableColElement = Cell(this, classes, text, block)\n\nfun Cell(\n    parent: Element?,\n    classes: String = \"\",\n    text: String = \"\",\n    block: HTMLTableColElement.() -> Unit = {}\n): HTMLTableColElement = parent.createElement(\"td\", classes) {\n    innerText = text\n    block()\n}\n\nfun Element.Svg(classes: String = \"\", block: Element.() -> Unit): Element =\n    Svg(this, classes, block)\n\nfun Svg(parent: Element?, classes: String = \"\", block: Element.() -> Unit): Element {\n    val svg = parent.createSvgElement(\"svg\", classes)\n    svg.block()\n    return svg\n}\n\nfun Element.SvgPath(path: String): Element = SvgPath(this, path)\n\nfun SvgPath(parent: Element?, path: String): Element {\n    val node = parent.createSvgElement(\"path\", \"\")\n    node.setAttribute(\"d\", path)\n    return node\n}\n\nprivate fun <T : Element> Element?.createElement(\n    type: String,\n    classes: String,\n    block: T.() -> Unit = {}\n): T {\n    @Suppress(\"UNCHECKED_CAST\")\n    val element = document.createElement(type) as T\n    element.addClass(classes)\n    this?.append(element)\n    element.block()\n    return element\n}\n\nprivate fun Element?.createSvgElement(type: String, classes: String): Element {\n    val element = document.createElementNS(\"http://www.w3.org/2000/svg\", type)\n    element.setAttribute(\"class\", classes)\n    this?.append(element)\n    return element\n}\n","package mono.html\n\nval Number.px: String\n    get() = \"${this}px\"\n\nfun styleOf(vararg attributes: Pair<String, String>): String =\n    attributes.asSequence().map { \"${it.first}: ${it.second}\" }.joinToString(\";\")\n",null,"package mono.html\n\nimport org.w3c.dom.Element\nimport org.w3c.dom.HTMLInputElement\nimport org.w3c.dom.events.Event\n\nfun Element.setOnClickListener(listener: (Event) -> Unit) = addEventListener(\"click\", listener)\n\nfun Element.setOnMouseWheelListener(listener: (Event) -> Unit) =\n    addEventListener(\"mousewheel\", listener)\n\nfun HTMLInputElement.setOnChangeListener(listener: (Event) -> Unit) =\n    addEventListener(\"change\", listener)\n\nfun Element.setOnMouseOverListener(listener: (Event) -> Unit) =\n    addEventListener(\"mouseover\", listener)\n\nfun Element.setOnMouseOutListener(listener: (Event) -> Unit) =\n    addEventListener(\"mouseout\", listener)\n\nfun Element.setOnFocusOut(listener: (Event) -> Unit) =\n    addEventListener(\"focusout\", listener)\n","package mono.html.canvas\n\nimport kotlinx.dom.addClass\nimport mono.common.MouseCursor\nimport mono.graphics.board.MonoBoard\nimport mono.graphics.geo.MousePointer\nimport mono.graphics.geo.Point\nimport mono.graphics.geo.Rect\nimport mono.graphics.geo.Size\nimport mono.html.Canvas\nimport mono.html.canvas.canvas.AxisCanvasViewController\nimport mono.html.canvas.canvas.BoardCanvasViewController\nimport mono.html.canvas.canvas.DrawingInfoController\nimport mono.html.canvas.canvas.GridCanvasViewController\nimport mono.html.canvas.canvas.InteractionCanvasViewController\nimport mono.html.canvas.canvas.SelectionCanvasViewController\nimport mono.html.canvas.mouse.MouseEventObserver\nimport mono.lifecycle.LifecycleOwner\nimport mono.livedata.LiveData\nimport mono.livedata.MediatorLiveData\nimport mono.livedata.distinctUntilChange\nimport mono.shapebound.InteractionBound\nimport mono.shapebound.InteractionPoint\nimport org.w3c.dom.HTMLDivElement\n\n/**\n * A view controller class which renders the board to user.\n */\nclass CanvasViewController(\n    lifecycleOwner: LifecycleOwner,\n    private val container: HTMLDivElement,\n    axisContainer: HTMLDivElement,\n    board: MonoBoard,\n    windowSizeLiveData: LiveData<Size>,\n    shiftKeyStateLiveData: LiveData<Boolean>\n) {\n    private val drawingInfoController = DrawingInfoController(container)\n\n    private val gridCanvasViewController: GridCanvasViewController\n    private val boardCanvasViewController: BoardCanvasViewController\n    private val interactionCanvasViewController: InteractionCanvasViewController\n    private val selectionCanvasViewController: SelectionCanvasViewController\n    private val axisCanvasViewController: AxisCanvasViewController\n\n    val windowBoundPx: Rect\n        get() = gridCanvasViewController.drawingInfo.boundPx\n\n    private val windowBoardBoundMediatorLiveData: MediatorLiveData<Rect> =\n        MediatorLiveData(Rect.ZERO)\n    val windowBoardBoundLiveData: LiveData<Rect> = windowBoardBoundMediatorLiveData\n\n    private val drawingInfo: DrawingInfoController.DrawingInfo\n        get() = drawingInfoController.drawingInfoLiveData.value\n\n    private val mouseEventController = MouseEventObserver(\n        lifecycleOwner,\n        container,\n        drawingInfoController.drawingInfoLiveData,\n        shiftKeyStateLiveData\n    )\n\n    val mousePointerLiveData: LiveData<MousePointer> = mouseEventController.mousePointerLiveData\n    val drawingOffsetPointPxLiveData: LiveData<Point> =\n        mouseEventController.drawingOffsetPointPxLiveData\n\n    init {\n        val drawingInfoLiveData = drawingInfoController.drawingInfoLiveData\n\n        mouseEventController.drawingOffsetPointPxLiveData.observe(\n            lifecycleOwner,\n            throttleDurationMillis = 0,\n            listener = drawingInfoController::setOffset\n        )\n\n        container.addClass(\"top-divider\")\n        container.oncontextmenu = { false }\n\n        axisCanvasViewController = AxisCanvasViewController(\n            lifecycleOwner,\n            axisContainer,\n            drawingInfoLiveData\n        ) {\n            mouseEventController.forceUpdateOffset(Point.ZERO)\n        }\n\n        gridCanvasViewController = GridCanvasViewController(\n            lifecycleOwner,\n            Canvas(container, CLASS_NAME_GRID),\n            drawingInfoLiveData\n        )\n        boardCanvasViewController = BoardCanvasViewController(\n            lifecycleOwner,\n            Canvas(container, CLASS_NAME_BOARD),\n            board,\n            drawingInfoLiveData\n        )\n        interactionCanvasViewController = InteractionCanvasViewController(\n            lifecycleOwner,\n            Canvas(container, CLASS_NAME_INTERACTION),\n            drawingInfoLiveData,\n            mouseEventController.mousePointerLiveData\n        )\n        selectionCanvasViewController = SelectionCanvasViewController(\n            lifecycleOwner,\n            Canvas(container, CLASS_NAME_SELECTION),\n            drawingInfoLiveData\n        )\n\n        windowSizeLiveData.distinctUntilChange().observe(lifecycleOwner) {\n            updateCanvasSize()\n        }\n        windowBoardBoundMediatorLiveData.add(drawingInfoLiveData) { value = it.boardBound }\n    }\n\n    /**\n     * Redraws all content on the canvas.\n     */\n    fun fullyRedraw() {\n        gridCanvasViewController.draw()\n        axisCanvasViewController.draw()\n        boardCanvasViewController.draw()\n        interactionCanvasViewController.draw()\n        selectionCanvasViewController.draw()\n    }\n\n    fun drawBoard() {\n        boardCanvasViewController.draw()\n        interactionCanvasViewController.draw()\n        selectionCanvasViewController.draw()\n    }\n\n    fun drawInteractionBounds(interactionBounds: List<InteractionBound>) {\n        interactionCanvasViewController.interactionBounds = interactionBounds\n        interactionCanvasViewController.draw()\n    }\n\n    fun drawSelectionBound(bound: Rect?) {\n        selectionCanvasViewController.selectingBound = bound\n        selectionCanvasViewController.draw()\n    }\n\n    fun getInteractionPoint(pointPx: Point): InteractionPoint? =\n        interactionCanvasViewController.getInteractionPoint(pointPx)\n\n    fun setFont(fontSize: Int) {\n        drawingInfoController.setFont(fontSize)\n    }\n\n    fun setOffset(offsetPx: Point) {\n        mouseEventController.forceUpdateOffset(offsetPx)\n    }\n\n    private fun updateCanvasSize() {\n        val widthPx = container.clientWidth\n        val heightPx = container.clientHeight\n\n        // Avoid layout mistake on Safari when height is set to 0 after being correct.\n        if (widthPx == 0 || heightPx == 0) {\n            return\n        }\n        drawingInfoController.setSize(widthPx, heightPx)\n    }\n\n    fun setMouseCursor(mouseCursor: MouseCursor) {\n        container.style.cursor = mouseCursor.value\n    }\n\n    fun toXPx(column: Double): Double = drawingInfo.toXPx(column)\n\n    fun toYPx(row: Double): Double = drawingInfo.toYPx(row)\n\n    fun toWidthPx(width: Double) = drawingInfo.toWidthPx(width)\n\n    fun toHeightPx(height: Double) = drawingInfo.toHeightPx(height)\n\n    companion object {\n        private const val CLASS_NAME_GRID = \"grid-canvas\"\n        private const val CLASS_NAME_BOARD = \"board-canvas\"\n        private const val CLASS_NAME_INTERACTION = \"interaction-canvas\"\n        private const val CLASS_NAME_SELECTION = \"selection-canvas\"\n    }\n}\n","package mono.html.canvas.canvas\n\nimport kotlinx.browser.window\nimport mono.graphics.geo.Size\nimport mono.html.Canvas\nimport mono.html.Div\nimport mono.html.canvas.canvas.DrawingInfoController.Companion.DEFAULT_FONT\nimport mono.html.modal.TooltipPosition\nimport mono.html.modal.tooltip\nimport mono.html.px\nimport mono.html.setAttributes\nimport mono.html.setOnClickListener\nimport mono.html.styleOf\nimport mono.lifecycle.LifecycleOwner\nimport mono.livedata.LiveData\nimport mono.ui.theme.ThemeColor\nimport org.w3c.dom.CanvasTextAlign\nimport org.w3c.dom.Element\nimport org.w3c.dom.HTMLCanvasElement\nimport org.w3c.dom.LEFT\nimport org.w3c.dom.Path2D\nimport org.w3c.dom.RIGHT\nimport kotlin.math.max\n\ninternal class AxisCanvasViewController(\n    lifecycleOwner: LifecycleOwner,\n    private val axisContainer: Element,\n    drawingInfoLiveData: LiveData<DrawingInfoController.DrawingInfo>,\n    private val canvas: HTMLCanvasElement = Canvas(axisContainer),\n    resetOffsetPx: () -> Unit\n) : BaseCanvasViewController(canvas) {\n    init {\n        Div(axisContainer) {\n            setAttributes(\n                \"style\" to styleOf(\n                    \"position\" to \"absolute\",\n                    \"left\" to 0.px,\n                    \"top\" to 0.px,\n                    \"width\" to AXIS_Y_WIDTH.px,\n                    \"height\" to AXIS_X_HEIGHT.px,\n                    \"cursor\" to \"pointer\"\n                )\n            )\n            tooltip(\"Jump to (0, 0)\", TooltipPosition.RIGHT)\n\n            setOnClickListener {\n                resetOffsetPx()\n            }\n        }\n\n        drawingInfoLiveData.observe(lifecycleOwner, listener = ::updateCanvasSize)\n        drawingInfoLiveData.observe(lifecycleOwner, 0) { draw() }\n    }\n\n    private fun updateCanvasSize(drawingInfo: DrawingInfoController.DrawingInfo) {\n        val canvasSizePx = Size(\n            drawingInfo.canvasSizePx.width + AXIS_Y_WIDTH.toInt(),\n            drawingInfo.canvasSizePx.height + AXIS_X_HEIGHT.toInt()\n        )\n\n        // Update canvas information causes canvas clearRect() which requires redraw\n        val isSizeChange = this.drawingInfo.canvasSizePx != canvasSizePx\n        if (isSizeChange) {\n            val dpr = max(window.devicePixelRatio, 2.0)\n            canvas.width = (canvasSizePx.width * dpr).toInt()\n            canvas.height = ((canvasSizePx.height) * dpr).toInt()\n            canvas.style.width = canvasSizePx.width.px\n            canvas.style.height = canvasSizePx.height.px\n            context.scale(dpr, dpr)\n        }\n\n        this.drawingInfo = drawingInfo.copy(canvasSizePx = canvasSizePx)\n\n        if (isSizeChange) {\n            draw()\n        }\n    }\n\n    override fun drawInternal() {\n        context.font = \"normal normal normal 10.5px $DEFAULT_FONT\"\n        drawAxis()\n    }\n\n    private fun drawAxis() {\n        val cellSizePx = drawingInfo.cellSizePx\n        val canvasSizePx = drawingInfo.canvasSizePx\n\n        val xAxisHeight = AXIS_X_HEIGHT\n        val yAxisWidth = AXIS_Y_WIDTH\n\n        val path = Path2D()\n        context.lineWidth = 1.0\n        context.fillStyle = ThemeColor.AxisBackground.colorCode\n        context.fillRect(\n            x = 0.0,\n            y = 0.0,\n            w = yAxisWidth,\n            h = canvasSizePx.height.toDouble()\n        )\n        context.fillStyle = ThemeColor.AxisText.colorCode\n        context.textAlign = CanvasTextAlign.RIGHT\n\n        path.addHLine(0.0, xAxisHeight, canvasSizePx.width.toDouble())\n\n        for (row in drawingInfo.boardRowRange) {\n            val text = row.toString()\n            val yPx = xAxisHeight + drawingInfo.toYPx(row.toDouble())\n            val xPx = yAxisWidth - 0.5 * cellSizePx.width\n            context.fillText(text, xPx, yPx + 3)\n        }\n\n        context.fillStyle = ThemeColor.AxisBackground.colorCode\n        context.fillRect(\n            x = 0.0,\n            y = 0.0,\n            w = canvasSizePx.width.toDouble(),\n            h = xAxisHeight\n        )\n        context.fillStyle = ThemeColor.AxisText.colorCode\n        context.textAlign = CanvasTextAlign.LEFT\n\n        path.addVLine(yAxisWidth, xAxisHeight, canvasSizePx.height.toDouble())\n\n        for (col in drawingInfo.boardColumnRange.filter { it % 20 == 0 }) {\n            val xPx = drawingInfo.toXPx(col.toDouble()) + AXIS_Y_WIDTH\n            context.fillText(col.toString(), xPx + 2, 7.0)\n\n            path.addVLine(xPx, xAxisHeight - AXIS_RULER_SIZE, AXIS_RULER_SIZE)\n        }\n\n        context.strokeStyle = ThemeColor.AxisRule.colorCode\n        context.stroke(path)\n    }\n\n    companion object {\n        private const val AXIS_RULER_SIZE = 12.0\n\n        private const val AXIS_Y_WIDTH = 33.0\n        private const val AXIS_X_HEIGHT = 18.0\n    }\n}\n","package mono.html.canvas.canvas\n\nimport kotlinx.browser.window\nimport mono.graphics.geo.Size\nimport mono.html.px\nimport org.w3c.dom.CanvasRenderingContext2D\nimport org.w3c.dom.CanvasTextAlign\nimport org.w3c.dom.CanvasTextBaseline\nimport org.w3c.dom.HTMLCanvasElement\nimport org.w3c.dom.LEFT\nimport org.w3c.dom.Path2D\nimport org.w3c.dom.TOP\nimport kotlin.math.max\n\n// TODO: Pass drawing info livedata into this class and let it observes the change.\ninternal abstract class BaseCanvasViewController(private val canvas: HTMLCanvasElement) {\n    protected val context: CanvasRenderingContext2D =\n        canvas.getContext(\"2d\") as CanvasRenderingContext2D\n\n    internal var drawingInfo: DrawingInfoController.DrawingInfo\n\n    init {\n        drawingInfo =\n            DrawingInfoController.DrawingInfo(canvasSizePx = Size(canvas.width, canvas.height))\n    }\n\n    protected fun setDrawingInfo(drawingInfo: DrawingInfoController.DrawingInfo) {\n        val canvasSizePx = drawingInfo.canvasSizePx\n\n        // Update canvas information causes canvas clearRect() which requires redraw\n        val isSizeChange = this.drawingInfo.canvasSizePx != canvasSizePx\n        if (isSizeChange) {\n            val dpr = max(window.devicePixelRatio, 2.0)\n            canvas.width = (canvasSizePx.width * dpr).toInt()\n            canvas.height = (canvasSizePx.height * dpr).toInt()\n            canvas.style.width = canvasSizePx.width.px\n            canvas.style.height = canvasSizePx.height.px\n            context.scale(dpr, dpr)\n        }\n\n        this.drawingInfo = drawingInfo\n\n        if (isSizeChange) {\n            draw()\n        }\n    }\n\n    internal fun draw() {\n        context.clearRect(\n            x = 0.0,\n            y = 0.0,\n            w = drawingInfo.canvasSizePx.width.toDouble(),\n            h = drawingInfo.canvasSizePx.height.toDouble()\n        )\n\n        context.font = drawingInfo.font\n        context.textAlign = CanvasTextAlign.LEFT\n        context.textBaseline = CanvasTextBaseline.TOP\n        context.imageSmoothingEnabled = true\n        drawInternal()\n    }\n\n    protected abstract fun drawInternal()\n\n    protected fun drawText(text: String, row: Int, column: Int) {\n        val yPx = drawingInfo.toYPx(row.toDouble())\n        val xPx = drawingInfo.toXPx(column.toDouble())\n        context.fillText(text, xPx, yPx)\n    }\n\n    protected fun Path2D.addHLine(xPx: Double, yPx: Double, widthPx: Double) {\n        moveTo(xPx, yPx)\n        lineTo(xPx + widthPx, yPx)\n    }\n\n    protected fun Path2D.addVLine(xPx: Double, yPx: Double, heightPx: Double) {\n        moveTo(xPx, yPx)\n        lineTo(xPx, yPx + heightPx)\n    }\n}\n","package mono.html.canvas.canvas\n\nimport mono.graphics.board.Highlight\nimport mono.graphics.board.MonoBoard\nimport mono.graphics.board.Pixel\nimport mono.lifecycle.LifecycleOwner\nimport mono.livedata.LiveData\nimport mono.ui.theme.ThemeColor\nimport org.w3c.dom.HTMLCanvasElement\n\ninternal class BoardCanvasViewController(\n    lifecycleOwner: LifecycleOwner,\n    canvas: HTMLCanvasElement,\n    private val board: MonoBoard,\n    drawingInfoLiveData: LiveData<DrawingInfoController.DrawingInfo>\n) : BaseCanvasViewController(canvas) {\n\n    init {\n        drawingInfoLiveData.observe(lifecycleOwner, listener = ::setDrawingInfo)\n    }\n\n    override fun drawInternal() {\n        context.font = drawingInfo.font\n        for (row in drawingInfo.boardRowRange) {\n            for (col in drawingInfo.boardColumnRange) {\n                drawPixel(board.get(col, row), row, col)\n            }\n        }\n    }\n\n    private fun drawPixel(pixel: Pixel, row: Int, column: Int) {\n        if (!pixel.isTransparent) {\n            val color = when (pixel.highlight) {\n                Highlight.NO -> ThemeColor.Shape\n                Highlight.SELECTED -> ThemeColor.ShapeSelected\n                Highlight.TEXT_EDITING -> ThemeColor.ShapeTextEditing\n            }\n            context.fillStyle = color.colorCode\n            drawText(pixel.char.toString(), row, column)\n        }\n    }\n}\n","package mono.html.canvas.canvas\n\nimport mono.graphics.geo.Point\nimport mono.graphics.geo.Rect\nimport mono.graphics.geo.Size\nimport mono.graphics.geo.SizeF\nimport mono.html.Canvas\nimport mono.html.px\nimport mono.livedata.LiveData\nimport mono.livedata.MutableLiveData\nimport mono.livedata.distinctUntilChange\nimport org.w3c.dom.CanvasRenderingContext2D\nimport org.w3c.dom.CanvasTextAlign\nimport org.w3c.dom.CanvasTextBaseline\nimport org.w3c.dom.HTMLDivElement\nimport org.w3c.dom.LEFT\nimport org.w3c.dom.MIDDLE\nimport kotlin.math.ceil\nimport kotlin.math.floor\n\n/**\n * A controller class to manage drawing info for the other canvas.\n */\ninternal class DrawingInfoController(container: HTMLDivElement) {\n    private val context: CanvasRenderingContext2D\n\n    private val drawingInfoMutableLiveData: MutableLiveData<DrawingInfo> =\n        MutableLiveData(DrawingInfo())\n    val drawingInfoLiveData: LiveData<DrawingInfo> =\n        drawingInfoMutableLiveData.distinctUntilChange()\n\n    init {\n        val canvas = Canvas(container, CLASS_NAME)\n        context = canvas.getContext(\"2d\") as CanvasRenderingContext2D\n\n        setSize(canvas.width, canvas.height)\n        setFont(13)\n    }\n\n    fun setFont(fontSize: Int) {\n        drawingInfoMutableLiveData.value =\n            drawingInfoMutableLiveData.value.copy(\n                cellSizePx = context.getCellSizePx(fontSize),\n                font = \"normal normal normal ${fontSize.px} $DEFAULT_FONT\",\n                fontSize = fontSize\n            )\n    }\n\n    fun setSize(widthPx: Int, heightPx: Int) {\n        drawingInfoMutableLiveData.value =\n            drawingInfoMutableLiveData.value.copy(canvasSizePx = Size(widthPx, heightPx))\n    }\n\n    fun setOffset(offset: Point) {\n        drawingInfoMutableLiveData.value = drawingInfoMutableLiveData.value.copy(offsetPx = offset)\n    }\n\n    private fun CanvasRenderingContext2D.getCellSizePx(fontSize: Int): SizeF {\n        context.font = font\n        context.textAlign = CanvasTextAlign.LEFT\n        context.textBaseline = CanvasTextBaseline.MIDDLE\n        val cWidth = floor(fontSize.toDouble() / 1.6)\n        val cHeight = fontSize.toDouble()\n        return SizeF(cWidth, cHeight)\n    }\n\n    internal data class DrawingInfo(\n        val offsetPx: Point = Point.ZERO,\n        val cellSizePx: SizeF = SizeF(1.0, 1.0),\n        val canvasSizePx: Size = Size(1, 1),\n        val font: String = \"\",\n        val fontSize: Int = 0\n    ) {\n        val boundPx: Rect = Rect(offsetPx, canvasSizePx)\n\n        private val boardOffsetRow: Int = (-offsetPx.top / cellSizePx.height).toInt()\n        private val boardOffsetColumn: Int = (-offsetPx.left / cellSizePx.width).toInt()\n        private val rowCount: Int = ceil(canvasSizePx.height / cellSizePx.height).toInt()\n        private val columnCount: Int = ceil(canvasSizePx.width / cellSizePx.width).toInt()\n\n        val boardBound: Rect = Rect.byLTWH(boardOffsetColumn, boardOffsetRow, columnCount, rowCount)\n\n        internal val boardRowRange: IntRange = boardOffsetRow..(boardOffsetRow + rowCount)\n        internal val boardColumnRange: IntRange =\n            boardOffsetColumn..(boardOffsetColumn + columnCount)\n\n        fun toXPx(column: Double): Double = floor(offsetPx.left + cellSizePx.width * column)\n        fun toYPx(row: Double): Double = floor(offsetPx.top + cellSizePx.height * row)\n        fun toBoardRow(yPx: Int): Int = floor((yPx - offsetPx.top) / cellSizePx.height).toInt()\n        fun toBoardColumn(xPx: Int): Int = floor((xPx - offsetPx.left) / cellSizePx.width).toInt()\n        fun toWidthPx(width: Double) = floor(cellSizePx.width * width)\n        fun toHeightPx(height: Double) = floor(cellSizePx.height * height)\n    }\n\n    companion object {\n        const val DEFAULT_FONT = \"'Fira Code'\"\n        private const val CLASS_NAME = \"drawing-info\"\n    }\n}\n","package mono.html.canvas.canvas\n\nimport mono.lifecycle.LifecycleOwner\nimport mono.livedata.LiveData\nimport mono.ui.theme.ThemeColor\nimport org.w3c.dom.HTMLCanvasElement\nimport org.w3c.dom.Path2D\n\ninternal class GridCanvasViewController(\n    lifecycleOwner: LifecycleOwner,\n    canvas: HTMLCanvasElement,\n    drawingInfoLiveData: LiveData<DrawingInfoController.DrawingInfo>\n) : BaseCanvasViewController(canvas) {\n\n    init {\n        drawingInfoLiveData.observe(lifecycleOwner, listener = ::setDrawingInfo)\n        drawingInfoLiveData.observe(lifecycleOwner, 0) { draw() }\n    }\n\n    override fun drawInternal() {\n        context.strokeStyle = ThemeColor.GridLine.colorCode\n        context.lineWidth = 0.25\n        context.stroke(createGridPath())\n\n        context.strokeStyle = ThemeColor.GridLineZero.colorCode\n        context.lineWidth = 1.0\n        val zeroLines = Path2D().apply {\n            addHLine(\n                0.0,\n                drawingInfo.toYPx(0.0),\n                drawingInfo.canvasSizePx.width.toDouble()\n            )\n            addVLine(\n                drawingInfo.toXPx(0.0),\n                0.0,\n                drawingInfo.canvasSizePx.height.toDouble()\n            )\n        }\n        context.stroke(zeroLines)\n    }\n\n    private fun createGridPath(): Path2D = Path2D().apply {\n        val zeroX = drawingInfo.toXPx(drawingInfo.boardColumnRange.first.toDouble() - 1.0)\n        val maxX = drawingInfo.toXPx(drawingInfo.boardColumnRange.last.toDouble() + 1.0)\n        val zeroY = drawingInfo.toYPx(drawingInfo.boardRowRange.first.toDouble() - 1.0)\n        val maxY = drawingInfo.toYPx(drawingInfo.boardRowRange.last.toDouble() + 1.0)\n\n        for (row in drawingInfo.boardRowRange) {\n            val y = drawingInfo.toYPx(row.toDouble())\n            addHLine(zeroX, y, maxX - zeroX)\n        }\n\n        for (col in drawingInfo.boardColumnRange) {\n            val x = drawingInfo.toXPx(col.toDouble())\n            addVLine(x, zeroY, maxY - zeroY)\n        }\n    }\n}\n","package mono.html.canvas.canvas\n\nimport mono.common.exhaustive\nimport mono.graphics.geo.MousePointer\nimport mono.graphics.geo.Point\nimport mono.lifecycle.LifecycleOwner\nimport mono.livedata.LiveData\nimport mono.livedata.map\nimport mono.shapebound.InteractionBound\nimport mono.shapebound.InteractionPoint\nimport mono.shapebound.LineInteractionBound\nimport mono.shapebound.ScalableInteractionBound\nimport mono.ui.theme.ThemeColor\nimport org.w3c.dom.HTMLCanvasElement\nimport org.w3c.dom.Path2D\nimport kotlin.math.PI\nimport kotlin.math.abs\n\n/**\n * A canvas view controller to render the interaction indicators.\n */\ninternal class InteractionCanvasViewController(\n    lifecycleOwner: LifecycleOwner,\n    canvas: HTMLCanvasElement,\n    drawingInfoLiveData: LiveData<DrawingInfoController.DrawingInfo>,\n    mousePointerLiveData: LiveData<MousePointer>\n) : BaseCanvasViewController(canvas) {\n\n    var interactionBounds: List<InteractionBound> = emptyList()\n\n    private var isMouseMoving: Boolean = false\n\n    init {\n        drawingInfoLiveData.observe(lifecycleOwner, listener = ::setDrawingInfo)\n        mousePointerLiveData.map { it is MousePointer.Drag }.observe(lifecycleOwner) {\n            isMouseMoving = it\n        }\n    }\n\n    override fun drawInternal() {\n        for (bound in interactionBounds) {\n            when (bound) {\n                is ScalableInteractionBound -> drawScalableInteractionBound(bound)\n                is LineInteractionBound -> drawLineInteractionBound(bound)\n            }.exhaustive\n        }\n    }\n\n    private fun drawScalableInteractionBound(bound: ScalableInteractionBound) {\n        val leftPx = drawingInfo.toXPx(bound.left)\n        val rightPx = drawingInfo.toXPx(bound.right)\n        val topPx = drawingInfo.toYPx(bound.top)\n        val bottomPx = drawingInfo.toYPx(bound.bottom)\n        val path = Path2D().apply {\n            moveTo(leftPx, topPx)\n            lineTo(rightPx, topPx)\n            lineTo(rightPx, bottomPx)\n            lineTo(leftPx, bottomPx)\n            closePath()\n        }\n        context.strokeStyle = ThemeColor.SelectionBoundStroke.colorCode\n        context.lineWidth = 1.0\n        context.stroke(path)\n\n        if (isMouseMoving) {\n            return\n        }\n\n        val dotPath = Path2D()\n        context.beginPath()\n        for (point in bound.interactionPoints) {\n            dotPath.addDot(drawingInfo.toXPx(point.left), drawingInfo.toYPx(point.top))\n        }\n        context.strokeStyle = ThemeColor.SelectionDotStroke.colorCode\n        context.lineWidth = 2.0\n        context.fillStyle = ThemeColor.SelectionDotFill.colorCode\n        context.stroke(dotPath)\n        context.fill(dotPath)\n    }\n\n    private fun drawLineInteractionBound(bound: LineInteractionBound) {\n        if (isMouseMoving) {\n            return\n        }\n\n        val dotPath = Path2D()\n        context.beginPath()\n        for (point in bound.interactionPoints) {\n            dotPath.addDot(drawingInfo.toXPx(point.left), drawingInfo.toYPx(point.top))\n        }\n        context.strokeStyle = ThemeColor.SelectionDotStroke.colorCode\n        context.lineWidth = 2.0\n        context.fillStyle = ThemeColor.SelectionDotFill.colorCode\n        context.stroke(dotPath)\n        context.fill(dotPath)\n    }\n\n    private fun Path2D.addDot(xPx: Double, yPx: Double) {\n        moveTo(xPx, yPx)\n        arc(xPx, yPx, DOT_RADIUS, 0.0, FULL_CIRCLE_ARG)\n    }\n\n    fun getInteractionPoint(pointPx: Point): InteractionPoint? {\n        for (bound in interactionBounds.reversed()) {\n            val closePoint = bound.interactionPoints.lastOrNull { it.isAround(pointPx) }\n            if (closePoint != null) {\n                return closePoint\n            }\n        }\n\n        return null\n    }\n\n    private fun InteractionPoint.isAround(pointPx: Point): Boolean {\n        val leftPx = drawingInfo.toXPx(left)\n        val topPx = drawingInfo.toYPx(top)\n        return abs(leftPx - pointPx.left) < 6 && abs(topPx - pointPx.top) < 6\n    }\n\n    companion object {\n        private const val DOT_RADIUS = 3.2\n        private const val FULL_CIRCLE_ARG = 2 * PI\n    }\n}\n",null,"package mono.html.canvas.canvas\n\nimport mono.graphics.geo.Rect\nimport mono.lifecycle.LifecycleOwner\nimport mono.livedata.LiveData\nimport mono.ui.theme.ThemeColor\nimport org.w3c.dom.HTMLCanvasElement\nimport org.w3c.dom.Path2D\n\n/**\n * A canvas view controller to render the selection rectangle bound indicator.\n */\ninternal class SelectionCanvasViewController(\n    lifecycleOwner: LifecycleOwner,\n    canvas: HTMLCanvasElement,\n    drawingInfoLiveData: LiveData<DrawingInfoController.DrawingInfo>\n) : BaseCanvasViewController(canvas) {\n\n    var selectingBound: Rect? = null\n\n    init {\n        drawingInfoLiveData.observe(lifecycleOwner, listener = ::setDrawingInfo)\n    }\n\n    override fun drawInternal() {\n        val bound = selectingBound ?: return\n        val leftPx = drawingInfo.toXPx(bound.left.toDouble())\n        val topPx = drawingInfo.toYPx(bound.top.toDouble())\n        val rightPx = drawingInfo.toXPx(bound.right + 1.0)\n        val bottomPx = drawingInfo.toYPx(bound.bottom + 1.0)\n\n        val path = Path2D().apply {\n            moveTo(leftPx, topPx)\n            lineTo(rightPx, topPx)\n            lineTo(rightPx, bottomPx)\n            lineTo(leftPx, bottomPx)\n            closePath()\n        }\n        context.strokeStyle = ThemeColor.SelectionAreaStroke.colorCode\n        context.lineWidth = 1.0\n        context.setLineDash(DASH_PATTERN)\n        context.stroke(path)\n    }\n\n    companion object {\n        private val DASH_PATTERN = arrayOf(8.0, 6.0)\n    }\n}\n","package mono.html.canvas.mouse\n\nimport mono.common.commandKey\nimport mono.graphics.geo.MousePointer\nimport mono.graphics.geo.Point\nimport mono.html.canvas.canvas.DrawingInfoController\nimport mono.lifecycle.LifecycleOwner\nimport mono.livedata.LiveData\nimport mono.livedata.MutableLiveData\nimport mono.livedata.distinctUntilChange\nimport org.w3c.dom.HTMLDivElement\nimport org.w3c.dom.events.MouseEvent\nimport org.w3c.dom.events.WheelEvent\nimport kotlin.js.Date\n\n/**\n * A class to attach and observe mouse events happening on the canvas.\n * All events will be combined into a single live data [mousePointerLiveData].\n */\ninternal class MouseEventObserver(\n    lifecycleOwner: LifecycleOwner,\n    container: HTMLDivElement,\n    drawingInfoLiveData: LiveData<DrawingInfoController.DrawingInfo>,\n    shiftKeyStateLiveData: LiveData<Boolean>\n) {\n    private val mousePointerMutableLiveData = MutableLiveData<MousePointer>(MousePointer.Idle)\n    val mousePointerLiveData: LiveData<MousePointer> =\n        mousePointerMutableLiveData.distinctUntilChange()\n\n    private var drawingInfo: DrawingInfoController.DrawingInfo =\n        drawingInfoLiveData.value\n\n    private var mouseWheelDeltaX: Float = 0F\n    private var mouseWheelDeltaY: Float = 0F\n    private val drawingOffsetPointPxMutableLiveData = MutableLiveData(Point.ZERO)\n    val drawingOffsetPointPxLiveData: LiveData<Point> = drawingOffsetPointPxMutableLiveData\n\n    private val mouseDoubleClickDetector = MouseDoubleClickDetector()\n\n    init {\n        container.onmousedown = ::setMouseDownPointer\n        container.onmouseup = ::setMouseUpPointer\n        container.onmousemove = ::setMouseMovePointer\n        container.onwheel = ::setMouseWheel\n\n        drawingInfoLiveData.observe(lifecycleOwner) {\n            drawingInfo = it\n        }\n        shiftKeyStateLiveData.observe(lifecycleOwner) {\n            val currentMouseValue = mousePointerLiveData.value\n            if (currentMouseValue is MousePointer.Drag) {\n                mousePointerMutableLiveData.value = currentMouseValue.copy(isWithShiftKey = it)\n            }\n        }\n    }\n\n    fun forceUpdateOffset(offsetPx: Point) {\n        drawingOffsetPointPxMutableLiveData.value = offsetPx\n    }\n\n    private fun setMouseDownPointer(event: MouseEvent) {\n        if (mousePointerLiveData.value == MousePointer.Idle ||\n            mousePointerLiveData.value is MousePointer.Move\n        ) {\n            mousePointerMutableLiveData.value =\n                MousePointer.Down(event.toPoint(), event.toPointPx(), event.shiftKey)\n        }\n    }\n\n    private fun setMouseUpPointer(event: MouseEvent) {\n        val isDoubleClick = mouseDoubleClickDetector.onMouseUp()\n        val currentValue = mousePointerLiveData.value\n        val clickPoint = event.toPoint()\n\n        mousePointerMutableLiveData.value = when (currentValue) {\n            is MousePointer.Down ->\n                MousePointer.Up(currentValue.point, clickPoint, event.shiftKey)\n            is MousePointer.Drag ->\n                MousePointer.Up(currentValue.mouseDownPoint, clickPoint, event.shiftKey)\n\n            is MousePointer.Move,\n            is MousePointer.Up,\n            is MousePointer.Click,\n            is MousePointer.DoubleClick,\n            MousePointer.Idle -> MousePointer.Idle\n        }\n\n        if (currentValue is MousePointer.Down) {\n            mousePointerMutableLiveData.value = if (isDoubleClick) {\n                MousePointer.DoubleClick(event.toPoint())\n            } else {\n                MousePointer.Click(clickPoint, event.shiftKey)\n            }\n        }\n        mousePointerMutableLiveData.value = MousePointer.Idle\n    }\n\n    private fun setMouseMovePointer(event: MouseEvent) {\n        mouseDoubleClickDetector.reset()\n        val newPointer = when (val mousePointer = mousePointerLiveData.value) {\n            is MousePointer.Down ->\n                MousePointer.Drag(mousePointer.point, event.toPoint(), event.shiftKey)\n                    .takeIf { it.point != mousePointer.point }\n\n            is MousePointer.Drag ->\n                MousePointer.Drag(mousePointer.mouseDownPoint, event.toPoint(), event.shiftKey)\n\n            is MousePointer.Move,\n            is MousePointer.Up,\n            is MousePointer.Click,\n            is MousePointer.DoubleClick,\n            MousePointer.Idle -> MousePointer.Move(event.toPoint(), event.toPointPx())\n        } ?: return\n        mousePointerMutableLiveData.value = newPointer\n    }\n\n    private fun setMouseWheel(event: WheelEvent) {\n        event.preventDefault()\n        event.stopPropagation()\n\n        val scrollHorizontalThresholdPx = SCROLL_THRESHOLD_PIXEL\n        val scrollVerticalThresholdPx = SCROLL_THRESHOLD_PIXEL\n\n        val (scrollDeltaX, scrollDeltaY) = event.getScrollDelta()\n\n        val wheelDeltaLeft = scrollDeltaX * SCROLL_SPEED_RATIO / scrollHorizontalThresholdPx\n        val wheelDeltaTop = scrollDeltaY * SCROLL_SPEED_RATIO / scrollVerticalThresholdPx\n        val accumulateWheelDeltaLeft = mouseWheelDeltaX + wheelDeltaLeft\n        val accumulateWheelDeltaTop = mouseWheelDeltaY + wheelDeltaTop\n\n        val usableDeltaLeft = accumulateWheelDeltaLeft.toInt()\n        val usableDeltaTop = accumulateWheelDeltaTop.toInt()\n\n        if (usableDeltaLeft != 0 || usableDeltaTop != 0) {\n            val offsetLeft =\n                drawingInfo.offsetPx.left - usableDeltaLeft * scrollHorizontalThresholdPx.toInt()\n            val offsetTop =\n                drawingInfo.offsetPx.top - usableDeltaTop * scrollVerticalThresholdPx.toInt()\n            drawingOffsetPointPxMutableLiveData.value = Point(offsetLeft, offsetTop)\n        }\n\n        mouseWheelDeltaX = accumulateWheelDeltaLeft - usableDeltaLeft\n        mouseWheelDeltaY = accumulateWheelDeltaTop - usableDeltaTop\n    }\n\n    /**\n     * Returns scroll delta x and y of the wheel event after adjusting with meta keys:\n     * - When Alt/Option key is pressed, swap delta x and delta y\n     * - When Command/CTRL and Shift keys are pressed, scroll horizontally (delta y = 0)\n     * - When Shift key is pressed, scroll vertically (delta x = 0)\n     * - Otherwise, return the event's delta x and delta y values.\n     *\n     * Note: Alt/Option key can be combined with the other keys.\n     */\n    private fun WheelEvent.getScrollDelta(): Pair<Float, Float> {\n        val deltaX = deltaX.toFloat()\n        val deltaY = deltaY.toFloat()\n        val scrollDeltaX = if (altKey) deltaY else deltaX\n        val scrollDeltaY = if (altKey) deltaX else deltaY\n\n        return when {\n            commandKey && shiftKey -> scrollDeltaX to 0.0F\n            shiftKey -> 0.0F to scrollDeltaY\n            else -> scrollDeltaX to scrollDeltaY\n        }\n    }\n\n    private fun MouseEvent.toPoint(): Point =\n        Point(\n            drawingInfo.toBoardColumn(offsetX.toInt()),\n            drawingInfo.toBoardRow(offsetY.toInt())\n        )\n\n    private fun MouseEvent.toPointPx(): Point = Point(offsetX.toInt(), offsetY.toInt())\n\n    private class MouseDoubleClickDetector {\n        private var lastMouseUpMillis: Long = 0\n        private var mouseUpCount: Int = 0\n\n        fun onMouseUp(): Boolean {\n            val isDoubleClick = Date.now().toLong() - lastMouseUpMillis < 500 && mouseUpCount > 0\n            lastMouseUpMillis = Date.now().toLong()\n            mouseUpCount += 1\n\n            return isDoubleClick\n        }\n\n        fun reset() {\n            lastMouseUpMillis = 0L\n            mouseUpCount = 0\n        }\n    }\n\n    companion object {\n        private const val SCROLL_SPEED_RATIO = 1 / 1.3F\n        private const val SCROLL_THRESHOLD_PIXEL = 1F\n    }\n}\n","package mono.html.modal\n\nimport kotlinx.browser.document\nimport mono.common.Cancelable\nimport mono.common.Key\nimport mono.common.onKeyDown\nimport mono.common.setTimeout\nimport mono.html.Div\nimport mono.html.Input\nimport mono.html.InputType\nimport mono.html.Li\nimport mono.html.Ul\nimport mono.html.setOnClickListener\nimport mono.html.setOnFocusOut\nimport org.w3c.dom.Element\n\n/**\n * A modal for dropdown menu\n */\nclass DropDownMenu(id: String, items: List<Item>, private val onClickAction: (Item) -> Unit) {\n    private val menu: Element?\n\n    private var dismissTimeout: Cancelable? = null\n\n    init {\n        println(items.filterIsInstance<Item.Text>().map { it.title })\n        menu = document.body?.Div(classes = \"drop-down-menu\") {\n            this.id = id\n\n            initItems(items)\n\n            val hiddenInput = Input(inputType = InputType.CHECK_BOX, classes = \"hidden-input\") {\n                setOnFocusOut { dismiss() }\n                focus()\n\n                onKeyDown {\n                    if (it.which == Key.KEY_ESC) {\n                        dismiss()\n                    }\n                }\n            }\n\n            onmousedown = {\n                setTimeout(5) {\n                    dismissTimeout?.cancel()\n                    hiddenInput.focus()\n                }\n            }\n        }\n    }\n\n    private fun Element.initItems(items: List<Item>) {\n        Ul {\n            for (item in items.filter { it.isVisible() }) {\n                when (item) {\n                    is Item.Divider -> Li(classes = \"drop-down-divider\")\n                    is Item.Text -> Li(classes = \"drop-down-item\") {\n                        innerText = item.title\n                        setOnClickListener {\n                            onClickAction(item)\n                            dismiss()\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    private fun dismiss() {\n        dismissTimeout = setTimeout(20) {\n            menu?.remove()\n        }\n    }\n\n    sealed class Item(internal val isVisible: () -> Boolean) {\n        class Divider(isVisible: () -> Boolean = { true }) : Item(isVisible)\n        class Text(val title: String, val key: Any, isVisible: () -> Boolean = { true }) :\n            Item(isVisible)\n    }\n}\n","package mono.html.modal\n\nimport kotlinx.browser.document\nimport mono.common.Key\nimport mono.common.commandKey\nimport mono.common.onKeyDown\nimport mono.common.post\nimport mono.html.Div\nimport mono.html.px\nimport mono.html.setAttributes\nimport mono.html.setOnFocusOut\nimport mono.html.setOnMouseWheelListener\nimport mono.html.styleOf\nimport org.w3c.dom.Element\nimport org.w3c.dom.HTMLElement\nimport org.w3c.dom.events.KeyboardEvent\n\n/**\n * A modal for edit text.\n */\nclass EditTextModal(\n    private val initText: String = \"\",\n    private val onTextChange: (newText: String) -> Unit\n) {\n    private var root: HTMLElement? = null\n\n    private var onDismiss: () -> Unit = {}\n\n    fun show(\n        leftPx: Double,\n        topPx: Double,\n        widthPx: Double,\n        heightPx: Double\n    ) {\n        root = document.body?.Div(\"modal-edit-text\") {\n            Div(\"modal-edit-text-container\") {\n                Div(\"modal-edit-text-area-container\") {\n                    setAttributes(\n                        \"style\" to styleOf(\n                            \"left\" to (leftPx - 1).px,\n                            \"top\" to (topPx - 1).px,\n                            \"width\" to (widthPx + 2).px,\n                            \"height\" to (heightPx + 2).px\n                        )\n                    )\n\n                    initTextArea()\n                }\n            }\n\n            setOnMouseWheelListener { it.preventDefault() }\n        }\n    }\n\n    private fun dismiss() {\n        root?.remove()\n        onDismiss()\n    }\n\n    fun setOnDismiss(onDismiss: () -> Unit) {\n        this.onDismiss = onDismiss\n    }\n\n    private fun Element.initTextArea() {\n        val textArea = Div(\"modal-edit-text-area\") {\n            setAttributes(\"contenteditable\" to true)\n        }\n\n        // This div is for HTML decoding\n        val converterDiv = Div {\n            setAttributes(\"style\" to styleOf(\"display\" to \"none\"))\n        }\n        val htmlAdjustmentRegex = \"(^<div>|</div>|<br/?>)\".toRegex()\n        textArea.oninput = {\n            val html = textArea.innerHTML.replace(htmlAdjustmentRegex, \"\")\n            val lines = html.split(\"<div>\")\n            val text = lines.joinToString(\"\\n\") {\n                converterDiv.innerHTML = it\n                converterDiv.innerText\n            }\n            onTextChange(text)\n        }\n\n        textArea.onpaste = {\n            it.preventDefault()\n            it.stopPropagation()\n            val text = it.clipboardData?.getData(\"text/plain\").orEmpty()\n            insertText(text)\n        }\n        textArea.onKeyDown(action = ::checkKeyCommand)\n        // Suspend down a trampoline to let the environment cleans up previous event (like ENTER key)\n        post {\n            textArea.focus()\n            insertText(initText)\n        }\n\n        textArea.setOnFocusOut { dismiss() }\n    }\n\n    private fun insertText(text: String) {\n        // TODO: `execCommand` is deprecated. Find a new solution.\n        document.execCommand(\"insertText\", false, text)\n    }\n\n    private fun checkKeyCommand(event: KeyboardEvent) {\n        if (event.keyCode == Key.KEY_ENTER && event.commandKey || event.keyCode == Key.KEY_ESC) {\n            dismiss()\n        }\n    }\n}\n",null,"package mono.html.modal\n\nimport kotlinx.browser.document\nimport mono.common.Cancelable\nimport mono.common.setTimeout\nimport mono.html.Span\nimport mono.html.px\nimport mono.html.setOnMouseOutListener\nimport mono.html.setOnMouseOverListener\nimport mono.html.style\nimport org.w3c.dom.DOMRect\nimport org.w3c.dom.Element\n\n/**\n * Registers a tooltip for the targeting element.\n * The tooltip will be displayed along with of the anchor element based on the relative [position]\n * after 600ms hovering.\n */\nfun Element.tooltip(text: String, position: TooltipPosition = TooltipPosition.BOTTOM) {\n    val tooltip = Tooltip(this, text, position)\n    setOnMouseOverListener { tooltip.show() }\n    setOnMouseOutListener { tooltip.hide() }\n}\n\nenum class TooltipPosition(val clazz: String) {\n    LEFT(\"left\"),\n    RIGHT(\"right\"),\n    TOP(\"top\"),\n    BOTTOM(\"bottom\")\n}\n\nprivate class Tooltip(\n    private val anchor: Element,\n    private val text: String,\n    private val position: TooltipPosition\n) {\n    private var view: Element? = null\n    private var showTask: Cancelable? = null\n\n    fun show() {\n        if (showTask != null) {\n            return\n        }\n        showTask = setTimeout(600, ::showInternal)\n    }\n\n    private fun showInternal() {\n        if (view != null) {\n            return\n        }\n        val boundingRect = anchor.getBoundingClientRect()\n        val tooltipArrowLeft = boundingRect.tooltipArrowLeft\n        val tooltipArrowTop = boundingRect.tooltipArrowTop\n        view = document.body?.Span(\"mono-tooltip ${position.clazz}\", text) {\n            val tooltipLeft = when (position) {\n                TooltipPosition.LEFT -> tooltipArrowLeft - clientWidth\n                TooltipPosition.RIGHT -> tooltipArrowLeft\n                TooltipPosition.TOP,\n                TooltipPosition.BOTTOM -> tooltipArrowLeft - clientWidth / 2\n            }\n            val tooltipTop = when (position) {\n                TooltipPosition.LEFT,\n                TooltipPosition.RIGHT -> tooltipArrowTop - clientHeight / 2\n                TooltipPosition.TOP -> tooltipArrowTop - clientHeight\n                TooltipPosition.BOTTOM -> tooltipArrowTop\n            }\n            style(\n                \"left\" to tooltipLeft.px,\n                \"top\" to tooltipTop.px\n            )\n        }\n    }\n\n    private val DOMRect.tooltipArrowLeft: Double\n        get() = when (position) {\n            TooltipPosition.LEFT -> left\n            TooltipPosition.RIGHT -> right\n            TooltipPosition.TOP,\n            TooltipPosition.BOTTOM -> (left + right) / 2\n        }\n\n    private val DOMRect.tooltipArrowTop: Double\n        get() = when (position) {\n            TooltipPosition.LEFT,\n            TooltipPosition.RIGHT -> (top + bottom) / 2\n            TooltipPosition.TOP -> top\n            TooltipPosition.BOTTOM -> bottom\n        }\n\n    fun hide() {\n        showTask?.cancel()\n        showTask = null\n        view?.remove()\n        view = null\n    }\n}\n","package mono.html.toolbar\n\nimport kotlinx.browser.document\nimport mono.actionmanager.ActionManager\nimport mono.html.select\nimport mono.html.toolbar.view.MouseActionGroup\nimport mono.html.toolbar.view.RightToolbar\nimport mono.lifecycle.LifecycleOwner\nimport mono.livedata.LiveData\n\n/**\n * A view controller to manage toolbar.\n */\nclass ToolbarViewController(\n    lifecycleOwner: LifecycleOwner,\n    shapeToolVisibilityLiveData: LiveData<Boolean>,\n    private val actionManager: ActionManager\n) {\n    init {\n        with(document.select(\"#nav-toolbar-center\")) {\n            MouseActionGroup(\n                lifecycleOwner,\n                actionManager.retainableActionLiveData,\n                actionManager::setRetainableAction\n            )\n        }\n        with(document.select(\"#nav-toolbar-right\")) {\n            RightToolbar(\n                shapeToolVisibilityLiveData,\n                actionManager::setOneTimeAction\n            )\n        }\n    }\n}\n","@file:Suppress(\"FunctionName\")\n\npackage mono.html.toolbar.view\n\nimport mono.actionmanager.RetainableActionType\nimport mono.html.Div\nimport mono.html.SvgPath\nimport mono.html.modal.tooltip\nimport mono.html.setAttributes\nimport mono.html.setOnClickListener\nimport mono.html.toolbar.view.shapetool.CssClass\nimport mono.html.toolbar.view.shapetool.bindClass\nimport mono.lifecycle.LifecycleOwner\nimport mono.livedata.LiveData\nimport org.w3c.dom.Element\nimport org.w3c.dom.HTMLElement\n\n/**\n * A function to create mouse action toolbar UI.\n */\ninternal fun Element.MouseActionGroup(\n    lifecycleOwner: LifecycleOwner,\n    retainableActionLiveData: LiveData<RetainableActionType>,\n    setRetainableAction: (RetainableActionType) -> Unit\n) {\n    Div(\"main-mouse-actions\") {\n        val actionElements = MouseActionType.values().map {\n            MouseActionGroupItem(it, setRetainableAction)\n        }\n\n        retainableActionLiveData.observe(lifecycleOwner) {\n            val selectedAction = MouseActionType.fromRetainableAction(it)\n\n            for (element in actionElements) {\n                element.bindClass(CssClass.SELECTED, element.mouseAction == selectedAction)\n            }\n        }\n    }\n}\n\nprivate enum class MouseActionType(\n    val retainableActionType: RetainableActionType,\n    val title: String,\n    val iconPath: String,\n    val isDefaultSelected: Boolean = false\n) {\n    SELECTION(\n        RetainableActionType.IDLE,\n        title = \"Select (V)\",\n        iconPath = \"M7.436 20.61L7.275 3.914l12.296 11.29-7.165.235-4.97 5.168z\",\n        isDefaultSelected = true\n    ),\n    ADD_RECTANGLE(\n        RetainableActionType.ADD_RECTANGLE,\n        title = \"Rectangle (R)\",\n        iconPath = \"M22 19H2V5h20v14zM4 7v10h16V7z\"\n    ),\n    ADD_TEXT(\n        RetainableActionType.ADD_TEXT,\n        title = \"Text (T)\",\n        iconPath = \"M5.635 21v-2h12.731v2zm3.27-4v-1.12h2.005V4.12H7.425l-.39.44v2.58h-1.4\" +\n            \"V3h12.731v4.14h-1.4V4.56l-.39-.44h-3.485v11.76h2.005V17z\"\n    ),\n    ADD_LINE(\n        RetainableActionType.ADD_LINE,\n        title = \"Line (L)\",\n        iconPath = \"M18 15v-2H6v2H0V9h6v2h12V9h6v6z\"\n    );\n\n    companion object {\n        private val RETAINABLE_ACTION_TO_MOUSE_ACTION_MAP =\n            values().associateBy { it.retainableActionType }\n        private val NAME_TO_MOUSE_ACTION_MAP = values().associateBy { it.name }\n\n        fun fromRetainableAction(retainableActionType: RetainableActionType): MouseActionType? =\n            RETAINABLE_ACTION_TO_MOUSE_ACTION_MAP[retainableActionType]\n\n        fun fromName(name: String?): MouseActionType? = NAME_TO_MOUSE_ACTION_MAP[name]\n    }\n}\n\nprivate fun Element.MouseActionGroupItem(\n    mouseActionType: MouseActionType,\n    onClick: (RetainableActionType) -> Unit\n): HTMLElement = Div(classes = \"action-button\") {\n    SvgIcon(21, 21, 24, 24) {\n        SvgPath(mouseActionType.iconPath)\n    }\n\n    bindClass(CssClass.SELECTED, mouseActionType.isDefaultSelected)\n    setAttributes(ATTR_ACTION to mouseActionType.name)\n\n    tooltip(mouseActionType.title)\n\n    setOnClickListener { onClick(mouseActionType.retainableActionType) }\n}\n\nprivate val Element.mouseAction: MouseActionType?\n    get() = MouseActionType.fromName(getAttribute(ATTR_ACTION))\n\nprivate const val ATTR_ACTION = \"data-action\"\n",null,"@file:Suppress(\"FunctionName\")\n\npackage mono.html.toolbar.view\n\nimport mono.actionmanager.OneTimeActionType\nimport mono.html.Div\nimport mono.html.SvgPath\nimport mono.html.modal.DropDownMenu\nimport mono.html.modal.DropDownMenu.Item.Text\nimport mono.html.modal.TooltipPosition\nimport mono.html.modal.tooltip\nimport mono.html.setAttributes\nimport mono.html.setOnClickListener\nimport mono.livedata.LiveData\nimport mono.ui.theme.ThemeManager\nimport mono.ui.theme.ThemeMode\nimport org.w3c.dom.Element\n\n/**\n * A function to create right toolbar UI.\n */\ninternal fun Element.RightToolbar(\n    shapeToolVisibilityLiveData: LiveData<Boolean>,\n    onActionSelected: (OneTimeActionType) -> Unit\n) {\n    ThemeIcon {\n        ThemeManager.getInstance().setTheme(it)\n    }\n    DropDownMenuIcon {\n        val items = listOf(\n            Text(\"Save As...\", OneTimeActionType.SaveShapesAs),\n            Text(\"Open File...\", OneTimeActionType.OpenShapes),\n            Text(\"Export Text\", OneTimeActionType.ExportSelectedShapes),\n            DropDownMenu.Item.Divider(),\n            Text(\n                \"Show Format panel\",\n                OneTimeActionType.ShowFormatPanel\n            ) { !shapeToolVisibilityLiveData.value },\n            Text(\n                \"Hide Format panel\",\n                OneTimeActionType.HideFormatPanel\n            ) { shapeToolVisibilityLiveData.value },\n            Text(\"Keyboard shortcuts\", OneTimeActionType.ShowKeyboardShortcuts)\n        )\n        DropDownMenu(\"main-dropdown-menu\", items) {\n            val textItem = it as Text\n            onActionSelected(textItem.key as OneTimeActionType)\n        }\n    }\n}\n\nprivate fun Element.ThemeIcon(onClickAction: (ThemeMode) -> Unit) {\n    Div(\"theme-dark-mode theme-icon\") {\n        SvgIcon(24, 24, 16, 16) {\n            SvgPath(\n                \"M8 11a3 3 0 1 1 0-6 3 3 0 0 1 0 6zm0 1a4 4 0 1 0 0-8 4 4 0 0 0 0 8zm.5-9.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0zm0 11a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0zm5-5a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1zm-11 0a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1zm9.743-4.036a.5.5 0 1 1-.707-.707.5.5 0 0 1 .707.707zm-7.779 7.779a.5.5 0 1 1-.707-.707.5.5 0 0 1 .707.707zm7.072 0a.5.5 0 1 1 .707-.707.5.5 0 0 1-.707.707zM3.757 4.464a.5.5 0 1 1 .707-.707.5.5 0 0 1-.707.707z\" // ktlint-disable max-line-length\n            )\n        }\n\n        setOnClickListener {\n            onClickAction(ThemeMode.DARK)\n        }\n\n        tooltip(\"Dark mode\", TooltipPosition.BOTTOM)\n    }\n    Div(\"theme-light-mode theme-icon\") {\n        SvgIcon(24, 24, 16, 16) {\n            SvgPath(\n                \"M12 8a4 4 0 1 1-8 0 4 4 0 0 1 8 0zM8.5 2.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0zm0 11a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0zm5-5a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1zm-11 0a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1zm9.743-4.036a.5.5 0 1 1-.707-.707.5.5 0 0 1 .707.707zm-7.779 7.779a.5.5 0 1 1-.707-.707.5.5 0 0 1 .707.707zm7.072 0a.5.5 0 1 1 .707-.707.5.5 0 0 1-.707.707zM3.757 4.464a.5.5 0 1 1 .707-.707.5.5 0 0 1-.707.707z\" // ktlint-disable max-line-length\n            )\n        }\n\n        setOnClickListener {\n            onClickAction(ThemeMode.LIGHT)\n        }\n\n        tooltip(\"Light mode\", TooltipPosition.BOTTOM)\n    }\n}\n\nprivate fun Element.DropDownMenuIcon(onClickAction: () -> Unit) {\n    Div(\"app-main-menu-icon\") {\n        setAttributes(\"onfocus\" to \"this.blur()\")\n\n        SvgIcon(20, 20) {\n            SvgPath(\n                \"M5.2 9.6C5.2 10.4837 4.48366 11.2 3.6 11.2C2.71634 11.2 2 10.4837 2 9.6C2 8.71634 2.71634 8 3.6 8C4.48366 8 5.2 8.71634 5.2 9.6Z\" // ktlint-disable max-line-length\n            )\n            SvgPath(\n                \"M11.6 9.6C11.6 10.4837 10.8837 11.2 10 11.2C9.11634 11.2 8.4 10.4837 8.4 9.6C8.4 8.71634 9.11634 8 10 8C10.8837 8 11.6 8.71634 11.6 9.6Z\" // ktlint-disable max-line-length\n            )\n            SvgPath(\n                \"M18 9.6C18 10.4837 17.2837 11.2 16.4 11.2C15.5163 11.2 14.8 10.4837 14.8 9.6C14.8 8.71634 15.5163 8 16.4 8C17.2837 8 18 8.71634 18 9.6Z\" // ktlint-disable max-line-length\n            )\n        }\n\n        setOnClickListener { onClickAction() }\n    }\n}\n","@file:Suppress(\"FunctionName\", \"ClassName\")\n\npackage mono.html.toolbar.view\n\nimport mono.html.Svg\nimport mono.html.setAttributes\nimport org.w3c.dom.Element\n\ninternal fun Element.SvgIcon(size: Int, pathBlock: Element.() -> Unit = {}) =\n    SvgIcon(size, size, pathBlock)\n\ninternal fun Element.SvgIcon(width: Int, height: Int, pathBlock: Element.() -> Unit) {\n    Svg(\"bi bi-cursor-fill\") {\n        setAttributes(\n            \"width\" to width,\n            \"height\" to height,\n            \"fill\" to \"currentColor\",\n            \"viewBox\" to \"0 0 $width $height\"\n        )\n\n        pathBlock()\n    }\n}\n\ninternal fun Element.SvgIcon(\n    width: Int,\n    height: Int,\n    viewPortWidth: Int,\n    viewPortHeight: Int,\n    pathBlock: Element.() -> Unit\n) {\n    Svg(\"bi bi-cursor-fill\") {\n        setAttributes(\n            \"width\" to width,\n            \"height\" to height,\n            \"fill\" to \"currentColor\",\n            \"viewBox\" to \"0 0 $viewPortWidth $viewPortHeight\"\n        )\n\n        pathBlock()\n    }\n}\n","package mono.html.toolbar.view.keyboardshortcut\n\nimport kotlinx.browser.document\nimport kotlinx.browser.window\nimport mono.common.isCommandKeySupported\nimport mono.html.Cell\nimport mono.html.Div\nimport mono.html.Row\nimport mono.html.Span\nimport mono.html.SvgPath\nimport mono.html.Table\nimport mono.html.setOnClickListener\nimport mono.html.style\nimport mono.html.toolbar.view.SvgIcon\nimport org.w3c.dom.Element\n\n/**\n * An HTML component for displaying keyboard shortcut hints.\n */\nclass KeyboardShortcuts private constructor() {\n    private val root: Element?\n\n    init {\n        root = document.body?.Div(classes = \"keyboard-shortcuts\") {\n            id = KEYBOARD_SHORTCUTS_ID\n            CloseButton()\n            Content()\n        }\n    }\n\n    private fun Element.CloseButton() {\n        Span(classes = \"keyboard-shortcuts__close\") {\n            SvgIcon(16) {\n                /* ktlint-disable max-line-length */\n                SvgPath(\n                    \"M13.854 2.146a.5.5 0 0 1 0 .708l-11 11a.5.5 0 0 1-.708-.708l11-11a.5.5 0 0 1 .708 0Z\"\n                )\n                SvgPath(\n                    \"M2.146 2.146a.5.5 0 0 0 0 .708l11 11a.5.5 0 0 0 .708-.708l-11-11a.5.5 0 0 0-.708 0Z\"\n                )\n                /* ktlint-enable max-line-length */\n            }\n\n            setOnClickListener { dismiss() }\n        }\n    }\n\n    private fun Element.Content() {\n        val isMacOs = window.isCommandKeySupported()\n        val metaCmdKey = if (isMacOs) \"cmd\" else \"ctrl\"\n        val metaShiftKey = \"shift\"\n        Div(classes = \"keyboard-shortcuts__content\") {\n            Span(\"keyboard-shortcuts__content-title\", \"Keyboard shortcuts\")\n\n            Div(classes = \"keyboard-shortcuts__content-container\") {\n                Table(\"keyboard-shortcuts__content-list\") {\n                    style(\"width\" to \"200px\")\n\n                    Shortcut(\"Add Rectangle\", \"R\")\n                    Shortcut(\"Add Text\", \"T\")\n                    Shortcut(\"Add Line\", \"L\")\n                }\n                Table(\"keyboard-shortcuts__content-list\") {\n                    style(\"width\" to \"270px\")\n\n                    Shortcut(\"Select tool\", \"V\")\n                    Shortcut(\"Select all\", metaCmdKey, \"A\")\n                    Shortcut(\"Deselect\", \"esc\")\n                    Shortcut(\"Undo\", metaCmdKey, \"Z\")\n                    Shortcut(\"Redo\", metaCmdKey, metaShiftKey, \"Z\")\n                }\n\n                Table(\"keyboard-shortcuts__content-list\") {\n                    Shortcut(\"Duplicate\", metaCmdKey, \"D\")\n                    Shortcut(\"Copy as text\", metaCmdKey, metaShiftKey, \"C\")\n                    Shortcut(\"Remove shapes\", \"delete\")\n                    Shortcut(\"Edit selected text\", \"enter\")\n                }\n            }\n        }\n    }\n\n    private fun Element.Shortcut(description: String, vararg keys: String) {\n        Row {\n            Cell {\n                for (key in keys) {\n                    Key(key)\n                }\n            }\n            Cell(classes = \"description\", text = description)\n        }\n    }\n\n    private fun Element.Key(key: String) {\n        val bold = if (key.length == 1) \"bold\" else \"\"\n        Span(classes = \"key $bold\", text = key)\n    }\n\n    private fun dismiss() {\n        root?.remove()\n    }\n\n    companion object {\n        private const val KEYBOARD_SHORTCUTS_ID = \"keyboard-shortcuts\"\n        fun showHint() {\n            if (document.getElementById(KEYBOARD_SHORTCUTS_ID) != null) {\n                // Keyboard shortcuts is already shown.\n                return\n            }\n            KeyboardShortcuts()\n        }\n    }\n}\n","package mono.html.toolbar.view.shapetool\n\nimport mono.actionmanager.ActionManager\nimport mono.actionmanager.OneTimeActionType\nimport mono.actionmanager.RetainableActionType\nimport mono.common.nullToFalse\nimport mono.livedata.LiveData\nimport mono.livedata.combineLiveData\nimport mono.livedata.map\nimport mono.shape.ShapeExtraManager\nimport mono.shape.extra.LineExtra\nimport mono.shape.extra.RectangleExtra\nimport mono.shape.extra.style.StraightStrokeDashPattern\nimport mono.shape.shape.AbstractShape\nimport mono.shape.shape.Group\nimport mono.shape.shape.Line\nimport mono.shape.shape.MockShape\nimport mono.shape.shape.Rectangle\nimport mono.shape.shape.Text\n\n/**\n * Data controller class of appearance section\n */\ninternal class AppearanceDataController(\n    selectedShapesLiveData: LiveData<Set<AbstractShape>>,\n    shapeManagerVersionLiveData: LiveData<Int>,\n    private val actionManager: ActionManager\n) {\n    private val shapesLiveData: LiveData<Set<AbstractShape>> =\n        combineLiveData(\n            selectedShapesLiveData,\n            shapeManagerVersionLiveData\n        ) { selected, _ -> selected }\n\n    private val retainableActionLiveData: LiveData<RetainableActionType> =\n        combineLiveData(\n            actionManager.retainableActionLiveData,\n            ShapeExtraManager.defaultExtraStateUpdateLiveData\n        ) { action, _ -> action }\n\n    val fillToolStateLiveData: LiveData<AppearanceVisibility> =\n        createFillAppearanceVisibilityLiveData(shapesLiveData, retainableActionLiveData)\n    val borderToolStateLiveData: LiveData<AppearanceVisibility> =\n        createBorderAppearanceVisibilityLiveData(shapesLiveData, retainableActionLiveData)\n    val borderDashPatternLiveData: LiveData<AppearanceVisibility> =\n        createBorderDashPatternLiveData(shapesLiveData)\n\n    val lineStrokeToolStateLiveData: LiveData<AppearanceVisibility> =\n        createLineStrokeAppearanceVisibilityLiveData(shapesLiveData, retainableActionLiveData)\n    val lineStrokeDashPatternLiveData: LiveData<AppearanceVisibility> =\n        createLineStrokeDashPatternLiveData(shapesLiveData)\n    val lineStartHeadToolStateLiveData: LiveData<AppearanceVisibility> =\n        createStartHeadAppearanceVisibilityLiveData(shapesLiveData, retainableActionLiveData)\n    val lineEndHeadToolStateLiveData: LiveData<AppearanceVisibility> =\n        createEndHeadAppearanceVisibilityLiveData(shapesLiveData, retainableActionLiveData)\n\n    val hasAnyVisibleToolLiveData: LiveData<Boolean> = combineLiveData(\n        fillToolStateLiveData,\n        borderToolStateLiveData,\n        lineStrokeToolStateLiveData,\n        lineStartHeadToolStateLiveData,\n        lineEndHeadToolStateLiveData\n    ) { list -> list.any { it != AppearanceVisibility.Hide } }\n\n    val fillOptions: List<AppearanceOptionItem> =\n        ShapeExtraManager.getAllPredefinedRectangleFillStyles()\n            .map { AppearanceOptionItem(it.id, it.displayName) }\n\n    val strokeOptions: List<AppearanceOptionItem> =\n        ShapeExtraManager.getAllPredefinedStrokeStyles()\n            .map { AppearanceOptionItem(it.id, it.displayName) }\n\n    val headOptions: List<AppearanceOptionItem> =\n        ShapeExtraManager.getAllPredefinedAnchorChars()\n            .map { AppearanceOptionItem(it.id, it.displayName) }\n\n    fun setOneTimeAction(actionType: OneTimeActionType) = actionManager.setOneTimeAction(actionType)\n\n    private fun createFillAppearanceVisibilityLiveData(\n        selectedShapesLiveData: LiveData<Set<AbstractShape>>,\n        retainableActionTypeLiveData: LiveData<RetainableActionType>\n    ): LiveData<AppearanceVisibility> {\n        val selectedVisibilityLiveData = selectedShapesLiveData.map {\n            when {\n                it.isEmpty() -> null\n                it.size > 1 -> AppearanceVisibility.Hide\n                else -> {\n                    when (val shape = it.single()) {\n                        is Rectangle -> shape.extra.toFillAppearanceVisibilityState()\n                        is Text -> shape.extra.boundExtra.toFillAppearanceVisibilityState()\n                        is Group,\n                        is Line,\n                        is MockShape -> AppearanceVisibility.Hide\n                    }\n                }\n            }\n        }\n        val defaultVisibilityLiveData = retainableActionTypeLiveData.map {\n            val defaultState = when (it) {\n                RetainableActionType.ADD_RECTANGLE,\n                RetainableActionType.ADD_TEXT ->\n                    ShapeExtraManager.defaultRectangleExtra.userSelectedFillStyle\n                RetainableActionType.ADD_LINE,\n                RetainableActionType.IDLE -> null\n            }\n            if (defaultState != null) {\n                val selectedFillPosition =\n                    ShapeExtraManager.getAllPredefinedRectangleFillStyles().indexOf(defaultState)\n                AppearanceVisibility.GridVisible(\n                    ShapeExtraManager.defaultRectangleExtra.isFillEnabled,\n                    selectedFillPosition\n                )\n            } else {\n                AppearanceVisibility.Hide\n            }\n        }\n\n        return createAppearanceVisibilityLiveData(\n            selectedVisibilityLiveData,\n            defaultVisibilityLiveData\n        )\n    }\n\n    private fun createBorderAppearanceVisibilityLiveData(\n        selectedShapesLiveData: LiveData<Set<AbstractShape>>,\n        retainableActionTypeLiveData: LiveData<RetainableActionType>\n    ): LiveData<AppearanceVisibility> {\n        val selectedVisibilityLiveData = selectedShapesLiveData.map {\n            when {\n                it.isEmpty() -> null\n                it.size > 1 -> AppearanceVisibility.Hide\n                else -> {\n                    when (val shape = it.single()) {\n                        is Rectangle -> shape.extra.toBorderAppearanceVisibilityState()\n                        is Text -> shape.extra.boundExtra.toBorderAppearanceVisibilityState()\n                        is Group,\n                        is Line,\n                        is MockShape -> AppearanceVisibility.Hide\n                    }\n                }\n            }\n        }\n        val defaultVisibilityLiveData = retainableActionTypeLiveData.map {\n            val defaultState = when (it) {\n                RetainableActionType.ADD_RECTANGLE,\n                RetainableActionType.ADD_TEXT ->\n                    ShapeExtraManager.defaultRectangleExtra.userSelectedBorderStyle\n                RetainableActionType.ADD_LINE,\n                RetainableActionType.IDLE -> null\n            }\n            if (defaultState != null) {\n                val selectedFillPosition =\n                    ShapeExtraManager.getAllPredefinedStrokeStyles().indexOf(defaultState)\n                AppearanceVisibility.GridVisible(\n                    ShapeExtraManager.defaultRectangleExtra.isBorderEnabled,\n                    selectedFillPosition\n                )\n            } else {\n                AppearanceVisibility.Hide\n            }\n        }\n\n        return createAppearanceVisibilityLiveData(\n            selectedVisibilityLiveData,\n            defaultVisibilityLiveData\n        )\n    }\n\n    private fun createBorderDashPatternLiveData(\n        selectedShapesLiveData: LiveData<Set<AbstractShape>>\n    ): LiveData<AppearanceVisibility> = selectedShapesLiveData.map {\n        val boundExtra = when (val shape = it.singleOrNull()) {\n            is Text -> shape.extra.boundExtra\n            is Rectangle -> shape.extra\n            is Line,\n            is Group,\n            is MockShape,\n            null -> null\n        }\n        val dashPattern =\n            boundExtra?.dashPattern.takeIf { boundExtra?.isBorderEnabled.nullToFalse() }\n        dashPattern?.let(AppearanceVisibility::DashVisible) ?: AppearanceVisibility.Hide\n    }\n\n    private fun createLineStrokeAppearanceVisibilityLiveData(\n        selectedShapesLiveData: LiveData<Set<AbstractShape>>,\n        retainableActionTypeLiveData: LiveData<RetainableActionType>\n    ): LiveData<AppearanceVisibility> {\n        val selectedVisibilityLiveData = selectedShapesLiveData.map {\n            when {\n                it.isEmpty() -> null\n                it.size > 1 -> AppearanceVisibility.Hide\n                else -> {\n                    when (val shape = it.single()) {\n                        is Line -> shape.extra.toStrokeVisibilityState()\n                        is Rectangle,\n                        is Text,\n                        is Group,\n                        is MockShape -> AppearanceVisibility.Hide\n                    }\n                }\n            }\n        }\n        val defaultVisibilityLiveData = retainableActionTypeLiveData.map {\n            val defaultState = when (it) {\n                RetainableActionType.ADD_LINE -> ShapeExtraManager.defaultLineExtra.strokeStyle\n                RetainableActionType.ADD_RECTANGLE,\n                RetainableActionType.ADD_TEXT,\n                RetainableActionType.IDLE -> null\n            }\n            if (defaultState != null) {\n                val selectedFillPosition =\n                    ShapeExtraManager.getAllPredefinedStrokeStyles().indexOf(defaultState)\n                AppearanceVisibility.GridVisible(\n                    ShapeExtraManager.defaultRectangleExtra.isBorderEnabled,\n                    selectedFillPosition\n                )\n            } else {\n                AppearanceVisibility.Hide\n            }\n        }\n\n        return createAppearanceVisibilityLiveData(\n            selectedVisibilityLiveData,\n            defaultVisibilityLiveData\n        )\n    }\n\n    private fun createLineStrokeDashPatternLiveData(\n        selectedShapesLiveData: LiveData<Set<AbstractShape>>\n    ): LiveData<AppearanceVisibility> = selectedShapesLiveData.map {\n        val extra = when (val shape = it.singleOrNull()) {\n            is Line -> shape.extra\n            is Group,\n            is Text,\n            is Rectangle,\n            is MockShape,\n            null -> null\n        }\n        val dashPattern = extra?.dashPattern.takeIf { extra?.isStrokeEnabled.nullToFalse() }\n        dashPattern?.let(AppearanceVisibility::DashVisible) ?: AppearanceVisibility.Hide\n    }\n\n    private fun createStartHeadAppearanceVisibilityLiveData(\n        selectedShapesLiveData: LiveData<Set<AbstractShape>>,\n        retainableActionTypeLiveData: LiveData<RetainableActionType>\n    ): LiveData<AppearanceVisibility> {\n        val selectedVisibilityLiveData = selectedShapesLiveData.map {\n            when {\n                it.isEmpty() -> null\n                it.size > 1 -> AppearanceVisibility.Hide\n                else -> {\n                    when (val shape = it.single()) {\n                        is Line -> shape.toStartHeadAppearanceVisibilityState()\n                        is Rectangle,\n                        is Text,\n                        is Group,\n                        is MockShape -> AppearanceVisibility.Hide\n                    }\n                }\n            }\n        }\n        val defaultVisibilityLiveData = retainableActionTypeLiveData.map {\n            val defaultState = when (it) {\n                RetainableActionType.ADD_LINE ->\n                    ShapeExtraManager.defaultLineExtra.userSelectedStartAnchor\n                RetainableActionType.ADD_RECTANGLE,\n                RetainableActionType.ADD_TEXT,\n                RetainableActionType.IDLE -> null\n            }\n            if (defaultState != null) {\n                val selectedStartHeaderPosition =\n                    ShapeExtraManager.getAllPredefinedAnchorChars().indexOf(defaultState)\n                AppearanceVisibility.GridVisible(\n                    ShapeExtraManager.defaultLineExtra.isStartAnchorEnabled,\n                    selectedStartHeaderPosition\n                )\n            } else {\n                AppearanceVisibility.Hide\n            }\n        }\n\n        return createAppearanceVisibilityLiveData(\n            selectedVisibilityLiveData,\n            defaultVisibilityLiveData\n        )\n    }\n\n    private fun createEndHeadAppearanceVisibilityLiveData(\n        selectedShapesLiveData: LiveData<Set<AbstractShape>>,\n        retainableActionTypeLiveData: LiveData<RetainableActionType>\n    ): LiveData<AppearanceVisibility> {\n        val selectedVisibilityLiveData = selectedShapesLiveData.map {\n            when {\n                it.isEmpty() -> null\n                it.size > 1 -> AppearanceVisibility.Hide\n                else -> {\n                    when (val shape = it.single()) {\n                        is Line -> shape.toEndHeadAppearanceVisibilityState()\n                        is Rectangle,\n                        is Text,\n                        is Group,\n                        is MockShape -> AppearanceVisibility.Hide\n                    }\n                }\n            }\n        }\n        val defaultVisibilityLiveData = retainableActionTypeLiveData.map {\n            val defaultState = when (it) {\n                RetainableActionType.ADD_LINE ->\n                    ShapeExtraManager.defaultLineExtra.userSelectedEndAnchor\n                RetainableActionType.ADD_RECTANGLE,\n                RetainableActionType.ADD_TEXT,\n                RetainableActionType.IDLE -> null\n            }\n            if (defaultState != null) {\n                val selectedFillPosition =\n                    ShapeExtraManager.getAllPredefinedAnchorChars().indexOf(defaultState)\n                AppearanceVisibility.GridVisible(\n                    ShapeExtraManager.defaultLineExtra.isEndAnchorEnabled,\n                    selectedFillPosition\n                )\n            } else {\n                AppearanceVisibility.Hide\n            }\n        }\n\n        return createAppearanceVisibilityLiveData(\n            selectedVisibilityLiveData,\n            defaultVisibilityLiveData\n        )\n    }\n\n    private fun createAppearanceVisibilityLiveData(\n        selectedShapeVisibilityLiveData: LiveData<AppearanceVisibility?>,\n        defaultVisibilityLiveData: LiveData<AppearanceVisibility>\n    ): LiveData<AppearanceVisibility> = combineLiveData(\n        selectedShapeVisibilityLiveData,\n        defaultVisibilityLiveData\n    ) { selected, default -> selected ?: default }\n\n    private fun RectangleExtra.toFillAppearanceVisibilityState(): AppearanceVisibility {\n        val selectedFillPosition =\n            ShapeExtraManager.getAllPredefinedRectangleFillStyles()\n                .indexOf(userSelectedFillStyle)\n        return AppearanceVisibility.GridVisible(isFillEnabled, selectedFillPosition)\n    }\n\n    private fun RectangleExtra.toBorderAppearanceVisibilityState(): AppearanceVisibility {\n        val selectedBorderPosition =\n            ShapeExtraManager.getAllPredefinedStrokeStyles().indexOf(userSelectedBorderStyle)\n        return AppearanceVisibility.GridVisible(isBorderEnabled, selectedBorderPosition)\n    }\n\n    private fun LineExtra.toStrokeVisibilityState(): AppearanceVisibility {\n        val selectedStrokePosition =\n            ShapeExtraManager.getAllPredefinedStrokeStyles().indexOf(userSelectedStrokeStyle)\n        return AppearanceVisibility.GridVisible(isStrokeEnabled, selectedStrokePosition)\n    }\n\n    private fun Line.toStartHeadAppearanceVisibilityState(): AppearanceVisibility {\n        val selectedStartHeadPosition =\n            ShapeExtraManager.getAllPredefinedAnchorChars().indexOf(extra.userSelectedStartAnchor)\n        return AppearanceVisibility.GridVisible(\n            extra.isStartAnchorEnabled,\n            selectedStartHeadPosition\n        )\n    }\n\n    private fun Line.toEndHeadAppearanceVisibilityState(): AppearanceVisibility {\n        val selectedEndHeadPosition =\n            ShapeExtraManager.getAllPredefinedAnchorChars().indexOf(extra.userSelectedEndAnchor)\n        return AppearanceVisibility.GridVisible(extra.isEndAnchorEnabled, selectedEndHeadPosition)\n    }\n}\n\ninternal data class AppearanceOptionItem(val id: String, val name: String)\n\ninternal sealed class AppearanceVisibility {\n    object Hide : AppearanceVisibility()\n\n    data class GridVisible(\n        val isChecked: Boolean,\n        val selectedPosition: Int\n    ) : AppearanceVisibility()\n\n    data class DashVisible(\n        val dashPattern: StraightStrokeDashPattern\n    ) : AppearanceVisibility()\n}\n","@file:Suppress(\"FunctionName\", \"ktlint:filename\")\n\npackage mono.html.toolbar.view.shapetool\n\nimport mono.actionmanager.OneTimeActionType\nimport mono.common.nullToFalse\nimport mono.html.Div\nimport mono.html.Input\nimport mono.html.InputType\nimport mono.html.Span\nimport mono.html.setAttributes\nimport mono.html.setOnChangeListener\nimport mono.html.setOnClickListener\nimport mono.html.toolbar.view.shapetool.AppearanceVisibility.DashVisible\nimport mono.html.toolbar.view.shapetool.AppearanceVisibility.GridVisible\nimport mono.lifecycle.LifecycleOwner\nimport mono.livedata.LiveData\nimport mono.livedata.filterNotNull\nimport mono.livedata.map\nimport org.w3c.dom.Element\n\ninternal class AppearanceSectionViewController(\n    private val lifecycleOwner: LifecycleOwner,\n    container: Element,\n    private val appearanceDataController: AppearanceDataController\n) {\n    val visibilityStateLiveData: LiveData<Boolean> =\n        appearanceDataController.hasAnyVisibleToolLiveData\n\n    init {\n        val rootView = container.Section(\"APPEARANCE\") {\n            Tool(\n                ToolType.FILL,\n                appearanceDataController.fillOptions,\n                appearanceDataController.fillToolStateLiveData\n            )\n\n            Tool(\n                ToolType.BORDER,\n                appearanceDataController.strokeOptions,\n                appearanceDataController.borderToolStateLiveData\n            ) {\n                DashPattern(\n                    appearanceDataController.borderDashPatternLiveData.map { (it as? DashVisible) }\n                ) { dash, gap, offset ->\n                    appearanceDataController.setOneTimeAction(\n                        OneTimeActionType.ChangeShapeBorderDashPatternExtra(dash, gap, offset)\n                    )\n                }\n            }\n\n            Tool(\n                ToolType.STROKE,\n                appearanceDataController.strokeOptions,\n                appearanceDataController.lineStrokeToolStateLiveData\n            ) {\n                DashPattern(\n                    appearanceDataController.lineStrokeDashPatternLiveData\n                        .map { it as? DashVisible }\n                ) { dash, gap, offset ->\n                    appearanceDataController.setOneTimeAction(\n                        OneTimeActionType.ChangeLineStrokeDashPatternExtra(dash, gap, offset)\n                    )\n                }\n            }\n\n            Tool(\n                ToolType.START_HEAD,\n                appearanceDataController.headOptions,\n                appearanceDataController.lineStartHeadToolStateLiveData\n            )\n\n            Tool(\n                ToolType.END_HEAD,\n                appearanceDataController.headOptions,\n                appearanceDataController.lineEndHeadToolStateLiveData\n            )\n        }\n\n        appearanceDataController.hasAnyVisibleToolLiveData.observe(lifecycleOwner) {\n            rootView.bindClass(CssClass.HIDE, !it)\n        }\n    }\n\n    private fun Element.Tool(\n        type: ToolType,\n        options: List<AppearanceOptionItem>,\n        liveData: LiveData<AppearanceVisibility>,\n        block: Element.() -> Unit = {}\n    ) {\n        val gridVisibleLiveData = liveData.map { it as? GridVisible }\n        CheckableTool(type, gridVisibleLiveData) {\n            Options(type, options, gridVisibleLiveData)\n            block()\n        }\n    }\n\n    private fun Element.CheckableTool(\n        type: ToolType,\n        liveData: LiveData<GridVisible?>,\n        block: Element.() -> Unit\n    ) {\n        Div(\"tool-appearance\") {\n            Div(\"checkbox-column\") {\n                ToolCheckBox(type, liveData.map { it?.isChecked.nullToFalse() })\n            }\n\n            Div(\"tool-column\") {\n                Span(classes = \"tool-title\", type.title)\n\n                block()\n            }\n\n            liveData.observe(lifecycleOwner) {\n                bindClass(CssClass.HIDE, it == null)\n            }\n        }\n    }\n\n    private fun Element.ToolCheckBox(\n        type: ToolType,\n        isCheckedLiveData: LiveData<Boolean>\n    ) {\n        Input(InputType.CHECK_BOX, classes = \"\") {\n            setOnChangeListener {\n                appearanceDataController.setOneTimeAction(type.toActionType(checked))\n            }\n\n            isCheckedLiveData.observe(lifecycleOwner) { isChecked -> this.checked = isChecked }\n        }\n    }\n\n    private fun Element.Options(\n        type: ToolType,\n        options: List<AppearanceOptionItem>,\n        visibilityLiveData: LiveData<GridVisible?>\n    ) {\n        Div(classes = \"option-group monofont\") {\n            val optionViews = options.map { option ->\n                Span(classes = \"option\", option.name) {\n                    setOnClickListener {\n                        appearanceDataController.setOneTimeAction(\n                            type.toActionType(selectedId = option.id)\n                        )\n                    }\n                }\n            }\n\n            visibilityLiveData.filterNotNull().observe(lifecycleOwner) { state ->\n                bindClass(CssClass.DISABLED, !state.isChecked)\n\n                optionViews.forEachIndexed { index, optionView ->\n                    optionView.bindClass(CssClass.SELECTED, index == state.selectedPosition)\n                }\n            }\n        }\n    }\n\n    private fun Element.DashPattern(\n        liveData: LiveData<DashVisible?>,\n        onChange: (Int?, Int?, Int?) -> Unit\n    ) {\n        Div(\"dash-pattern\") {\n            Div(\"pattern\") {\n                Span(text = \"Dash\")\n                DashPatternInput(\n                    minValue = 1,\n                    liveData.map { it?.dashPattern?.dash }\n                ) { onChange(it, null, null) }\n            }\n            Div(\"pattern\") {\n                Span(text = \"Gap\")\n                DashPatternInput(\n                    minValue = 0,\n                    liveData.map { it?.dashPattern?.gap }\n                ) { onChange(null, it, null) }\n            }\n            Div(\"pattern\") {\n                Span(text = \"Shift\")\n                DashPatternInput(\n                    minValue = null,\n                    liveData.map { it?.dashPattern?.offset }\n                ) { onChange(null, null, it) }\n            }\n        }\n    }\n\n    private fun Element.DashPatternInput(\n        minValue: Int?,\n        liveData: LiveData<Int?>,\n        onChange: (Int) -> Unit\n    ) {\n        Input(InputType.NUMBER, \"tool-input-text\") {\n            if (minValue != null) {\n                setAttributes(\"min\" to minValue)\n            }\n            setOnChangeListener { onChange(value.toInt()) }\n\n            liveData.filterNotNull().observe(lifecycleOwner) {\n                value = it.toString()\n            }\n        }\n    }\n}\n\nprivate enum class ToolType(val title: String) {\n    FILL(\"Fill\") {\n        override fun toActionType(isChecked: Boolean?, selectedId: String?): OneTimeActionType =\n            OneTimeActionType.ChangeShapeFillExtra(isChecked, selectedId)\n    },\n    BORDER(\"Border\") {\n        override fun toActionType(isChecked: Boolean?, selectedId: String?): OneTimeActionType =\n            OneTimeActionType.ChangeShapeBorderExtra(isChecked, selectedId)\n    },\n    STROKE(\"Stroke\") {\n        override fun toActionType(isChecked: Boolean?, selectedId: String?): OneTimeActionType =\n            OneTimeActionType.ChangeLineStrokeExtra(isChecked, selectedId)\n    },\n    START_HEAD(\"Start head\") {\n        override fun toActionType(isChecked: Boolean?, selectedId: String?): OneTimeActionType =\n            OneTimeActionType.ChangeLineStartAnchorExtra(isChecked, selectedId)\n    },\n    END_HEAD(\"End head\") {\n        override fun toActionType(isChecked: Boolean?, selectedId: String?): OneTimeActionType =\n            OneTimeActionType.ChangeLineEndAnchorExtra(isChecked, selectedId)\n    };\n\n    abstract fun toActionType(\n        isChecked: Boolean? = null,\n        selectedId: String? = null\n    ): OneTimeActionType\n}\n","package mono.html.toolbar.view.shapetool\n\nimport kotlinx.dom.hasClass\nimport mono.html.bindClass\nimport org.w3c.dom.Element\nimport org.w3c.dom.HTMLElement\n\ninternal enum class CssClass(val value: String) {\n    DISABLED(\"disabled\"),\n    HIDE(\"hide\"),\n    SELECTED(\"selected\")\n}\n\ninternal fun HTMLElement.hasClass(cls: CssClass) = hasClass(cls.value)\n\ninternal fun Element.bindClass(cssClass: CssClass, isApplicable: Boolean) =\n    bindClass(cssClass.value, isApplicable)\n","@file:Suppress(\"FunctionName\", \"ktlint:filename\")\n\npackage mono.html.toolbar.view.shapetool\n\nimport mono.actionmanager.OneTimeActionType\nimport mono.html.Div\nimport mono.html.SvgPath\nimport mono.html.appendElement\nimport mono.html.modal.TooltipPosition\nimport mono.html.modal.tooltip\nimport mono.html.setOnClickListener\nimport mono.html.toolbar.view.SvgIcon\nimport mono.lifecycle.LifecycleOwner\nimport mono.livedata.LiveData\nimport mono.livedata.distinctUntilChange\nimport mono.livedata.map\nimport mono.shape.command.ChangeOrder\nimport mono.shape.shape.AbstractShape\nimport org.w3c.dom.Element\nimport org.w3c.dom.HTMLDivElement\nimport org.w3c.dom.HTMLElement\n\n/**\n * View controller for shape tool's reorder section.\n */\ninternal class ReorderSectionViewController(\n    lifecycleOwner: LifecycleOwner,\n    container: Element,\n    singleShapeLiveData: LiveData<AbstractShape?>,\n    setOneTimeAction: (OneTimeActionType) -> Unit\n) {\n\n    val visibilityStateLiveData: LiveData<Boolean>\n\n    init {\n        val icons = ReorderIconType.values().map { type ->\n            Icon(type) { setOneTimeAction(OneTimeActionType.ReorderShape(it.changeOrderType)) }\n        }\n\n        val section = container.Section(hasBorderTop = false) {\n            Div(\"tool-reorder\") {\n                appendElement(icons)\n            }\n        }\n\n        visibilityStateLiveData = singleShapeLiveData\n            .map { it != null }\n            .distinctUntilChange()\n\n        visibilityStateLiveData.observe(lifecycleOwner) {\n            section.bindClass(CssClass.HIDE, !it)\n            for (icon in icons) {\n                icon.bindClass(CssClass.DISABLED, !it)\n            }\n        }\n    }\n}\n\nprivate fun Icon(\n    iconType: ReorderIconType,\n    onClick: (ReorderIconType) -> Unit\n): HTMLDivElement =\n    Div(classes = \"icon\") {\n        tooltip(iconType.title, TooltipPosition.TOP)\n\n        SvgIcon(18) {\n            SvgPath(iconType.iconPath)\n        }\n\n        setOnClickListener {\n            val target = it.currentTarget as HTMLElement\n            if (!target.hasClass(CssClass.DISABLED)) {\n                onClick(iconType)\n            }\n        }\n    }\n\nprivate enum class ReorderIconType(\n    val changeOrderType: ChangeOrder.ChangeOrderType,\n    val title: String,\n    val iconPath: String\n) {\n    FRONT(\n        ChangeOrder.ChangeOrderType.FRONT,\n        \"Bring to Front\",\n        \"M18,18h-9V15h-6V9h-3V0h9V3h6V9h3v9h0Zm-4-4V4H4V14h10Z\"\n    ),\n    UPWARD(\n        ChangeOrder.ChangeOrderType.FORWARD,\n        \"Bring Forward\",\n        \"M18,18h-12v-5h-6v-13h13v6h5v12h0Zm-17-6h11v-11h-11Z\"\n    ),\n    BACKWARD(\n        ChangeOrder.ChangeOrderType.BACKWARD,\n        \"Send Backward\",\n        \"M6,18V13h-6V0h13V6h5V18Zm-5-6h5V6h6V1H1Z\"\n    ),\n    BACK(\n        ChangeOrder.ChangeOrderType.BACK,\n        \"Send to Back\",\n        \"M9,18V15h-6V9h-3V0h9V3h6V9h3v9Zm-5-4h5V9h-5Zm10-5V4h-5V9Z\"\n    )\n}\n","package mono.html.toolbar.view.shapetool\n\nimport kotlinx.dom.addClass\nimport mono.actionmanager.ActionManager\nimport mono.actionmanager.RetainableActionType\nimport mono.html.A\nimport mono.html.Div\nimport mono.html.Span\nimport mono.html.SvgPath\nimport mono.html.style\nimport mono.html.toolbar.view.SvgIcon\nimport mono.html.toolbar.view.shapetool.TextSectionViewController.TextAlignVisibility\nimport mono.lifecycle.LifecycleOwner\nimport mono.livedata.LiveData\nimport mono.livedata.combineLiveData\nimport mono.livedata.map\nimport mono.shape.ShapeExtraManager\nimport mono.shape.shape.AbstractShape\nimport mono.shape.shape.Text\nimport org.w3c.dom.HTMLDivElement\nimport org.w3c.dom.HTMLElement\n\nclass ShapeToolViewController(\n    lifecycleOwner: LifecycleOwner,\n    container: HTMLElement,\n    actionManager: ActionManager,\n    selectedShapesLiveData: LiveData<Set<AbstractShape>>,\n    shapeManagerVersionLiveData: LiveData<Int>,\n    shapeToolVisibilityLiveData: LiveData<Boolean>\n) {\n    private val singleShapeLiveData: LiveData<AbstractShape?> = combineLiveData(\n        selectedShapesLiveData,\n        shapeManagerVersionLiveData\n    ) { selected, _ -> selected.singleOrNull() }\n\n    private val shapesLiveData: LiveData<Set<AbstractShape>> = combineLiveData(\n        selectedShapesLiveData,\n        shapeManagerVersionLiveData\n    ) { selected, _ -> selected }\n\n    private val retainableActionLiveData: LiveData<RetainableActionType> = combineLiveData(\n        actionManager.retainableActionLiveData,\n        ShapeExtraManager.defaultExtraStateUpdateLiveData\n    ) { action, _ -> action }\n\n    private val appearanceDataController = AppearanceDataController(\n        selectedShapesLiveData,\n        shapeManagerVersionLiveData,\n        actionManager\n    )\n\n    init {\n        val toolContainer = container.Div(classes = \"shape-tools__body\")\n\n        val reorderSectionViewController = ReorderSectionViewController(\n            lifecycleOwner,\n            toolContainer,\n            singleShapeLiveData,\n            actionManager::setOneTimeAction\n        )\n\n        val transformToolViewController = TransformToolViewController(\n            lifecycleOwner,\n            toolContainer,\n            singleShapeLiveData,\n            actionManager::setOneTimeAction\n        )\n\n        val appearanceSectionViewController = AppearanceSectionViewController(\n            lifecycleOwner,\n            toolContainer,\n            appearanceDataController\n        )\n\n        val textSectionViewController = TextSectionViewController(\n            lifecycleOwner,\n            toolContainer,\n            createTextAlignLiveData(shapesLiveData, retainableActionLiveData),\n            actionManager::setOneTimeAction\n        )\n\n        val hasAnyVisibleToolLiveData = combineLiveData(\n            reorderSectionViewController.visibilityStateLiveData,\n            transformToolViewController.visibilityStateLiveData,\n            appearanceSectionViewController.visibilityStateLiveData,\n            textSectionViewController.visibilityStateLiveData\n        ) { visibilities ->\n            visibilities.any { it == true }\n        }\n        addToolIndicatorView(\n            lifecycleOwner,\n            toolContainer,\n            hasAnyVisibleToolLiveData\n        )\n\n        addFooterView(container)\n\n        shapeToolVisibilityLiveData.observe(lifecycleOwner) {\n            container.bindClass(CssClass.HIDE, !it)\n        }\n    }\n\n    private fun addToolIndicatorView(\n        lifecycleOwner: LifecycleOwner,\n        toolContainer: HTMLDivElement,\n        hasAnyVisibleToolLiveData: LiveData<Boolean>\n    ) {\n        val toolIndicatorView = toolContainer.Section(hasBorderTop = false) {\n            Div {\n                Span(\n                    classes = \"indicator-text\",\n                    text = \"Select a shape for updating its properties here\"\n                )\n            }\n        }\n\n        toolIndicatorView.addClass(\"tool-indicator\")\n        hasAnyVisibleToolLiveData.observe(lifecycleOwner) {\n            toolIndicatorView.bindClass(CssClass.HIDE, it)\n        }\n    }\n\n    private fun addFooterView(container: HTMLElement) {\n        container.Div(classes = \"shape-tools__footer\") {\n            A(href = \"https://github.com/tuanchauict/MonoSketch\") {\n                target = \"_blank\"\n\n                SvgIcon(16, 16, 32, 32) {\n                    /* ktlint-disable max-line-length */\n                    SvgPath(\n                        \"M16.288 0a16.291 16.291 0 0 0-5.148 31.747c.815.149 1.112-.353 1.112-.785 0-.387-.014-1.411-.022-2.771-4.531.985-5.487-2.183-5.487-2.183a4.315 4.315 0 0 0-1.809-2.383c-1.479-1.011.112-.99.112-.99a3.42 3.42 0 0 1 2.495 1.678 3.468 3.468 0 0 0 4.741 1.354 3.482 3.482 0 0 1 1.034-2.178c-3.617-.411-7.42-1.808-7.42-8.051a6.3 6.3 0 0 1 1.677-4.371 5.852 5.852 0 0 1 .16-4.311s1.367-.438 4.479 1.67a15.448 15.448 0 0 1 8.156 0c3.11-2.108 4.475-1.67 4.475-1.67a5.854 5.854 0 0 1 .163 4.311 6.286 6.286 0 0 1 1.674 4.371c0 6.258-3.809 7.635-7.438 8.038a3.889 3.889 0 0 1 1.106 3.017c0 2.178-.02 3.935-.02 4.469 0 .435.294.942 1.12.783A16.292 16.292 0 0 0 16.288 0z\"\n                    )\n                    /* ktlint-enable max-line-length */\n                }\n                Span(text = \"GitHub\") {\n                    style(\"margin-left\" to \"6px\")\n                }\n            }\n        }\n    }\n\n    private fun createTextAlignLiveData(\n        selectedShapesLiveData: LiveData<Set<AbstractShape>>,\n        retainableActionTypeLiveData: LiveData<RetainableActionType>\n    ): LiveData<TextAlignVisibility> {\n        val selectedTextAlignLiveData = selectedShapesLiveData.map {\n            when {\n                it.isEmpty() -> null\n                it.size > 1 -> TextAlignVisibility.Hide\n                else -> {\n                    val text = it.single() as? Text\n                    val editableText = text?.takeIf(Text::isTextEditable)\n                    editableText?.extra?.textAlign?.let(TextAlignVisibility::Visible)\n                }\n            }\n        }\n        val defaultTextAlignLiveData = retainableActionTypeLiveData.map {\n            if (it == RetainableActionType.ADD_TEXT) {\n                TextAlignVisibility.Visible(ShapeExtraManager.defaultTextAlign)\n            } else {\n                TextAlignVisibility.Hide\n            }\n        }\n        return combineLiveData(\n            selectedTextAlignLiveData,\n            defaultTextAlignLiveData\n        ) { selected, default -> selected ?: default }\n    }\n}\n","@file:Suppress(\"FunctionName\", \"ktlint:filename\")\n\npackage mono.html.toolbar.view.shapetool\n\nimport mono.actionmanager.OneTimeActionType\nimport mono.html.Div\nimport mono.html.Span\nimport mono.html.SvgPath\nimport mono.html.appendElement\nimport mono.html.setOnClickListener\nimport mono.html.toolbar.view.SvgIcon\nimport mono.lifecycle.LifecycleOwner\nimport mono.livedata.LiveData\nimport mono.livedata.distinctUntilChange\nimport mono.livedata.map\nimport mono.shape.extra.style.TextAlign\nimport org.w3c.dom.Element\nimport org.w3c.dom.HTMLElement\n\ninternal class TextSectionViewController(\n    lifecycleOwner: LifecycleOwner,\n    container: Element,\n    liveData: LiveData<TextAlignVisibility>,\n    setOneTimeAction: (OneTimeActionType) -> Unit\n) {\n    private val horizontalIcons = listOf(\n        TextAlignmentIconType.HORIZONTAL_LEFT,\n        TextAlignmentIconType.HORIZONTAL_MIDDLE,\n        TextAlignmentIconType.HORIZONTAL_RIGHT\n    ).map { Icon(it, setOneTimeAction) }\n\n    private val verticalIcons = listOf(\n        TextAlignmentIconType.VERTICAL_TOP,\n        TextAlignmentIconType.VERTICAL_MIDDLE,\n        TextAlignmentIconType.VERTICAL_BOTTOM\n    ).map { Icon(it, setOneTimeAction) }\n\n    private val rootView = container.Section(\"TEXT\") {\n        Div(\"tool-text\") {\n            Div(\"option-group\") {\n                Span(\"tool-title\", text = \"Alignment\")\n                appendElement(horizontalIcons)\n            }\n            Div(\"option-group\") {\n                Span(\"tool-title\", \"Position\")\n                appendElement(verticalIcons)\n            }\n        }\n    }\n\n    val visibilityStateLiveData: LiveData<Boolean>\n\n    init {\n        val textAlignLiveData = liveData\n            .map { (it as? TextAlignVisibility.Visible)?.textAlign }\n            .distinctUntilChange()\n        visibilityStateLiveData = textAlignLiveData\n            .map { it != null }\n            .distinctUntilChange()\n\n        textAlignLiveData.observe(lifecycleOwner, listener = ::setCurrentTextAlign)\n    }\n\n    private fun setCurrentTextAlign(textAlign: TextAlign?) {\n        rootView.bindClass(CssClass.HIDE, textAlign == null)\n\n        if (textAlign == null) {\n            return\n        }\n        horizontalIcons.forEachIndexed { index, icon ->\n            icon.bindClass(CssClass.SELECTED, index == textAlign.horizontalAlign.ordinal)\n        }\n        verticalIcons.forEachIndexed { index, icon ->\n            icon.bindClass(CssClass.SELECTED, index == textAlign.verticalAlign.ordinal)\n        }\n    }\n\n    sealed class TextAlignVisibility {\n        object Hide : TextAlignVisibility()\n\n        data class Visible(val textAlign: TextAlign) : TextAlignVisibility()\n    }\n}\n\nprivate fun Icon(\n    iconType: TextAlignmentIconType,\n    setOneTimeAction: (OneTimeActionType) -> Unit\n): HTMLElement = Span(null, classes = \"option\") {\n    SvgIcon(16, 16, iconType.viewPortSize, iconType.viewPortSize) {\n        SvgPath(iconType.iconPath)\n    }\n\n    setOnClickListener {\n        setOneTimeAction(iconType.toTextAlignment())\n    }\n}\n\n/* ktlint-disable max-line-length */\nprivate enum class TextAlignmentIconType(\n    val iconPath: String,\n    val viewPortSize: Int = 16,\n    val horizontalAlign: TextAlign.HorizontalAlign? = null,\n    val verticalAlign: TextAlign.VerticalAlign? = null\n) {\n    HORIZONTAL_LEFT(\n        \"M2 12.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm0-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5zm0-3a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm0-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5z\",\n        horizontalAlign = TextAlign.HorizontalAlign.LEFT\n    ),\n    HORIZONTAL_MIDDLE(\n        \"M4 12.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5zm2-3a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5z\",\n        horizontalAlign = TextAlign.HorizontalAlign.MIDDLE\n    ),\n    HORIZONTAL_RIGHT(\n        \"M6 12.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm-4-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5zm4-3a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm-4-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5z\",\n        horizontalAlign = TextAlign.HorizontalAlign.RIGHT\n    ),\n    VERTICAL_TOP(\n        \"M8 11h3v10h2V11h3l-4-4-4 4zM4 3v2h16V3H4z\",\n        viewPortSize = 24,\n        verticalAlign = TextAlign.VerticalAlign.TOP\n    ),\n    VERTICAL_MIDDLE(\n        \"M8 19h3v4h2v-4h3l-4-4-4 4zm8-14h-3V1h-2v4H8l4 4 4-4zM4 11v2h16v-2H4z\",\n        viewPortSize = 24,\n        verticalAlign = TextAlign.VerticalAlign.MIDDLE\n    ),\n    VERTICAL_BOTTOM(\n        \"M16 13h-3V3h-2v10H8l4 4 4-4zM4 19v2h16v-2H4z\",\n        viewPortSize = 24,\n        verticalAlign = TextAlign.VerticalAlign.BOTTOM\n    );\n\n    fun toTextAlignment(): OneTimeActionType.TextAlignment =\n        OneTimeActionType.TextAlignment(horizontalAlign, verticalAlign)\n}\n/* ktlint-enable max-line-length */\n","@file:Suppress(\"FunctionName\")\n\npackage mono.html.toolbar.view.shapetool\n\nimport mono.html.Div\nimport mono.html.Span\nimport mono.html.bindClass\nimport org.w3c.dom.Element\nimport org.w3c.dom.HTMLDivElement\n\ninternal fun Element.Section(\n    title: String = \"\",\n    hasBorderTop: Boolean = true,\n    block: HTMLDivElement.() -> Unit\n): HTMLDivElement = Div(\"section\") {\n    bindClass(\"notitle\", title.isEmpty())\n    bindClass(\"border-top\", hasBorderTop)\n    if (title.isNotEmpty()) {\n        Div(\"section-title\") {\n            Span(text = title)\n        }\n    }\n\n    Div(\"section-body\") {\n        block()\n    }\n}\n","@file:Suppress(\"FunctionName\", \"ktlint:filename\")\n\npackage mono.html.toolbar.view.shapetool\n\nimport mono.actionmanager.OneTimeActionType\nimport mono.graphics.geo.Rect\nimport mono.html.Div\nimport mono.html.Input\nimport mono.html.InputType\nimport mono.html.Span\nimport mono.html.appendElement\nimport mono.html.setAttributes\nimport mono.html.setOnChangeListener\nimport mono.lifecycle.LifecycleOwner\nimport mono.livedata.LiveData\nimport mono.livedata.map\nimport mono.shape.shape.AbstractShape\nimport mono.shape.shape.Rectangle\nimport mono.shape.shape.Text\nimport org.w3c.dom.Element\nimport org.w3c.dom.HTMLInputElement\n\ninternal class TransformToolViewController(\n    lifecycleOwner: LifecycleOwner,\n    container: Element,\n    singleShapeLiveData: LiveData<AbstractShape?>,\n    setOneTimeAction: (OneTimeActionType) -> Unit\n) {\n    private val xInput = NumberCellInput(0) {\n        setOneTimeAction(OneTimeActionType.ChangeShapeBound(newLeft = it))\n    }\n    private val yInput = NumberCellInput(0) {\n        setOneTimeAction(OneTimeActionType.ChangeShapeBound(newTop = it))\n    }\n    private val wInput = NumberCellInput(10, 1) {\n        setOneTimeAction(OneTimeActionType.ChangeShapeBound(newWidth = it))\n    }\n    private val hInput = NumberCellInput(10, 1) {\n        setOneTimeAction(OneTimeActionType.ChangeShapeBound(newHeight = it))\n    }\n\n    val visibilityStateLiveData: LiveData<Boolean>\n\n    init {\n        val section = container.Section(\"TRANSFORM\") {\n            Div(\"transform-grid\") {\n                NumberCell(\"X\", xInput)\n                NumberCell(\"W\", wInput)\n                NumberCell(\"Y\", yInput)\n                NumberCell(\"H\", hInput)\n            }\n        }\n\n        visibilityStateLiveData = singleShapeLiveData.map { it != null }\n\n        singleShapeLiveData.observe(lifecycleOwner) {\n            val isSizeChangeable = it is Rectangle || it is Text\n            section.bindClass(CssClass.HIDE, it == null)\n\n            setEnabled(it != null, isSizeChangeable)\n            if (it != null) {\n                setValue(it.bound)\n            }\n        }\n    }\n\n    private fun setValue(bound: Rect) {\n        xInput.value = bound.left.toString()\n        yInput.value = bound.top.toString()\n        wInput.value = bound.width.toString()\n        hInput.value = bound.height.toString()\n    }\n\n    private fun setEnabled(isPositionEnabled: Boolean, isSizeEnabled: Boolean) {\n        xInput.disabled = !isPositionEnabled\n        yInput.disabled = !isPositionEnabled\n        wInput.disabled = !isSizeEnabled\n        hInput.disabled = !isSizeEnabled\n    }\n}\n\nprivate fun Element.NumberCell(\n    title: String,\n    inputElement: Element\n) {\n    Div(\"cell\") {\n        Span(\"tool-title\", text = title)\n        appendElement(inputElement)\n    }\n}\n\nprivate fun NumberCellInput(\n    value: Int,\n    minValue: Int? = null,\n    onValueChange: (Int) -> Unit\n): HTMLInputElement = Input(null, InputType.NUMBER, classes = \"tool-input-text\") {\n    if (minValue != null) {\n        setAttributes(\"min\" to minValue)\n    }\n    this.value = value.toString()\n\n    setOnChangeListener {\n        onValueChange(this.value.toInt())\n    }\n}\n",null,"package mono.keycommand\n\nimport mono.common.Key\n\n/**\n * An enum class to contains all shortcut key command.\n */\nenum class KeyCommand(\n    vararg val keyCodes: Int,\n    private val commandKeyState: MetaKeyState = MetaKeyState.ANY,\n    private val shiftKeyState: MetaKeyState = MetaKeyState.ANY,\n    val isKeyEventPropagationAllowed: Boolean = true,\n    val isRepeatable: Boolean = false\n) {\n    IDLE,\n\n    SELECT_ALL(Key.KEY_A, commandKeyState = MetaKeyState.ON, isKeyEventPropagationAllowed = false),\n    DESELECTION(Key.KEY_ESC),\n    DELETE(Key.KEY_BACKSPACE, Key.KEY_DELETE),\n\n    MOVE_LEFT(Key.KEY_ARROW_LEFT, shiftKeyState = MetaKeyState.OFF, isRepeatable = true),\n    MOVE_UP(Key.KEY_ARROW_UP, shiftKeyState = MetaKeyState.OFF, isRepeatable = true),\n    MOVE_RIGHT(Key.KEY_ARROW_RIGHT, shiftKeyState = MetaKeyState.OFF, isRepeatable = true),\n    MOVE_DOWN(Key.KEY_ARROW_DOWN, shiftKeyState = MetaKeyState.OFF, isRepeatable = true),\n\n    FAST_MOVE_LEFT(Key.KEY_ARROW_LEFT, shiftKeyState = MetaKeyState.ON, isRepeatable = true),\n    FAST_MOVE_UP(Key.KEY_ARROW_UP, shiftKeyState = MetaKeyState.ON, isRepeatable = true),\n    FAST_MOVE_RIGHT(Key.KEY_ARROW_RIGHT, shiftKeyState = MetaKeyState.ON, isRepeatable = true),\n    FAST_MOVE_DOWN(Key.KEY_ARROW_DOWN, shiftKeyState = MetaKeyState.ON, isRepeatable = true),\n\n    ADD_RECTANGLE(Key.KEY_R),\n    ADD_TEXT(Key.KEY_T),\n    ADD_LINE(Key.KEY_L),\n\n    ENTER_EDIT_MODE(Key.KEY_ENTER),\n    SELECTION_MODE(Key.KEY_V, commandKeyState = MetaKeyState.OFF),\n\n    COPY(Key.KEY_C, commandKeyState = MetaKeyState.ON, shiftKeyState = MetaKeyState.OFF),\n    CUT(Key.KEY_X, commandKeyState = MetaKeyState.ON),\n    DUPLICATE(Key.KEY_D, commandKeyState = MetaKeyState.ON, isKeyEventPropagationAllowed = false),\n\n    COPY_TEXT(\n        Key.KEY_C,\n        commandKeyState = MetaKeyState.ON,\n        shiftKeyState = MetaKeyState.ON,\n        isKeyEventPropagationAllowed = false\n    ),\n\n    UNDO(Key.KEY_Z, commandKeyState = MetaKeyState.ON, shiftKeyState = MetaKeyState.OFF),\n    REDO(Key.KEY_Z, commandKeyState = MetaKeyState.ON, shiftKeyState = MetaKeyState.ON),\n\n    SHIFT_KEY(Key.KEY_SHIFT)\n    ;\n\n    private enum class MetaKeyState {\n        ON {\n            override fun isAccepted(hasKey: Boolean): Boolean = hasKey\n        },\n        OFF {\n            override fun isAccepted(hasKey: Boolean): Boolean = !hasKey\n        },\n        ANY {\n            override fun isAccepted(hasKey: Boolean): Boolean = true\n        };\n\n        abstract fun isAccepted(hasKey: Boolean): Boolean\n    }\n\n    companion object {\n        private val KEYCODE_TO_COMMAND_MAP: Map<Int, List<KeyCommand>> =\n            values().fold(mutableMapOf<Int, MutableList<KeyCommand>>()) { map, type ->\n                for (keyCode in type.keyCodes) {\n                    map.getOrPut(keyCode) { mutableListOf() }.add(type)\n                }\n                map\n            }\n\n        internal fun getCommandByKey(\n            keyCode: Int,\n            hasCommandKey: Boolean,\n            hasShiftKey: Boolean\n        ): KeyCommand =\n            KEYCODE_TO_COMMAND_MAP[keyCode]\n                ?.firstOrNull {\n                    it.commandKeyState.isAccepted(hasCommandKey) &&\n                        it.shiftKeyState.isAccepted(hasShiftKey)\n                }\n                ?: IDLE\n    }\n}\n",null,"package mono.keycommand\n\nimport mono.common.commandKey\nimport mono.environment.Build\nimport mono.livedata.LiveData\nimport mono.livedata.MutableLiveData\nimport org.w3c.dom.HTMLElement\nimport org.w3c.dom.events.KeyboardEvent\n\n/**\n * A controller class to identify command by keyboard.\n */\nclass KeyCommandController(private val body: HTMLElement) {\n    private val keyCommandMutableLiveData: MutableLiveData<KeyCommand> =\n        MutableLiveData(KeyCommand.IDLE)\n    val keyCommandLiveData: LiveData<KeyCommand> = keyCommandMutableLiveData\n\n    init {\n        body.onkeydown = ::updateCommand\n        body.onkeyup = { resetKeyCommand() }\n    }\n\n    private fun updateCommand(event: KeyboardEvent) {\n        val keyCommand = if (event.target == body) {\n            KeyCommand.getCommandByKey(event.keyCode, event.commandKey, event.shiftKey)\n        } else {\n            KeyCommand.IDLE\n        }\n\n        if (!keyCommand.isKeyEventPropagationAllowed) {\n            event.stopPropagation()\n            event.preventDefault()\n        }\n        keyCommandMutableLiveData.value = keyCommand\n        if (Build.DEBUG) {\n            println(\"Key press ${event.code} : ${event.keyCode} cmd ${event.commandKey}\")\n        }\n        if (keyCommand.isRepeatable) {\n            keyCommandMutableLiveData.value = KeyCommand.IDLE\n        }\n    }\n\n    private fun resetKeyCommand() {\n        keyCommandMutableLiveData.value = KeyCommand.IDLE\n    }\n}\n","package mono.lifecycle\n\n/**\n * An abstract class that has lifecycle from start (with [onStart]) to stop (with [onStop]).\n * The other classes can use this to self-aware lifecycle via [addObserver] method.\n */\nabstract class LifecycleOwner {\n    private val lifecycleObservers: MutableList<LifecycleObserver> = mutableListOf()\n    private var state: State = State.INITIAL\n\n    val isStopped: Boolean\n        get() = state == State.STOPPED\n\n    fun addObserver(lifecycleObserver: LifecycleObserver) {\n        if (state == State.STOPPED) {\n            return\n        }\n        lifecycleObservers.add(lifecycleObserver)\n        if (state == State.STARTED) {\n            lifecycleObserver.onStart()\n        }\n    }\n\n    fun onStart() {\n        state = State.STARTED\n        for (observer in lifecycleObservers) {\n            observer.onStart()\n        }\n        onStartInternal()\n    }\n\n    protected open fun onStartInternal() = Unit\n\n    fun onStop() {\n        state = State.STOPPED\n        onStopInternal()\n\n        for (observer in lifecycleObservers) {\n            observer.onStop()\n        }\n        lifecycleObservers.clear()\n    }\n\n    protected open fun onStopInternal() = Unit\n\n    fun hasObserver(lifecycleObserver: LifecycleObserver): Boolean =\n        lifecycleObserver in lifecycleObservers\n\n    fun getObserverCount(): Int = lifecycleObservers.size\n\n    private enum class State {\n        INITIAL, STARTED, STOPPED\n    }\n}\n","package mono.lifecycle\n\ninterface LifecycleObserver {\n    fun onStart() = Unit\n\n    fun onStop() = Unit\n}\n","package mono.livedata\n\n@Suppress(\"UNCHECKED_CAST\")\nfun <T1, T2, R> combineLiveData(\n    liveData1: LiveData<T1>,\n    liveData2: LiveData<T2>,\n    conversion: (T1, T2) -> R\n): LiveData<R> = combineLiveData(listOf(liveData1, liveData2))\n    .map { conversion(it[0] as T1, it[1] as T2) }\n\nfun <T1, T2> combineLiveData(\n    liveData1: LiveData<T1>,\n    liveData2: LiveData<T2>\n): LiveData<Pair<T1, T2>> = combineLiveData(liveData1, liveData2) { t1, t2 -> t1 to t2 }\n\nfun <R> combineLiveData(\n    liveData1: LiveData<*>,\n    liveData2: LiveData<*>,\n    liveData3: LiveData<*>,\n    vararg liveDatas: LiveData<*>,\n    conversion: (List<*>) -> R\n): LiveData<R> =\n    combineLiveData(listOf(liveData1, liveData2, liveData3, *liveDatas)).map(conversion)\n\nprivate fun combineLiveData(liveDatas: List<LiveData<*>>): LiveData<List<*>> {\n    val mediatorLiveData = MediatorLiveData(liveDatas)\n    for (liveData in liveDatas) {\n        mediatorLiveData.add(liveData) {\n            value = liveDatas\n        }\n    }\n\n    return mediatorLiveData.map { sequence -> sequence.map { it.value } }\n}\n","package mono.livedata\n\nimport mono.lifecycle.LifecycleObserver\nimport mono.lifecycle.LifecycleOwner\n\n/**\n * A LiveData like class to observer state of a value\n */\nabstract class LiveData<T>(initValue: T) {\n    private var valueInternal: T = initValue\n    open val value: T\n        get() = valueInternal\n\n    // Visible for testing only\n    internal val observers: MutableList<Observer<T>> = mutableListOf()\n\n    /**\n     * Observes changes from live data within lifecycle with [lifecycleOwner].\n     * Note that if [lifecycleOwner] is stopped, life data won't accept observer.\n     *\n     * @param throttleDurationMillis: Throttling configuration. By default, the throttle duration is\n     * set to -1 which means the observer will be executed immediately as the value is updated.\n     * With the throttle duration is 0, the execution will be run in the next frame. With throttle\n     * duration > 0, it will execute by timeout of the duration with the latest value bound to the\n     * live data.\n     */\n    fun observe(\n        lifecycleOwner: LifecycleOwner,\n        throttleDurationMillis: Int = -1,\n        listener: (T) -> Unit\n    ) {\n        if (lifecycleOwner.isStopped) {\n            return\n        }\n        val liveDataObserver = SimpleObserver(listener).throttle(throttleDurationMillis)\n        val lifecycleObserver = OnStopLifecycleObserver {\n            observers.remove(liveDataObserver)\n        }\n        observers.add(liveDataObserver)\n        lifecycleOwner.addObserver(lifecycleObserver)\n        delegateValueToObserver(liveDataObserver, value)\n    }\n\n    protected fun setValue(value: T) {\n        valueInternal = value\n\n        for (observer in observers) {\n            delegateValueToObserver(observer, value)\n        }\n    }\n\n    protected open fun delegateValueToObserver(observer: Observer<T>, value: T) {\n        observer.onChanged(value)\n    }\n\n    private class OnStopLifecycleObserver(private val callback: () -> Unit) : LifecycleObserver {\n        override fun onStop() {\n            callback()\n        }\n    }\n}\n\nopen class MutableLiveData<T>(initValue: T) : LiveData<T>(initValue) {\n    override var value: T\n        get() = super.value\n        set(value) = setValue(value)\n}\n\nclass MediatorLiveData<T>(initValue: T) : MutableLiveData<T>(initValue) {\n    private val lifecycleOwner: LifecycleOwner = LiveDataLifecycleOwner()\n\n    fun <S> add(liveData: LiveData<S>, transform: MediatorLiveData<T>.(S) -> Unit) {\n        liveData.observe(lifecycleOwner) {\n            transform(it)\n        }\n    }\n}\n\nprivate class TransformLiveData<T, R>(\n    liveData: LiveData<T>,\n    private val transform: (T) -> R\n) : LiveData<R>(transform(liveData.value)) {\n\n    init {\n        liveData.observe(LiveDataLifecycleOwner()) {\n            setValue(transform(it))\n        }\n    }\n}\n\nprivate class DistinctOnlyLiveData<T>(liveData: LiveData<T>) : LiveData<T>(liveData.value) {\n    init {\n        liveData.observe(LiveDataLifecycleOwner()) {\n            if (it != value) {\n                setValue(it)\n            }\n        }\n    }\n}\n\nprivate class NonNullOnlyLiveData<T>(\n    liveData: LiveData<T?>\n) : LiveData<T?>(liveData.value) {\n    init {\n        liveData.observe(LiveDataLifecycleOwner()) {\n            if (it != null) {\n                setValue(it)\n            }\n        }\n    }\n\n    override fun delegateValueToObserver(observer: Observer<T?>, value: T?) {\n        if (value != null) {\n            observer.onChanged(value)\n        }\n    }\n}\n\nfun <T, R> LiveData<T>.map(transform: (T) -> R): LiveData<R> = TransformLiveData(this, transform)\n\nfun <T> LiveData<T>.distinctUntilChange(): LiveData<T> = DistinctOnlyLiveData(this)\n\n@Suppress(\"UNCHECKED_CAST\")\nfun <T> LiveData<T?>.filterNotNull(): LiveData<T> = NonNullOnlyLiveData(this) as LiveData<T>\n\nprivate class LiveDataLifecycleOwner : LifecycleOwner()\n","package mono.livedata\n\nimport mono.common.Cancelable\nimport mono.common.setTimeout\n\n/**\n * Observer interface for notifying change.\n */\ninterface Observer<T> {\n    fun onChanged(newValue: T)\n}\n\ninternal fun <T> Observer<T>.throttle(durationMillis: Int): Observer<T> =\n    if (durationMillis >= 0) ThrottledObserver(durationMillis, this) else this\n\n/**\n * A simple observer which always notify change to [listener] when it receives update.\n */\ninternal class SimpleObserver<T>(\n    private val listener: (T) -> Unit\n) : Observer<T> {\n    override fun onChanged(newValue: T) {\n        listener(newValue)\n    }\n}\n\n/**\n * An observer which only deliver change within a time window from the first change to a duration\n * from that time. The last value updated will be notify to the observer.\n */\ninternal class ThrottledObserver<T>(\n    private val durationMillis: Int,\n    private val observer: Observer<T>\n) : Observer<T> {\n    private var currentTimeout: Cancelable? = null\n    private var currentValue: T? = null\n\n    override fun onChanged(newValue: T) {\n        if (currentTimeout == null) {\n            currentValue = newValue\n            currentTimeout = setTimeout(durationMillis) { timeoutTick() }\n        } else {\n            currentValue = newValue\n        }\n    }\n\n    private fun timeoutTick() {\n        val newValue = currentValue ?: return\n        observer.onChanged(newValue)\n        currentTimeout = null\n    }\n}\n","package mono.bitmap.manager\n\nimport mono.bitmap.manager.factory.LineBitmapFactory\nimport mono.bitmap.manager.factory.RectangleBitmapFactory\nimport mono.bitmap.manager.factory.TextBitmapFactory\nimport mono.graphics.bitmap.MonoBitmap\nimport mono.shape.shape.AbstractShape\nimport mono.shape.shape.Group\nimport mono.shape.shape.Line\nimport mono.shape.shape.MockShape\nimport mono.shape.shape.Rectangle\nimport mono.shape.shape.Text\n\n/**\n * A model class which manages and caches bitmap of shapes.\n * Cache-hit when both id and version of the shape valid in the cache, otherwise, cache-miss.\n */\nclass MonoBitmapManager {\n    private val idToBitmapMap: MutableMap<String, VersionizedBitmap> = mutableMapOf()\n\n    fun getBitmap(shape: AbstractShape): MonoBitmap? {\n        val cachedBitmap = getCacheBitmap(shape)\n        if (cachedBitmap != null) {\n            return cachedBitmap\n        }\n\n        val bitmap = when (shape) {\n            is Rectangle -> RectangleBitmapFactory.toBitmap(\n                shape.bound.size,\n                shape.extra\n            )\n            is Text -> TextBitmapFactory.toBitmap(\n                shape.bound.size,\n                shape.renderableText.getRenderableText(),\n                shape.extra,\n                shape.isTextEditing\n            )\n            is Line -> LineBitmapFactory.toBitmap(\n                shape.reducedJoinPoints,\n                shape.extra\n            )\n\n            is Group -> null // No draw group since it change very frequently.\n            is MockShape -> null // Only for testing.\n        } ?: return null\n        idToBitmapMap[shape.id] = VersionizedBitmap(shape.versionCode, bitmap)\n        return bitmap\n    }\n\n    private fun getCacheBitmap(shape: AbstractShape): MonoBitmap? =\n        idToBitmapMap[shape.id]?.takeIf { it.versionCode == shape.versionCode }?.bitmap\n\n    private class VersionizedBitmap(val versionCode: Int, val bitmap: MonoBitmap)\n}\n","package mono.bitmap.manager.factory\n\nimport mono.graphics.bitmap.MonoBitmap\nimport mono.graphics.geo.Point\nimport mono.shape.extra.LineExtra\nimport mono.shape.extra.manager.predefined.PredefinedStraightStrokeStyle\nimport mono.shape.extra.style.AnchorChar\nimport mono.shape.extra.style.StraightStrokeStyle\n\n/**\n * A drawable to draw Line shape to bitmap.\n */\nobject LineBitmapFactory {\n\n    fun toBitmap(\n        jointPoints: List<Point>,\n        lineExtra: LineExtra\n    ): MonoBitmap {\n        val bitmapBuilder = BitmapBuilderDecoration.getInstance(jointPoints)\n\n        val dashPattern = lineExtra.dashPattern\n        val strokeStyle = lineExtra.strokeStyle ?: PredefinedStraightStrokeStyle.NO_STROKE\n        createCharPoints(jointPoints, strokeStyle)\n            .forEachIndexed { index, pointChar ->\n                val char = if (dashPattern.isGap(index)) ' ' else pointChar.char\n                bitmapBuilder.put(pointChar.top, pointChar.left, char)\n            }\n\n        val startAnchor = lineExtra.startAnchor\n        if (startAnchor != null) {\n            bitmapBuilder.putAnchorPoint(\n                jointPoints[0],\n                jointPoints[1],\n                startAnchor\n            )\n        }\n        val endAnchor = lineExtra.endAnchor\n        if (endAnchor != null) {\n            bitmapBuilder.putAnchorPoint(\n                jointPoints[jointPoints.lastIndex],\n                jointPoints[jointPoints.lastIndex - 1],\n                endAnchor\n            )\n        }\n\n        return bitmapBuilder.toBitmap()\n    }\n\n    private fun createCharPoints(\n        jointPoints: List<Point>,\n        strokeStyle: StraightStrokeStyle\n    ): Sequence<PointChar> {\n        val lines =\n            jointPoints.zipWithNext().takeIf { it.isNotEmpty() } ?: return emptySequence()\n\n        val firstPoint = lines.first().let { (p0, p1) ->\n            val char = if (isHorizontal(p0, p1)) strokeStyle.horizontal else strokeStyle.vertical\n            PointChar.point(p0.left, p0.top, char)\n        }\n\n        val charPoints = lines.asSequence()\n            .zipWithNext { (p0, p1), (_, p2) -> Triple(p0, p1, p2) }\n            .flatMap { (p0, p1, p2) ->\n                val line = createLineChar(p0, p1, strokeStyle)\n\n                val connectChar = strokeStyle.getRightAngleChar(p0, p1, p2)\n                val connectPoint = PointChar.point(p1.left, p1.top, connectChar)\n\n                line + connectPoint\n            }\n\n        val lastLine = lines.last()\n        val lastLinePoint = createLineChar(lastLine.first, lastLine.second, strokeStyle)\n        val lastPoint = lastLine.let { (p0, p1) ->\n            val char = if (isHorizontal(p0, p1)) strokeStyle.horizontal else strokeStyle.vertical\n            PointChar.point(p1.left, p1.top, char)\n        }\n        return firstPoint + charPoints + lastLinePoint + lastPoint\n    }\n\n    private fun createLineChar(\n        p0: Point,\n        p1: Point,\n        strokeStyle: StraightStrokeStyle\n    ): Sequence<PointChar> = if (isHorizontal(p0, p1)) {\n        PointChar.horizontalLine(p0.left, p1.left, p0.top, strokeStyle.horizontal)\n    } else {\n        PointChar.verticalLine(p0.left, p0.top, p1.top, strokeStyle.vertical)\n    }\n\n    private fun StraightStrokeStyle.getRightAngleChar(\n        point0: Point,\n        point1: Point,\n        point2: Point\n    ): Char {\n        val isHorizontal0 = isHorizontal(point0, point1)\n        val isHorizontal1 = isHorizontal(point1, point2)\n        if (isHorizontal0 == isHorizontal1) {\n            // Same line\n            return if (isHorizontal0) horizontal else vertical\n        }\n\n        val isLeft = point0.left < point1.left || point2.left < point1.left\n        val isUpper = point0.top < point1.top || point2.top < point1.top\n\n        return if (isLeft) {\n            if (isUpper) upLeft else downLeft\n        } else {\n            if (isUpper) downRight else upRight\n        }\n    }\n\n    private fun BitmapBuilderDecoration.putAnchorPoint(\n        anchor: Point,\n        previousPoint: Point,\n        anchorChar: AnchorChar\n    ) {\n        val char = if (isHorizontal(anchor, previousPoint)) {\n            if (anchor.left < previousPoint.left) anchorChar.left else anchorChar.right\n        } else {\n            if (anchor.top < previousPoint.top) anchorChar.top else anchorChar.bottom\n        }\n        put(anchor.row, anchor.column, char)\n    }\n\n    private fun isHorizontal(point1: Point, point2: Point): Boolean = point1.top == point2.top\n\n    private class BitmapBuilderDecoration(\n        private val row0: Int,\n        private val column0: Int,\n        width: Int,\n        height: Int\n    ) {\n        private val builder = MonoBitmap.Builder(width, height)\n\n        fun put(row: Int, column: Int, char: Char) =\n            builder.put(row - row0, column - column0, char)\n\n        fun toBitmap(): MonoBitmap = builder.toBitmap()\n\n        companion object {\n            fun getInstance(jointPoints: List<Point>): BitmapBuilderDecoration {\n                val boundLeft = jointPoints.minOf { it.left }\n                val boundRight = jointPoints.maxOf { it.left }\n                val boundTop = jointPoints.minOf { it.top }\n                val boundBottom = jointPoints.maxOf { it.top }\n\n                val boundWidth = boundRight - boundLeft + 1\n                val boundHeight = boundBottom - boundTop + 1\n\n                return BitmapBuilderDecoration(boundTop, boundLeft, boundWidth, boundHeight)\n            }\n        }\n    }\n}\n","package mono.bitmap.manager.factory\n\nimport kotlin.math.abs\n\n/**\n * A class representing a char at a point for generating bitmap.\n */\nclass PointChar private constructor(val left: Int, val top: Int, val char: Char) {\n\n    companion object {\n        fun point(left: Int, top: Int, char: Char): Sequence<PointChar> =\n            sequenceOf(PointChar(left, top, char))\n\n        fun horizontalLine(\n            beginExclusive: Int,\n            endExclusive: Int,\n            top: Int,\n            char: Char\n        ): Sequence<PointChar> {\n            if (abs(beginExclusive - endExclusive) <= 1) {\n                return emptySequence()\n            }\n            val delta = if (beginExclusive < endExclusive) 1 else -1\n            val begin = beginExclusive + delta\n            val end = endExclusive - delta\n            val range = if (begin > end) begin downTo end else begin..end\n            return range.asSequence().map { PointChar(it, top, char) }\n        }\n\n        fun verticalLine(\n            left: Int,\n            beginExclusive: Int,\n            endExclusive: Int,\n            char: Char\n        ): Sequence<PointChar> {\n            if (abs(beginExclusive - endExclusive) <= 1) {\n                return emptySequence()\n            }\n            val delta = if (beginExclusive < endExclusive) 1 else -1\n            val begin = beginExclusive + delta\n            val end = endExclusive - delta\n            val range = if (begin > end) begin downTo end else begin..end\n            return range.asSequence().map { PointChar(left, it, char) }\n        }\n    }\n}\n","package mono.bitmap.manager.factory\n\nimport mono.graphics.bitmap.MonoBitmap\nimport mono.graphics.geo.Size\nimport mono.shape.extra.RectangleExtra\nimport mono.shape.extra.manager.predefined.PredefinedStraightStrokeStyle\nimport mono.shape.extra.style.StraightStrokeDashPattern\nimport mono.shape.extra.style.StraightStrokeStyle\n\nobject RectangleBitmapFactory {\n\n    fun toBitmap(size: Size, extra: RectangleExtra): MonoBitmap {\n        val bitmapBuilder = MonoBitmap.Builder(size.width, size.height)\n\n        val fillDrawable = extra.fillStyle?.drawable\n        val strokeStyle = extra.strokeStyle\n\n        if (fillDrawable == null && strokeStyle == null) {\n            bitmapBuilder.drawBorder(\n                size,\n                PredefinedStraightStrokeStyle.NO_STROKE,\n                extra.dashPattern\n            )\n            return bitmapBuilder.toBitmap()\n        }\n\n        if (fillDrawable != null) {\n            bitmapBuilder.fill(0, 0, fillDrawable.toBitmap(size.width, size.height))\n        }\n\n        val isStrokeAllowed = fillDrawable == null || size.width > 1 && size.height > 1\n        if (isStrokeAllowed && strokeStyle != null) {\n            bitmapBuilder.drawBorder(size, strokeStyle, extra.dashPattern)\n        }\n\n        return bitmapBuilder.toBitmap()\n    }\n\n    private fun MonoBitmap.Builder.drawBorder(\n        size: Size,\n        strokeStyle: StraightStrokeStyle,\n        dashPattern: StraightStrokeDashPattern\n    ) {\n        if (size.width == 1 && size.height == 1) {\n            put(0, 0, '▫')\n            return\n        }\n\n        val left = 0\n        val top = 0\n        val right = size.width - 1\n        val bottom = size.height - 1\n\n        val pointChars = when {\n            size.width == 1 ->\n                sequenceOf(\n                    PointChar.verticalLine(left, top - 1, bottom, strokeStyle.vertical)\n                )\n            size.height == 1 ->\n                sequenceOf(\n                    PointChar.horizontalLine(left - 1, right, top, strokeStyle.horizontal)\n                )\n            else -> sequenceOf(\n                PointChar.point(left, top, strokeStyle.upRight),\n                PointChar.horizontalLine(left, right, top, strokeStyle.horizontal),\n                PointChar.point(right, top, strokeStyle.downLeft),\n                PointChar.verticalLine(right, top, bottom, strokeStyle.vertical),\n                PointChar.point(right, bottom, strokeStyle.upLeft),\n                PointChar.horizontalLine(right, left, bottom, strokeStyle.horizontal),\n                PointChar.point(left, bottom, strokeStyle.downRight),\n                PointChar.verticalLine(left, bottom, top, strokeStyle.vertical)\n            )\n        }\n\n        pointChars\n            .flatMap { it }\n            .forEachIndexed { index, pointChar ->\n                val char = if (dashPattern.isGap(index)) ' ' else pointChar.char\n                put(pointChar.top, pointChar.left, char)\n            }\n    }\n}\n",null,"package mono.bitmap.manager.factory\n\nimport mono.graphics.bitmap.MonoBitmap\nimport mono.graphics.geo.Size\nimport mono.shape.extra.TextExtra\nimport mono.shape.extra.style.TextAlign\n\nobject TextBitmapFactory {\n    fun toBitmap(\n        boundSize: Size,\n        renderableText: List<String>,\n        extra: TextExtra,\n        isTextEditingMode: Boolean\n    ): MonoBitmap {\n        val bgBitmap =\n            RectangleBitmapFactory.toBitmap(boundSize, extra.boundExtra)\n        val bitmapBuilder = MonoBitmap.Builder(boundSize.width, boundSize.height)\n        if (!(boundSize.width == 1 && boundSize.height == 1 && isTextEditingMode)) {\n            bitmapBuilder.fill(0, 0, bgBitmap)\n        }\n\n        val adjustedRenderableText = if (!isTextEditingMode) renderableText else emptyList()\n        bitmapBuilder.fillText(adjustedRenderableText, boundSize, extra)\n        return bitmapBuilder.toBitmap()\n    }\n\n    private fun MonoBitmap.Builder.fillText(\n        renderableText: List<String>,\n        boundSize: Size,\n        extra: TextExtra\n    ) {\n        val hasBorder = extra.hasBorder()\n        val rowOffset = if (hasBorder) 1 else 0\n        val colOffset = if (hasBorder) 1 else 0\n\n        val maxTextWidth = boundSize.width - colOffset * 2\n        val maxTextHeight = (boundSize.height - rowOffset * 2).coerceAtLeast(0)\n\n        val row0 = when (extra.textAlign.verticalAlign) {\n            TextAlign.VerticalAlign.TOP -> rowOffset\n            TextAlign.VerticalAlign.MIDDLE ->\n                if (maxTextHeight < renderableText.size) {\n                    rowOffset\n                } else {\n                    (maxTextHeight - renderableText.size) / 2 + rowOffset\n                }\n            TextAlign.VerticalAlign.BOTTOM ->\n                if (maxTextHeight < renderableText.size) {\n                    rowOffset\n                } else {\n                    maxTextHeight - renderableText.size + rowOffset\n                }\n        }\n\n        val horizontalAlign = extra.textAlign.horizontalAlign\n        for (rowIndex in renderableText.indices.take(maxTextHeight)) {\n            val row = renderableText[rowIndex]\n            val col0 = when (horizontalAlign) {\n                TextAlign.HorizontalAlign.LEFT -> colOffset\n                TextAlign.HorizontalAlign.MIDDLE -> (maxTextWidth - row.length) / 2 + colOffset\n                TextAlign.HorizontalAlign.RIGHT -> maxTextWidth - row.length + colOffset\n            }\n            for (colIndex in row.indices) {\n                val char = row[colIndex]\n                if (char != ' ') {\n                    put(row0 + rowIndex, col0 + colIndex, char)\n                }\n            }\n        }\n    }\n}\n","package mono.graphics.bitmap\n\nimport mono.common.Characters.TRANSPARENT_CHAR\nimport mono.common.Characters.isHalfTransparent\nimport mono.common.Characters.isTransparent\nimport mono.graphics.geo.Rect\nimport mono.graphics.geo.Size\n\n/**\n * A model class to hold the look of a shape after drawing.\n * Create new object via [Builder].\n */\nclass MonoBitmap private constructor(val matrix: List<Row>) {\n    val size: Size = Size(\n        width = matrix.firstOrNull()?.size ?: 0,\n        height = matrix.size\n    )\n\n    fun isEmpty(): Boolean = size == Size.ZERO\n\n    fun get(row: Int, column: Int): Char = matrix.getOrNull(row)?.get(column) ?: TRANSPARENT_CHAR\n\n    override fun toString(): String =\n        matrix.joinToString(\"\\n\")\n\n    class Builder(private val width: Int, private val height: Int) {\n        private val bound: Rect = Rect.byLTWH(0, 0, width, height)\n        private val matrix: List<MutableList<Char>> = List(height) {\n            MutableList(width) { TRANSPARENT_CHAR }\n        }\n\n        fun put(row: Int, column: Int, char: Char) {\n            if (row in 0 until height && column in 0 until width) {\n                matrix[row][column] = char\n            }\n        }\n\n        fun fill(char: Char) {\n            for (row in 0 until height) {\n                for (col in 0 until width) {\n                    matrix[row][col] = char\n                }\n            }\n        }\n\n        fun fill(row: Int, column: Int, bitmap: MonoBitmap) {\n            if (bitmap.isEmpty()) {\n                return\n            }\n            val inMatrix = bitmap.matrix\n\n            val inMatrixBound = Rect.byLTWH(row, column, bitmap.size.width, bitmap.size.height)\n\n            val overlap = bound.getOverlappedRect(inMatrixBound) ?: return\n            val (startCol, startRow) = overlap.position - bound.position\n            val (inStartCol, inStartRow) = overlap.position - inMatrixBound.position\n\n            for (r in 0 until overlap.height) {\n                val src = inMatrix[inStartRow + r]\n                val dest = matrix[startRow + r]\n\n                src.forEachIndex(inStartCol, inStartCol + overlap.width) { index, char ->\n                    val destIndex = startCol + index\n                    // char from source is always not transparent (0) due to the optimisation of Row\n                    val isApplicable =\n                        dest[destIndex].isTransparent && char.isHalfTransparent ||\n                            !char.isHalfTransparent\n                    if (isApplicable) {\n                        dest[startCol + index] = char\n                    }\n                }\n            }\n        }\n\n        fun toBitmap(): MonoBitmap = MonoBitmap(matrix.map { Row(it) })\n    }\n\n    class Row(chars: List<Char>) {\n        internal val size: Int = chars.size\n        private val sortedCells: List<Cell> = chars.mapIndexedNotNull { index, char ->\n            if (!char.isTransparent) Cell(index, char) else null\n        }\n\n        fun forEachIndex(\n            fromIndex: Int = 0,\n            toExclusiveIndex: Int = size,\n            action: (Int, Char) -> Unit\n        ) {\n            val foundLow = sortedCells.binarySearch { it.index.compareTo(fromIndex) }\n            val low = if (foundLow < 0) -foundLow - 1 else foundLow\n            for (index in low until sortedCells.size) {\n                val cell = sortedCells[index]\n                if (cell.index >= toExclusiveIndex) {\n                    break\n                }\n                action(cell.index - fromIndex, cell.char)\n            }\n        }\n\n        internal fun get(column: Int): Char {\n            val index = sortedCells.binarySearch { it.index.compareTo(column) }\n            return if (index >= 0) sortedCells[index].char else TRANSPARENT_CHAR\n        }\n\n        override fun toString(): String {\n            val list = MutableList(size) { ' ' }\n            for (cell in sortedCells) {\n                list[cell.index] = cell.char\n            }\n            return list.joinToString(\"\")\n        }\n    }\n\n    private data class Cell(val index: Int, val char: Char)\n}\n","package mono.graphics.bitmap.drawable\n\nimport mono.graphics.bitmap.MonoBitmap\n\n/**\n * A drawable which simplify fills with [char].\n */\nclass CharDrawable(private val char: Char) : Drawable {\n    override fun toBitmap(width: Int, height: Int): MonoBitmap {\n        val builder = MonoBitmap.Builder(width, height)\n        builder.fill(char)\n        return builder.toBitmap()\n    }\n}\n","package mono.graphics.board\n\n/**\n * An objects that defines resources for crossing.\n */\ninternal object CrossingResources {\n    val CONNECTABLE_CHARS = \"-─|│┌└┐┘┬┴├┤┼\".toSet()\n\n    val LEFT_IN_CHARS = \"-─┌└┬┴├┼\".toSet()\n    val RIGHT_IN_CHARS = \"-─┐┘┬┴┤┼\".toSet()\n    val TOP_IN_CHARS = \"|│┌┐┬├┤┼\".toSet()\n    val BOTTOM_IN_CHARS = \"|│└┘┴├┤┼\".toSet()\n\n    val CONNECTOR_CHAR_MAP = mapOf(\n        \"─│\" to mapOf(\n            inDirectionMark(hasRight = true, hasVertical = true) to '├',\n            inDirectionMark(hasLeft = true, hasVertical = true) to '┤',\n            inDirectionMark(hasHorizontal = true, hasVertical = true) to '┼',\n            inDirectionMark(hasHorizontal = true, hasTop = true) to '┴',\n            inDirectionMark(hasHorizontal = true, hasBottom = true) to '┬'\n        ),\n\n        \"─┌\" to mapOf(\n            inDirectionMark(hasRight = true, hasBottom = true) to '┌',\n            inDirectionMark(hasHorizontal = true, hasBottom = true) to '┬'\n        ),\n\n        \"─└\" to mapOf(\n            inDirectionMark(hasRight = true, hasTop = true) to '└',\n            inDirectionMark(hasHorizontal = true, hasTop = true) to '┴'\n        ),\n\n        \"─┐\" to mapOf(\n            inDirectionMark(hasLeft = true, hasBottom = true) to '┐',\n            inDirectionMark(hasHorizontal = true, hasBottom = true) to '┬'\n        ),\n\n        \"─┘\" to mapOf(\n            inDirectionMark(hasLeft = true, hasTop = true) to '┘',\n            inDirectionMark(hasHorizontal = true, hasTop = true) to '┴'\n        ),\n\n        \"─├\" to mapOf(\n            inDirectionMark(hasHorizontal = true, hasVertical = true) to '┼',\n            inDirectionMark(hasVertical = true, hasRight = true) to '├'\n        ),\n\n        \"─┤\" to mapOf(\n            inDirectionMark(hasHorizontal = true, hasVertical = true) to '┼'\n        ),\n\n        \"─┴\" to mapOf(\n            inDirectionMark(hasHorizontal = true, hasTop = true) to '┴'\n        ),\n\n        \"─┬\" to mapOf(\n            inDirectionMark(hasHorizontal = true, hasBottom = true) to '┬'\n        ),\n\n        \"─┼\" to mapOf(\n            inDirectionMark(hasHorizontal = true, hasVertical = true) to '┼'\n        ),\n\n        \"│┌\" to mapOf(\n            inDirectionMark(hasBottom = true, hasRight = true) to '┌',\n            inDirectionMark(hasVertical = true, hasRight = true) to '├'\n        ),\n\n        \"│└\" to mapOf(\n            inDirectionMark(hasTop = true, hasRight = true) to '└',\n            inDirectionMark(hasVertical = true, hasRight = true) to '├'\n        ),\n\n        \"│┐\" to mapOf(\n            inDirectionMark(hasBottom = true, hasLeft = true) to '┐',\n            inDirectionMark(hasVertical = true, hasLeft = true) to '┤'\n        ),\n\n        \"│┘\" to mapOf(\n            inDirectionMark(hasTop = true, hasLeft = true) to '┘',\n            inDirectionMark(hasVertical = true, hasLeft = true) to '┤'\n        ),\n\n        \"│├\" to mapOf(\n            inDirectionMark(hasVertical = true, hasRight = true) to '├'\n        ),\n\n        \"│┤\" to mapOf(\n            inDirectionMark(hasVertical = true, hasLeft = true) to '┤'\n        ),\n\n        \"│┴\" to mapOf(\n            inDirectionMark(hasHorizontal = true, hasVertical = true) to '┼'\n        ),\n\n        \"│┬\" to mapOf(\n            inDirectionMark(hasHorizontal = true, hasVertical = true) to '┼'\n        ),\n\n        \"│┼\" to mapOf(\n            inDirectionMark(hasHorizontal = true, hasVertical = true) to '┼'\n        ),\n\n        \"┌└\" to mapOf(\n            inDirectionMark(hasVertical = true, hasRight = true) to '├'\n        ),\n\n        \"┌┘\" to mapOf(\n            inDirectionMark(hasHorizontal = true, hasVertical = true) to '┼'\n        ),\n\n        \"┌┐\" to mapOf(\n            inDirectionMark(hasHorizontal = true, hasBottom = true) to '┬'\n        ),\n\n        \"┌├\" to mapOf(\n            inDirectionMark(hasVertical = true, hasRight = true) to '├'\n        ),\n\n        \"┌┤\" to mapOf(\n            inDirectionMark(hasHorizontal = true, hasVertical = true) to '┼'\n        ),\n\n        \"┌┴\" to mapOf(\n            inDirectionMark(hasHorizontal = true, hasVertical = true) to '┼'\n        ),\n\n        \"┌┬\" to mapOf(\n            inDirectionMark(hasHorizontal = true, hasBottom = true) to '┬'\n        ),\n\n        \"┌┼\" to mapOf(\n            inDirectionMark(hasHorizontal = true, hasVertical = true) to '┼'\n        ),\n\n        \"└┐\" to mapOf(\n            inDirectionMark(hasHorizontal = true, hasVertical = true) to '┼'\n        ),\n\n        \"└┘\" to mapOf(\n            inDirectionMark(hasHorizontal = true, hasTop = true) to '┴'\n        ),\n\n        \"└├\" to mapOf(\n            inDirectionMark(hasVertical = true, hasRight = true) to '├'\n        ),\n\n        \"└┤\" to mapOf(\n            inDirectionMark(hasHorizontal = true, hasVertical = true) to '┼'\n        ),\n\n        \"└┴\" to mapOf(\n            inDirectionMark(hasHorizontal = true, hasTop = true) to '┴'\n        ),\n\n        \"└┬\" to mapOf(\n            inDirectionMark(hasHorizontal = true, hasVertical = true) to '┼'\n        ),\n\n        \"└┼\" to mapOf(\n            inDirectionMark(hasHorizontal = true, hasVertical = true) to '┼'\n        ),\n\n        \"┘┐\" to mapOf(\n            inDirectionMark(hasVertical = true, hasLeft = true) to '┤'\n        ),\n\n        \"┘├\" to mapOf(\n            inDirectionMark(hasHorizontal = true, hasVertical = true) to '┼'\n        ),\n\n        \"┘┤\" to mapOf(\n            inDirectionMark(hasVertical = true, hasLeft = true) to '┤'\n        ),\n\n        \"┘┴\" to mapOf(\n            inDirectionMark(hasHorizontal = true, hasTop = true) to '┴'\n        ),\n\n        \"┘┬\" to mapOf(\n            inDirectionMark(hasHorizontal = true, hasVertical = true) to '┼'\n        ),\n\n        \"┘┼\" to mapOf(\n            inDirectionMark(hasHorizontal = true, hasVertical = true) to '┼'\n        ),\n\n        \"┐├\" to mapOf(\n            inDirectionMark(hasHorizontal = true, hasVertical = true) to '┼'\n        ),\n\n        \"┐┤\" to mapOf(\n            inDirectionMark(hasVertical = true, hasLeft = true) to '┤'\n        ),\n\n        \"┐┴\" to mapOf(\n            inDirectionMark(hasHorizontal = true, hasVertical = true) to '┼'\n        ),\n\n        \"┐┬\" to mapOf(\n            inDirectionMark(hasHorizontal = true, hasBottom = true) to '┬'\n        ),\n\n        \"┐┼\" to mapOf(\n            inDirectionMark(hasHorizontal = true, hasVertical = true) to '┼'\n        ),\n\n        \"├┤\" to mapOf(\n            inDirectionMark(hasHorizontal = true, hasVertical = true) to '┼'\n        ),\n\n        \"├┴\" to mapOf(\n            inDirectionMark(hasHorizontal = true, hasVertical = true) to '┼'\n        ),\n\n        \"├┬\" to mapOf(\n            inDirectionMark(hasHorizontal = true, hasVertical = true) to '┼'\n        ),\n\n        \"├┼\" to mapOf(\n            inDirectionMark(hasHorizontal = true, hasVertical = true) to '┼'\n        ),\n\n        \"┤┴\" to mapOf(\n            inDirectionMark(hasHorizontal = true, hasVertical = true) to '┼'\n        ),\n\n        \"┤┬\" to mapOf(\n            inDirectionMark(hasHorizontal = true, hasVertical = true) to '┼'\n        ),\n\n        \"┤┼\" to mapOf(\n            inDirectionMark(hasHorizontal = true, hasVertical = true) to '┼'\n        ),\n\n        \"┴┬\" to mapOf(\n            inDirectionMark(hasHorizontal = true, hasVertical = true) to '┼'\n        ),\n\n        \"┴┼\" to mapOf(\n            inDirectionMark(hasHorizontal = true, hasVertical = true) to '┼'\n        ),\n\n        \"┬┼\" to mapOf(\n            inDirectionMark(hasHorizontal = true, hasVertical = true) to '┼'\n        )\n    )\n\n    /**\n     * An utility method for creating a mark vector for in-directions.\n     */\n    fun inDirectionMark(\n        hasLeft: Boolean = false,\n        hasRight: Boolean = false,\n        hasTop: Boolean = false,\n        hasBottom: Boolean = false,\n        hasHorizontal: Boolean = false,\n        hasVertical: Boolean = false\n    ): Int {\n        val leftMark = if (hasLeft || hasHorizontal) 0b1 else 0\n        val rightMark = if (hasRight || hasHorizontal) 0b10 else 0\n        val topMark = if (hasTop || hasVertical) 0b100 else 0\n        val bottomMark = if (hasBottom || hasVertical) 0b1000 else 0\n        return leftMark or topMark or rightMark or bottomMark\n    }\n}\n","package mono.graphics.board\n\nimport mono.environment.Build\nimport mono.graphics.bitmap.MonoBitmap\nimport mono.graphics.board.CrossingResources.BOTTOM_IN_CHARS\nimport mono.graphics.board.CrossingResources.CONNECTOR_CHAR_MAP\nimport mono.graphics.board.CrossingResources.LEFT_IN_CHARS\nimport mono.graphics.board.CrossingResources.RIGHT_IN_CHARS\nimport mono.graphics.board.CrossingResources.TOP_IN_CHARS\nimport mono.graphics.board.CrossingResources.inDirectionMark\nimport mono.graphics.geo.Point\nimport mono.graphics.geo.Rect\nimport mono.graphics.geo.Size\n\n/**\n * A model class which manages all mono-pixels of the app.\n * This class is to allow infinity drawing.\n */\nclass MonoBoard(private val unitSize: Size = STANDARD_UNIT_SIZE) {\n\n    private val painterBoards: MutableMap<BoardAddress, PainterBoard> = mutableMapOf()\n\n    internal val boardCount: Int\n        get() = painterBoards.size\n\n    private var windowBound: Rect = Rect.ZERO\n\n    fun clearAndSetWindow(windowBound: Rect) {\n        this.windowBound = windowBound\n        val affectedBoards = getOrCreateOverlappedBoards(windowBound, isCreateRequired = false)\n        for (board in affectedBoards) {\n            board.clear()\n        }\n    }\n\n    fun fill(position: Point, bitmap: MonoBitmap, highlight: Highlight) {\n        val rect = Rect(position, bitmap.size)\n        val affectedBoards = getOrCreateOverlappedBoards(rect, isCreateRequired = true)\n\n        val crossingPoints = mutableListOf<CrossPoint>()\n        for (board in affectedBoards) {\n            crossingPoints += board.fill(position, bitmap, highlight)\n        }\n\n        drawCrossingPoints(crossingPoints, highlight)\n    }\n\n    private fun drawCrossingPoints(crossingPoints: List<CrossPoint>, highlight: Highlight) {\n        for (charPoint in crossingPoints) {\n            val currentPixel = get(charPoint.left, charPoint.top)\n            val directionMap =\n                CONNECTOR_CHAR_MAP[\"${currentPixel.char}${charPoint.char}\"]\n                    ?: CONNECTOR_CHAR_MAP[\"${charPoint.char}${currentPixel.char}\"]\n            if (directionMap == null) {\n                currentPixel.set(charPoint.char, highlight)\n                continue\n            }\n            val directionMark =\n                inDirectionMark(\n                    hasLeft = charPoint.leftChar in LEFT_IN_CHARS ||\n                        get(charPoint.left - 1, charPoint.top).char in LEFT_IN_CHARS,\n                    hasRight = charPoint.rightChar in RIGHT_IN_CHARS ||\n                        get(charPoint.left + 1, charPoint.top).char in RIGHT_IN_CHARS,\n                    hasTop = charPoint.topChar in TOP_IN_CHARS ||\n                        get(charPoint.left, charPoint.top - 1).char in TOP_IN_CHARS,\n                    hasBottom = charPoint.bottomChar in BOTTOM_IN_CHARS ||\n                        get(charPoint.left, charPoint.top + 1).char in BOTTOM_IN_CHARS\n                )\n\n            if (Build.DEBUG && DEBUG) {\n                val bitmapSurroundingChars = listOf(\n                    charPoint.leftChar,\n                    charPoint.rightChar,\n                    charPoint.topChar,\n                    charPoint.bottomChar\n                ).joinToString(\"•\")\n                val boardSurroundingChars = listOf(\n                    get(charPoint.left - 1, charPoint.top).char,\n                    get(charPoint.left + 1, charPoint.top).char,\n                    get(charPoint.left, charPoint.top - 1).char,\n                    get(charPoint.left, charPoint.top + 1).char\n                ).joinToString(\"•\")\n                println(\n                    \"${charPoint.char}${currentPixel.char} \" +\n                        \"($bitmapSurroundingChars) - ($boardSurroundingChars) -> \" +\n                        \"${directionMap[directionMark]}\"\n                )\n            }\n            currentPixel.set(directionMap[directionMark] ?: charPoint.char, highlight)\n        }\n    }\n\n    // This method is for testing only\n    internal fun fill(rect: Rect, char: Char, highlight: Highlight) {\n        val affectedBoards = getOrCreateOverlappedBoards(rect, isCreateRequired = true)\n        for (board in affectedBoards) {\n            board.fill(rect, char, highlight)\n        }\n    }\n\n    // This method is for testing only\n    internal fun set(position: Point, char: Char, highlight: Highlight) {\n        set(position.left, position.top, char, highlight)\n    }\n\n    // This method is for testing only\n    fun set(left: Int, top: Int, char: Char, highlight: Highlight) {\n        getOrCreateBoard(left, top, isCreateRequired = true)\n            ?.set(left, top, char, highlight)\n    }\n\n    operator fun get(position: Point): Pixel = get(position.left, position.top)\n\n    fun get(left: Int, top: Int): Pixel {\n        val boardAddress = toBoardAddress(left, top)\n        return painterBoards[boardAddress]?.get(left, top) ?: Pixel.TRANSPARENT_PIXEL\n    }\n\n    private fun getOrCreateOverlappedBoards(\n        rect: Rect,\n        isCreateRequired: Boolean\n    ): List<PainterBoard> {\n        val affectedBoards = mutableListOf<PainterBoard>()\n\n        val leftIndex = rect.left adjustDivide unitSize.width\n        val rightIndex = rect.right adjustDivide unitSize.width\n        val topIndex = rect.top adjustDivide unitSize.height\n        val bottomIndex = rect.bottom adjustDivide unitSize.height\n\n        for (left in leftIndex..rightIndex) {\n            for (top in topIndex..bottomIndex) {\n                val board = getOrCreateBoard(\n                    left = left * unitSize.width,\n                    top = top * unitSize.height,\n                    isCreateRequired = isCreateRequired\n                )\n                if (board != null) {\n                    affectedBoards += board\n                }\n            }\n        }\n        return affectedBoards\n    }\n\n    private fun getOrCreateBoard(\n        left: Int,\n        top: Int,\n        isCreateRequired: Boolean\n    ): PainterBoard? {\n        val boardAddress = toBoardAddress(left, top)\n        val board = if (isCreateRequired) {\n            painterBoards.getOrPut(boardAddress) { createNewBoard(boardAddress) }\n        } else {\n            painterBoards[boardAddress]\n        }\n        return board?.takeIf { windowBound.isOverlapped(it.bound) }\n    }\n\n    private fun createNewBoard(boardAddress: BoardAddress): PainterBoard {\n        val newBoardPosition =\n            Point(boardAddress.col * unitSize.width, boardAddress.row * unitSize.height)\n        val bound = Rect(newBoardPosition, unitSize)\n        return PainterBoard(bound)\n    }\n\n    private fun toBoardAddress(left: Int, top: Int): BoardAddress = BoardAddressManager.get(\n        boardRowIndex = top adjustDivide unitSize.height,\n        boardColIndex = left adjustDivide unitSize.width\n    )\n\n    private infix fun Int.adjustDivide(denominator: Int): Int =\n        if (this > 0 || this % denominator == 0) this / denominator else this / denominator - 1\n\n    override fun toString(): String {\n        val left = painterBoards.keys.minOf { it.col }\n        val right = painterBoards.keys.maxOf { it.col } + 1\n        val top = painterBoards.keys.minOf { it.row }\n        val bottom = painterBoards.keys.maxOf { it.row } + 1\n        val rect = Rect.byLTWH(\n            left = left * unitSize.width,\n            top = top * unitSize.height,\n            width = (right - left) * unitSize.width,\n            height = (bottom - top) * unitSize.height\n        )\n        val painterBoard = PainterBoard(rect)\n\n        painterBoards.values.forEach(painterBoard::fill)\n        return painterBoard.toString()\n    }\n\n    fun toStringInBound(bound: Rect): String {\n        val painterBoard = PainterBoard(bound)\n        painterBoards.values.forEach(painterBoard::fill)\n        return painterBoard.toString()\n    }\n\n    private data class BoardAddress(val row: Int, val col: Int)\n\n    private object BoardAddressManager {\n        private val addressMap: MutableMap<Int, MutableMap<Int, BoardAddress>> = mutableMapOf()\n\n        init {\n            for (rowIndex in -4..10) {\n                addressMap[rowIndex] = mutableMapOf()\n                for (colIndex in -4..16) {\n                    addressMap[rowIndex]!![colIndex] = BoardAddress(rowIndex, colIndex)\n                }\n            }\n        }\n\n        fun get(boardRowIndex: Int, boardColIndex: Int): BoardAddress =\n            addressMap.getOrPut(boardRowIndex) { mutableMapOf() }\n                .getOrPut(boardColIndex) { BoardAddress(boardRowIndex, boardColIndex) }\n    }\n\n    /**\n     * A data class that stores information of a cross point when drawing a bitmap with\n     * [PainterBoard].\n     * CrossPoint will then be drawn to the board after non-crossing pixels are drawn.\n     *\n     * @param [boardRow] and [boardColumn] are the location of point on the board.\n     * @param [char] is the character at the crossing point\n     * @param [leftChar], [rightChar], [topChar], and [bottomChar] are 4 characters around the\n     * crossing point\n     */\n    internal data class CrossPoint(\n        val boardRow: Int,\n        val boardColumn: Int,\n        val char: Char,\n        val leftChar: Char,\n        val rightChar: Char,\n        val topChar: Char,\n        val bottomChar: Char\n    ) {\n        val left: Int = boardColumn\n        val top: Int = boardRow\n    }\n\n    companion object {\n        val STANDARD_UNIT_SIZE = Size(16, 16)\n\n        // DO NOT change this value to true when commit\n        private const val DEBUG = false\n    }\n}\n",null,"package mono.graphics.board\n\nimport mono.common.Characters.TRANSPARENT_CHAR\nimport mono.common.Characters.isHalfTransparent\nimport mono.graphics.bitmap.MonoBitmap\nimport mono.graphics.board.MonoBoard.CrossPoint\nimport mono.graphics.geo.Point\nimport mono.graphics.geo.Rect\nimport mono.graphics.geo.Size\n\n/**\n * A model class to manage drawn pixel.\n * This is where a pixel is represented with its absolute position.\n */\ninternal class PainterBoard(internal val bound: Rect) {\n    private val validColumnRange = 0 until bound.width\n    private val validRowRange = 0 until bound.height\n\n    private val matrix: List<List<Pixel>> = List(bound.height) {\n        List(bound.width) { Pixel() }\n    }\n\n    fun clear() {\n        for (row in matrix) {\n            for (cell in row) {\n                cell.reset()\n            }\n        }\n    }\n\n    /**\n     * Fills with another [PainterBoard].\n     * If a pixel in input [PainterBoard] is transparent, the value in the current board at that\n     * position won't be overwritten.\n     */\n    fun fill(board: PainterBoard) {\n        val position = board.bound.position\n        val inMatrix = board.matrix\n\n        if (matrix.isEmpty() || matrix.first().isEmpty()) {\n            return\n        }\n        val inMatrixBound = Rect(position, Size(inMatrix.first().size, inMatrix.size))\n\n        val overlap = bound.getOverlappedRect(inMatrixBound) ?: return\n        val (startCol, startRow) = overlap.position - bound.position\n        val (inStartCol, inStartRow) = overlap.position - position\n\n        for (r in 0 until overlap.height) {\n            val src = inMatrix[inStartRow + r]\n            val dest = matrix[startRow + r]\n\n            src.subList(inStartCol, inStartCol + overlap.width).forEachIndexed { index, pixel ->\n                if (!pixel.isTransparent) {\n                    dest[startCol + index].set(pixel.char, pixel.highlight)\n                }\n            }\n        }\n    }\n\n    /**\n     * Fills with a bitmap and the highlight state of that bitmap from [position] excepts crossing\n     * points. Connection point are the point whose the char is one of connection characters defined\n     * in [CrossingResources.CONNECTABLE_CHARS] and there is a character drawn at the position.\n     * A list of [CrossPoint] will be returned to let [MonoBoard] able to adjust and draw the\n     * adjusted character of the connection points.\n     *\n     * The main reason why it is required to let [MonoBoard] draws the connection points is the\n     * painter board cannot see the pixel outside its bound which is required to identify the final\n     * connection character.\n     *\n     * If a pixel in input [bitmap] is transparent, the value in the current board at that\n     * position won't be overwritten.\n     */\n    fun fill(position: Point, bitmap: MonoBitmap, highlight: Highlight): List<CrossPoint> {\n        if (bitmap.isEmpty()) {\n            return emptyList()\n        }\n        val inMatrix = bitmap.matrix\n\n        val inMatrixBound = Rect(position, bitmap.size)\n\n        val overlap = bound.getOverlappedRect(inMatrixBound) ?: return emptyList()\n        val (startCol, startRow) = overlap.position - bound.position\n        val (inStartCol, inStartRow) = overlap.position - position\n\n        val crossingPoints = mutableListOf<CrossPoint>()\n\n        for (r in 0 until overlap.height) {\n            val bitmapRow = inStartRow + r\n            val painterRow = startRow + r\n            val src = inMatrix[bitmapRow]\n            val dest = matrix[painterRow]\n\n            src.forEachIndex(inStartCol, inStartCol + overlap.width) { index, char ->\n                val bitmapColumn = inStartCol + index\n                val painterColumn = startCol + index\n                val pixel = dest[painterColumn]\n\n                if (pixel.isTransparent ||\n                    pixel.char == char ||\n                    char !in CrossingResources.CONNECTABLE_CHARS\n                ) {\n                    // Not drawing half transparent character\n                    // (full transparent character is removed by bitmap)\n                    if (!char.isHalfTransparent) {\n                        pixel.set(char, highlight)\n                    }\n                } else {\n                    crossingPoints.add(\n                        CrossPoint(\n                            boardRow = painterRow + bound.position.row,\n                            boardColumn = painterColumn + bound.position.column,\n                            char,\n                            leftChar = bitmap.get(bitmapRow, bitmapColumn - 1),\n                            rightChar = bitmap.get(bitmapRow, bitmapColumn + 1),\n                            topChar = bitmap.get(bitmapRow - 1, bitmapColumn),\n                            bottomChar = bitmap.get(bitmapRow + 1, bitmapColumn)\n                        )\n                    )\n                }\n            }\n        }\n\n        return crossingPoints\n    }\n\n    /**\n     * Force values overlap with [rect] to be [char] regardless they are [TRANSPARENT_CHAR].\n     *\n     * Note: This method is for testing only\n     */\n    fun fill(rect: Rect, char: Char, highlight: Highlight) {\n        val overlap = bound.getOverlappedRect(rect) ?: return\n        val (startCol, startRow) = overlap.position - bound.position\n\n        for (r in 0 until overlap.height) {\n            val row = matrix[r + startRow]\n            for (c in 0 until overlap.width) {\n                row[c + startCol].set(char, highlight)\n            }\n        }\n    }\n\n    /**\n     * Force value at [position] to be [char] with [highlight].\n     *\n     * Note: This method is for testing only\n     */\n    fun set(position: Point, char: Char, highlight: Highlight) =\n        set(position.left, position.top, char, highlight)\n\n    // This method is for testing only\n    fun set(left: Int, top: Int, char: Char, highlight: Highlight) {\n        val columnIndex = left - bound.left\n        val rowIndex = top - bound.top\n        if (columnIndex !in validColumnRange || rowIndex !in validRowRange) {\n            return\n        }\n        matrix[rowIndex][columnIndex].set(char, highlight)\n    }\n\n    operator fun get(position: Point): Pixel? = get(position.left, position.top)\n\n    fun get(left: Int, top: Int): Pixel? {\n        val columnIndex = left - bound.left\n        val rowIndex = top - bound.top\n        return matrix.getOrNull(rowIndex)?.getOrNull(columnIndex)\n    }\n\n    override fun toString(): String =\n        matrix.joinToString(\"\\n\", transform = ::toRowString)\n\n    private fun toRowString(chars: List<Pixel>): String =\n        chars.joinToString(\"\") { it.toString() }\n}\n","package mono.graphics.board\n\nimport mono.common.Characters.TRANSPARENT_CHAR\nimport mono.common.Characters.isHalfTransparent\nimport mono.common.Characters.isTransparent\n\n/**\n * A class represents each item on the board matrix.\n */\nclass Pixel(\n    char: Char = TRANSPARENT_CHAR,\n    highlight: Highlight = Highlight.NO\n) {\n    var char: Char = char\n        private set\n    var highlight: Highlight = highlight\n        private set\n\n    val isTransparent: Boolean\n        get() = char.isTransparent || char.isHalfTransparent\n\n    fun set(char: Char, highlight: Highlight) {\n        this.char = char\n        this.highlight = highlight\n    }\n\n    fun reset() {\n        char = TRANSPARENT_CHAR\n        highlight = Highlight.NO\n    }\n\n    override fun toString(): String = if (isTransparent) \" \" else char.toString()\n\n    override fun equals(other: Any?): Boolean {\n        return other is Pixel && char == other.char && highlight == other.highlight\n    }\n\n    override fun hashCode(): Int {\n        var result = char.hashCode()\n        result = 31 * result + highlight.hashCode()\n        return result\n    }\n\n    companion object {\n        val TRANSPARENT_PIXEL = Pixel()\n    }\n}\n\n/**\n * An enum to describe all kinds of highlight\n */\nenum class Highlight {\n    NO,\n    SELECTED,\n    TEXT_EDITING\n}\n","package mono.shape.clipboard\n\nimport kotlinx.browser.document\nimport kotlinx.serialization.decodeFromString\nimport kotlinx.serialization.encodeToString\nimport kotlinx.serialization.json.Json\nimport mono.graphics.geo.Rect\nimport mono.html.TextArea\nimport mono.livedata.LiveData\nimport mono.livedata.MutableLiveData\nimport mono.shape.extra.TextExtra\nimport mono.shape.serialization.AbstractSerializableShape\nimport mono.shape.serialization.SerializableText\nimport org.w3c.dom.HTMLElement\n\n/**\n * A clipboard manager specializing for shapes.\n * This class handles storing shapes to clipboard and getting shapes in clipboard from paste action.\n */\nclass ShapeClipboardManager(private val body: HTMLElement) {\n\n    private val clipboardShapeMutableLiveData: MutableLiveData<List<AbstractSerializableShape>> =\n        MutableLiveData(emptyList())\n    val clipboardShapeLiveData: LiveData<List<AbstractSerializableShape>> =\n        clipboardShapeMutableLiveData\n\n    init {\n        document.onpaste = {\n            it.preventDefault()\n            it.stopPropagation()\n            onPasteText(it.clipboardData?.getData(\"text/plain\").orEmpty())\n        }\n    }\n\n    private fun onPasteText(text: String) {\n        if (text.isBlank()) {\n            return\n        }\n        clipboardShapeMutableLiveData.value =\n            try {\n                Json.decodeFromString(text)\n            } catch (e: Exception) {\n                listOf(createTextShapeFromText(text))\n            }\n    }\n\n    private fun createTextShapeFromText(text: String): SerializableText {\n        val lines = text\n            .split('\\n')\n            .flatMap { it.chunked(DEFAULT_TEXT_BOUND_WIDTH) }\n        val width = lines.maxOf { it.length }\n        val height = lines.size\n\n        // Replace space chars with nbsp chars to avoid space chars are being trimmed by the browser\n        val toBeUsedText = text.replace(' ', NON_BREAKING_SPACE_CHAR)\n        return SerializableText(\n            bound = Rect.Companion.byLTWH(0, 0, width, height),\n            text = toBeUsedText,\n            extra = TextExtra.NO_BOUND.toSerializableExtra()\n        )\n    }\n\n    fun setClipboard(shapes: List<AbstractSerializableShape>) {\n        val json = Json.encodeToString(shapes)\n        setClipboardText(json)\n    }\n\n    fun setClipboardText(text: String) {\n        TextArea(body, classes = \"hidden\", content = text) {\n            select()\n            document.execCommand(\"copy\")\n            remove()\n        }\n    }\n\n    companion object {\n        private const val DEFAULT_TEXT_BOUND_WIDTH = 400\n        private const val NON_BREAKING_SPACE_CHAR = '\\u00a0'\n    }\n}\n",null,null,null,"package mono.shapebound\n\nimport mono.common.MouseCursor\nimport mono.graphics.geo.Point\nimport mono.graphics.geo.Rect\nimport mono.shape.shape.Line\n\n/**\n * A sealed class for defining all possible interaction point types for a shape and common apis.\n *\n * [left] and [top] are the center position of the interaction point, with board-related unit.\n */\nsealed class InteractionPoint(\n    val shapeId: String,\n    val left: Double,\n    val top: Double,\n    val mouseCursor: MouseCursor\n)\n\n/**\n * A sealed class for defining all possible scale interaction point types for a shape.\n */\nsealed class ScaleInteractionPoint(\n    shapeId: String,\n    left: Double,\n    top: Double,\n    mouseCursor: MouseCursor\n) : InteractionPoint(shapeId, left, top, mouseCursor) {\n    abstract fun createNewShapeBound(currentBound: Rect, newPoint: Point): Rect\n\n    class TopLeft(\n        shapeId: String,\n        left: Double,\n        top: Double\n    ) : ScaleInteractionPoint(shapeId, left, top, MouseCursor.RESIZE_NWSE) {\n        override fun createNewShapeBound(currentBound: Rect, newPoint: Point): Rect =\n            Rect.byLTRB(newPoint.left, newPoint.top, currentBound.right, currentBound.bottom)\n    }\n\n    class TopMiddle(\n        shapeId: String,\n        left: Double,\n        top: Double\n    ) : ScaleInteractionPoint(shapeId, left, top, MouseCursor.RESIZE_NS) {\n        override fun createNewShapeBound(currentBound: Rect, newPoint: Point): Rect =\n            Rect.byLTRB(currentBound.left, newPoint.top, currentBound.right, currentBound.bottom)\n    }\n\n    class TopRight(\n        shapeId: String,\n        left: Double,\n        top: Double\n    ) : ScaleInteractionPoint(shapeId, left, top, MouseCursor.RESIZE_NESW) {\n        override fun createNewShapeBound(currentBound: Rect, newPoint: Point): Rect =\n            Rect.byLTRB(currentBound.left, newPoint.top, newPoint.left, currentBound.bottom)\n    }\n\n    class MiddleLeft(\n        shapeId: String,\n        left: Double,\n        top: Double\n    ) : ScaleInteractionPoint(shapeId, left, top, MouseCursor.RESIZE_EW) {\n        override fun createNewShapeBound(currentBound: Rect, newPoint: Point): Rect =\n            Rect.byLTRB(newPoint.left, currentBound.top, currentBound.right, currentBound.bottom)\n    }\n\n    class MiddleRight(\n        shapeId: String,\n        left: Double,\n        top: Double\n    ) : ScaleInteractionPoint(shapeId, left, top, MouseCursor.RESIZE_EW) {\n        override fun createNewShapeBound(currentBound: Rect, newPoint: Point): Rect =\n            Rect.byLTRB(currentBound.left, currentBound.top, newPoint.left, currentBound.bottom)\n    }\n\n    class BottomLeft(\n        shapeId: String,\n        left: Double,\n        top: Double\n    ) : ScaleInteractionPoint(shapeId, left, top, MouseCursor.RESIZE_NESW) {\n        override fun createNewShapeBound(currentBound: Rect, newPoint: Point): Rect =\n            Rect.byLTRB(newPoint.left, currentBound.top, currentBound.right, newPoint.top)\n    }\n\n    class BottomMiddle(\n        shapeId: String,\n        left: Double,\n        top: Double\n    ) : ScaleInteractionPoint(shapeId, left, top, MouseCursor.RESIZE_NS) {\n        override fun createNewShapeBound(currentBound: Rect, newPoint: Point): Rect =\n            Rect.byLTRB(currentBound.left, currentBound.top, currentBound.right, newPoint.top)\n    }\n\n    class BottomRight(\n        shapeId: String,\n        left: Double,\n        top: Double\n    ) : ScaleInteractionPoint(shapeId, left, top, MouseCursor.RESIZE_NWSE) {\n        override fun createNewShapeBound(currentBound: Rect, newPoint: Point): Rect =\n            Rect.byLTRB(currentBound.left, currentBound.top, newPoint.left, newPoint.top)\n    }\n}\n\n/**\n * A sealed class to define all possible interaction points on Line shapes.\n */\nsealed class LineInteractionPoint(\n    shapeId: String,\n    left: Double,\n    top: Double,\n    mouseCursor: MouseCursor\n) : InteractionPoint(shapeId, left, top, mouseCursor) {\n\n    class Anchor(\n        shapeId: String,\n        val anchor: Line.Anchor,\n        left: Double,\n        top: Double\n    ) : LineInteractionPoint(shapeId, left, top, MouseCursor.MOVE)\n\n    class Edge(\n        shapeId: String,\n        val edgeId: Int,\n        left: Double,\n        top: Double,\n        isHorizontal: Boolean\n    ) : LineInteractionPoint(\n        shapeId,\n        left,\n        top,\n        if (isHorizontal) MouseCursor.RESIZE_ROW else MouseCursor.RESIZE_COL\n    )\n}\n","package mono.shapebound\n\nimport mono.shape.shape.Line\n\n/**\n * A class which defines interaction bound for Line shapes.\n */\nclass LineInteractionBound(\n    private val targetedShapeId: String,\n    edges: List<Line.Edge>\n) : InteractionBound() {\n    private val reducedEdges: List<Line.Edge>\n\n    override val interactionPoints: List<InteractionPoint>\n\n    init {\n        val noIdenticalPointsEdges = edges.filterNot { it.startPoint == it.endPoint }\n        reducedEdges = noIdenticalPointsEdges.ifEmpty { listOf(edges.first()) }\n\n        val anchorPoints = listOf(\n            createInteractionAnchor(Line.Anchor.START),\n            createInteractionAnchor(Line.Anchor.END)\n        )\n        val middleEdgePoints =\n            reducedEdges.mapNotNull {\n                if (it.startPoint == it.endPoint) {\n                    return@mapNotNull null\n                }\n                LineInteractionPoint.Edge(\n                    targetedShapeId,\n                    it.id,\n                    left = it.middleLeft + 0.5,\n                    top = it.middleTop + 0.5,\n                    it.isHorizontal\n                )\n            }\n\n        interactionPoints = anchorPoints + middleEdgePoints\n    }\n\n    private fun createInteractionAnchor(\n        anchor: Line.Anchor\n    ): LineInteractionPoint.Anchor {\n        val edge = if (anchor == Line.Anchor.START) reducedEdges.first() else reducedEdges.last()\n        val (point, anotherPoint) =\n            if (anchor == Line.Anchor.START) {\n                edge.startPoint to edge.endPoint\n            } else {\n                edge.endPoint to edge.startPoint\n            }\n        val horizontalOffset = when {\n            !edge.isHorizontal -> 0.5\n            point == anotherPoint -> if (anchor == Line.Anchor.START) 0.0 else 1.0\n            point.left < anotherPoint.left -> 0.0\n            else -> 1.0\n        }\n        val verticalOffset = when {\n            edge.isHorizontal -> 0.5\n            point.top <= anotherPoint.top -> 0.0\n            else -> 1.0\n        }\n        return LineInteractionPoint.Anchor(\n            targetedShapeId,\n            anchor,\n            left = point.left + horizontalOffset,\n            top = point.top + verticalOffset\n        )\n    }\n}\n","package mono.shapebound\n\nimport mono.graphics.geo.Rect\n\n/**\n * A class which defines interaction bound for scalable shapes.\n */\nclass ScalableInteractionBound(\n    targetedShapeId: String,\n    shapeBound: Rect\n) : InteractionBound() {\n    val left: Double = shapeBound.left.toDouble() - 0.25\n    val top: Double = shapeBound.top.toDouble() - 0.25\n    val right: Double = shapeBound.right + 1.0 + 0.25\n    val bottom: Double = shapeBound.bottom + 1.0 + 0.25\n\n    private val horizontalMiddle: Double = (left + right) / 2.0\n    private val verticalMiddle: Double = (top + bottom) / 2.0\n\n    override val interactionPoints: List<ScaleInteractionPoint> = listOf(\n        ScaleInteractionPoint.TopLeft(targetedShapeId, left, top),\n        ScaleInteractionPoint.TopMiddle(targetedShapeId, horizontalMiddle, top),\n        ScaleInteractionPoint.TopRight(targetedShapeId, right, top),\n        ScaleInteractionPoint.MiddleLeft(targetedShapeId, left, verticalMiddle),\n        ScaleInteractionPoint.MiddleRight(targetedShapeId, right, verticalMiddle),\n        ScaleInteractionPoint.BottomLeft(targetedShapeId, left, bottom),\n        ScaleInteractionPoint.BottomMiddle(targetedShapeId, horizontalMiddle, bottom),\n        ScaleInteractionPoint.BottomRight(targetedShapeId, right, bottom)\n    )\n}\n","package mono.shape.selection\n\nimport mono.livedata.LiveData\nimport mono.livedata.MutableLiveData\nimport mono.shape.shape.AbstractShape\n\n/**\n * A model class to manage selected shapes and render the selection bound.\n */\nclass SelectedShapeManager {\n\n    private val selectedShapesMutableLiveData: MutableLiveData<Set<AbstractShape>> =\n        MutableLiveData(emptySet())\n    val selectedShapesLiveData: LiveData<Set<AbstractShape>> = selectedShapesMutableLiveData\n\n    val selectedShapes: Set<AbstractShape>\n        get() = selectedShapesLiveData.value\n\n    fun addSelectedShape(shape: AbstractShape) {\n        selectedShapesMutableLiveData.value += shape\n    }\n\n    fun toggleSelection(shape: AbstractShape) {\n        val selectedShapes = if (shape in selectedShapes) {\n            selectedShapes - shape\n        } else {\n            selectedShapes + shape\n        }\n        selectedShapesMutableLiveData.value = selectedShapes\n    }\n\n    fun clearSelectedShapes() {\n        selectedShapesMutableLiveData.value = emptySet()\n    }\n}\n","package mono.shape.serialization\n\nimport kotlinx.serialization.decodeFromString\nimport kotlinx.serialization.encodeToString\nimport kotlinx.serialization.json.Json\n\n/**\n * An util object for serializing shape to Json and load shape from Json\n */\nobject ShapeSerializationUtil {\n    fun toJson(serializableShape: AbstractSerializableShape): String =\n        Json.encodeToString(serializableShape)\n\n    fun fromJson(jsonString: String): AbstractSerializableShape? = try {\n        Json.decodeFromString(jsonString)\n    } catch (e: Exception) {\n        console.error(\"Error while restoring shapes\")\n        console.error(e)\n        null\n    }\n}\n","package mono.shape\n\nimport mono.livedata.LiveData\nimport mono.livedata.MutableLiveData\nimport mono.shape.extra.LineExtra\nimport mono.shape.extra.RectangleExtra\nimport mono.shape.extra.manager.predefined.PredefinedAnchorChar\nimport mono.shape.extra.manager.predefined.PredefinedRectangleFillStyle\nimport mono.shape.extra.manager.predefined.PredefinedStraightStrokeStyle\nimport mono.shape.extra.style.AnchorChar\nimport mono.shape.extra.style.RectangleFillStyle\nimport mono.shape.extra.style.StraightStrokeDashPattern\nimport mono.shape.extra.style.StraightStrokeStyle\nimport mono.shape.extra.style.TextAlign\n\n/**\n * A manager class for managing shape extras\n */\nobject ShapeExtraManager {\n    var defaultRectangleExtra: RectangleExtra = RectangleExtra(\n        isFillEnabled = false,\n        userSelectedFillStyle = PredefinedRectangleFillStyle.PREDEFINED_STYLES[0],\n        isBorderEnabled = true,\n        userSelectedBorderStyle = PredefinedStraightStrokeStyle.PREDEFINED_STYLES[0],\n        dashPattern = StraightStrokeDashPattern.SOLID\n    )\n        private set\n\n    var defaultLineExtra: LineExtra = LineExtra(\n        isStrokeEnabled = true,\n        PredefinedStraightStrokeStyle.PREDEFINED_STYLES[0],\n\n        isStartAnchorEnabled = false,\n        userSelectedStartAnchor = PredefinedAnchorChar.PREDEFINED_ANCHOR_CHARS[0],\n\n        isEndAnchorEnabled = false,\n        userSelectedEndAnchor = PredefinedAnchorChar.PREDEFINED_ANCHOR_CHARS[0],\n\n        dashPattern = StraightStrokeDashPattern.SOLID\n    )\n        private set\n\n    var defaultTextAlign: TextAlign =\n        TextAlign(TextAlign.HorizontalAlign.MIDDLE, TextAlign.VerticalAlign.MIDDLE)\n        private set\n\n    private val defaultExtraStateUpdateMutableLiveData = MutableLiveData(Unit)\n    val defaultExtraStateUpdateLiveData: LiveData<Unit> = defaultExtraStateUpdateMutableLiveData\n\n    fun setDefaultValues(\n        isFillEnabled: Boolean? = null,\n        fillStyleId: String? = null,\n\n        isBorderEnabled: Boolean? = null,\n        borderStyleId: String? = null,\n\n        isLineStrokeEnabled: Boolean? = null,\n        lineStrokeStyleId: String? = null,\n\n        dashPattern: StraightStrokeDashPattern? = null,\n\n        isStartHeadAnchorCharEnabled: Boolean? = null,\n        startHeadAnchorCharId: String? = null,\n\n        isEndHeadAnchorCharEnabled: Boolean? = null,\n        endHeadAnchorCharId: String? = null,\n\n        textHorizontalAlign: TextAlign.HorizontalAlign? = null,\n        textVerticalAlign: TextAlign.VerticalAlign? = null\n    ) {\n        defaultRectangleExtra = RectangleExtra(\n            isFillEnabled ?: defaultRectangleExtra.isFillEnabled,\n            getRectangleFillStyle(fillStyleId),\n            isBorderEnabled ?: defaultRectangleExtra.isBorderEnabled,\n            getRectangleBorderStyle(borderStyleId),\n            dashPattern ?: defaultRectangleExtra.dashPattern\n        )\n\n        defaultLineExtra = LineExtra(\n            isStrokeEnabled = isLineStrokeEnabled ?: defaultLineExtra.isStrokeEnabled,\n            userSelectedStrokeStyle = getLineStrokeStyle(lineStrokeStyleId),\n\n            isStartAnchorEnabled = isStartHeadAnchorCharEnabled\n                ?: defaultLineExtra.isStartAnchorEnabled,\n            userSelectedStartAnchor = getStartHeadAnchorChar(startHeadAnchorCharId),\n\n            isEndAnchorEnabled = isEndHeadAnchorCharEnabled ?: defaultLineExtra.isEndAnchorEnabled,\n            userSelectedEndAnchor = getEndHeadAnchorChar(endHeadAnchorCharId),\n\n            dashPattern = StraightStrokeDashPattern.SOLID\n        )\n\n        defaultTextAlign = TextAlign(\n            textHorizontalAlign ?: defaultTextAlign.horizontalAlign,\n            textVerticalAlign ?: defaultTextAlign.verticalAlign\n        )\n\n        defaultExtraStateUpdateMutableLiveData.value = Unit\n    }\n\n    fun getRectangleFillStyle(\n        id: String?,\n        default: RectangleFillStyle = defaultRectangleExtra.userSelectedFillStyle\n    ): RectangleFillStyle = PredefinedRectangleFillStyle.PREDEFINED_STYLE_MAP[id] ?: default\n\n    fun getAllPredefinedRectangleFillStyles(): List<RectangleFillStyle> =\n        PredefinedRectangleFillStyle.PREDEFINED_STYLES\n\n    fun getRectangleBorderStyle(\n        id: String?,\n        default: StraightStrokeStyle = defaultRectangleExtra.userSelectedBorderStyle\n    ): StraightStrokeStyle = PredefinedStraightStrokeStyle.PREDEFINED_STYLE_MAP[id] ?: default\n\n    fun getLineStrokeStyle(\n        id: String?,\n        default: StraightStrokeStyle = defaultLineExtra.userSelectedStrokeStyle\n    ): StraightStrokeStyle = PredefinedStraightStrokeStyle.PREDEFINED_STYLE_MAP[id] ?: default\n\n    fun getAllPredefinedStrokeStyles(): List<StraightStrokeStyle> =\n        PredefinedStraightStrokeStyle.PREDEFINED_STYLES\n\n    fun getStartHeadAnchorChar(\n        id: String?,\n        default: AnchorChar = defaultLineExtra.userSelectedStartAnchor\n    ): AnchorChar = PredefinedAnchorChar.PREDEFINED_ANCHOR_CHAR_MAP[id] ?: default\n\n    fun getEndHeadAnchorChar(\n        id: String?,\n        default: AnchorChar = defaultLineExtra.userSelectedEndAnchor\n    ): AnchorChar = PredefinedAnchorChar.PREDEFINED_ANCHOR_CHAR_MAP[id] ?: default\n\n    fun getAllPredefinedAnchorChars(): List<AnchorChar> =\n        PredefinedAnchorChar.PREDEFINED_ANCHOR_CHARS\n}\n","package mono.shape\n\nimport mono.livedata.LiveData\nimport mono.livedata.MutableLiveData\nimport mono.shape.command.AddShape\nimport mono.shape.command.Command\nimport mono.shape.command.GroupShapes\nimport mono.shape.command.RemoveShape\nimport mono.shape.command.Ungroup\nimport mono.shape.shape.AbstractShape\nimport mono.shape.shape.Group\nimport mono.shape.shape.RootGroup\n\n/**\n * A model class which contains all shapes of the app and also defines all shape handling logics.\n */\nclass ShapeManager {\n    var root: RootGroup = RootGroup(id = null)\n        private set\n    private var allShapeMap: MutableMap<String, AbstractShape> = mutableMapOf(root.id to root)\n\n    /**\n     * Reflect the version of the root through live data. The other components are able to observe\n     * this version to decide update internally.\n     */\n    private val versionMutableLiveData: MutableLiveData<Int> = MutableLiveData(root.versionCode)\n    val versionLiveData: LiveData<Int> = versionMutableLiveData\n\n    init {\n        replaceRoot(root)\n    }\n\n    /**\n     * Replace [root] with [newRoot].\n     * This also wipe current stored shapes with shapes in new root.\n     */\n    fun replaceRoot(newRoot: RootGroup) {\n        val currentVersion = root.versionCode\n        root = newRoot\n\n        allShapeMap = createAllShapeMap(newRoot)\n\n        versionMutableLiveData.value =\n            if (currentVersion == newRoot.versionCode) currentVersion - 1 else newRoot.versionCode\n    }\n\n    private fun createAllShapeMap(group: Group): MutableMap<String, AbstractShape> {\n        val map: MutableMap<String, AbstractShape> = mutableMapOf()\n        map[group.id] = group\n        createAllShapeMapRecursive(group, map)\n        return map\n    }\n\n    private fun createAllShapeMapRecursive(group: Group, map: MutableMap<String, AbstractShape>) {\n        for (shape in group.items) {\n            map[shape.id] = shape\n            if (shape is Group) {\n                createAllShapeMapRecursive(group, map)\n            }\n        }\n    }\n\n    fun execute(command: Command) {\n        val affectedParent = command.getDirectAffectedParent(this) ?: return\n        val allAncestors = affectedParent.getAllAncestors()\n        val currentVersion = affectedParent.versionCode\n\n        command.execute(this, affectedParent)\n\n        if (currentVersion == affectedParent.versionCode && affectedParent.id in allShapeMap) {\n            return\n        }\n        for (parent in allAncestors) {\n            parent.update { true }\n        }\n        versionMutableLiveData.value = root.versionCode\n    }\n\n    internal fun getGroup(shapeId: String?): Group? =\n        if (shapeId == null) root else allShapeMap[shapeId] as? Group\n\n    fun getShape(shapeId: String): AbstractShape? = allShapeMap[shapeId]\n\n    internal fun register(shape: AbstractShape) {\n        allShapeMap[shape.id] = shape\n    }\n\n    internal fun unregister(shape: AbstractShape) {\n        allShapeMap.remove(shape.id)\n    }\n\n    private fun Group.getAllAncestors(): List<Group> {\n        val result = mutableListOf<Group>()\n        var parent = allShapeMap[parentId] as? Group\n        while (parent != null) {\n            result.add(parent)\n            parent = allShapeMap[parent.parentId] as? Group\n        }\n        return result\n    }\n}\n\nfun ShapeManager.add(shape: AbstractShape) = execute(AddShape(shape))\n\nfun ShapeManager.remove(shape: AbstractShape?) {\n    if (shape != null) {\n        execute(RemoveShape(shape))\n    }\n}\n\nfun ShapeManager.group(sameParentShapes: List<AbstractShape>) =\n    execute(GroupShapes(sameParentShapes))\n\nfun ShapeManager.ungroup(group: Group) = execute(Ungroup(group))\n","package mono.shape.command\n\nimport mono.graphics.geo.Rect\nimport mono.shape.ShapeManager\nimport mono.shape.extra.ShapeExtra\nimport mono.shape.shape.AbstractShape\nimport mono.shape.shape.Group\n\nclass ChangeBound(private val target: AbstractShape, private val newBound: Rect) : Command() {\n    override fun getDirectAffectedParent(shapeManager: ShapeManager): Group? =\n        shapeManager.getGroup(target.parentId)\n\n    override fun execute(shapeManager: ShapeManager, parent: Group) {\n        val currentVersion = target.versionCode\n        target.setBound(newBound)\n        if (currentVersion != target.versionCode) {\n            parent.update { true }\n        }\n    }\n}\n\nclass ChangeExtra(\n    private val target: AbstractShape,\n    private val newExtra: ShapeExtra\n) : Command() {\n    override fun getDirectAffectedParent(shapeManager: ShapeManager): Group? =\n        shapeManager.getGroup(target.parentId)\n\n    override fun execute(shapeManager: ShapeManager, parent: Group) {\n        val currentVersion = target.versionCode\n        target.setExtra(newExtra)\n        if (currentVersion != target.versionCode) {\n            parent.update { true }\n        }\n    }\n}\n","package mono.shape.command\n\nimport mono.graphics.geo.Point\nimport mono.shape.ShapeManager\nimport mono.shape.shape.Group\nimport mono.shape.shape.Line\n\n/**\n * A [Command] for changing Line shape's Anchors.\n */\nclass MoveLineAnchor(\n    private val target: Line,\n    private val anchorPointUpdate: Line.AnchorPointUpdate,\n    private val isReducedRequired: Boolean\n) : Command() {\n    override fun getDirectAffectedParent(shapeManager: ShapeManager): Group? =\n        shapeManager.getGroup(target.parentId)\n\n    override fun execute(shapeManager: ShapeManager, parent: Group) {\n        val currentVersion = target.versionCode\n        target.moveAnchorPoint(anchorPointUpdate, isReducedRequired)\n        parent.update { currentVersion != target.versionCode }\n    }\n}\n\n/**\n * A [Command] for updating Line shape's edges.\n */\nclass MoveLineEdge(\n    private val target: Line,\n    private val edgeId: Int,\n    private val point: Point,\n    private val isReducedRequired: Boolean\n) : Command() {\n    override fun getDirectAffectedParent(shapeManager: ShapeManager): Group? =\n        shapeManager.getGroup(target.parentId)\n\n    override fun execute(shapeManager: ShapeManager, parent: Group) {\n        val currentVersion = target.versionCode\n        target.moveEdge(edgeId, point, isReducedRequired)\n        parent.update { currentVersion != target.versionCode }\n    }\n}\n","package mono.shape.command\n\nimport mono.shape.ShapeManager\nimport mono.shape.list.QuickList\nimport mono.shape.remove\nimport mono.shape.shape.AbstractShape\nimport mono.shape.shape.Group\nimport mono.shape.ungroup\n\n/**\n * A [Command] for adding new shape into [ShapeManager].\n */\nclass AddShape(private val shape: AbstractShape) : Command() {\n    override fun getDirectAffectedParent(shapeManager: ShapeManager): Group? =\n        shapeManager.getGroup(shape.parentId)\n\n    override fun execute(shapeManager: ShapeManager, parent: Group) {\n        parent.add(shape)\n        shape.parentId = parent.id\n        shapeManager.register(shape)\n    }\n}\n\n/**\n * A [Command] for removing a shape from [ShapeManager].\n */\nclass RemoveShape(private val shape: AbstractShape) : Command() {\n\n    override fun getDirectAffectedParent(shapeManager: ShapeManager): Group? =\n        shapeManager.getGroup(shape.parentId)\n\n    override fun execute(shapeManager: ShapeManager, parent: Group) {\n        // TODO: This hasn't cleaned group's items. Fix this\n        parent.remove(shape)\n        shapeManager.unregister(shape)\n\n        if (parent == shapeManager.root) {\n            return\n        }\n        when (parent.itemCount) {\n            1 -> shapeManager.ungroup(parent)\n            0 -> shapeManager.remove(parent)\n        }\n    }\n}\n\n/**\n * A [Command] for grouping shapes.\n */\nclass GroupShapes(private val sameParentShapes: List<AbstractShape>) : Command() {\n    override fun getDirectAffectedParent(shapeManager: ShapeManager): Group? {\n        if (sameParentShapes.size < 2) {\n            // No group 1 or 0 items\n            return null\n        }\n        val parentId = sameParentShapes.first().parentId\n        if (sameParentShapes.any { it.parentId != parentId }) {\n            // No group cross group items\n            return null\n        }\n        return shapeManager.getGroup(parentId)\n    }\n\n    override fun execute(shapeManager: ShapeManager, parent: Group) {\n        val group = Group(parentId = parent.id)\n        parent.add(group, QuickList.AddPosition.After(sameParentShapes.last()))\n        shapeManager.register(group)\n\n        for (shape in sameParentShapes) {\n            parent.remove(shape)\n            shape.parentId = group.id\n            group.add(shape)\n        }\n    }\n}\n\n/**\n * A [Command] for decomposing a [Group].\n */\nclass Ungroup(private val group: Group) : Command() {\n    override fun getDirectAffectedParent(shapeManager: ShapeManager): Group? =\n        shapeManager.getGroup(group.parentId)\n\n    override fun execute(shapeManager: ShapeManager, parent: Group) {\n        for (shape in group.items.reversed()) {\n            group.remove(shape)\n            shape.parentId = null\n            parent.add(shape, QuickList.AddPosition.After(group))\n        }\n        shapeManager.remove(group)\n    }\n}\n\nclass ChangeOrder(\n    private val shape: AbstractShape,\n    private val changeOrderType: ChangeOrderType\n) : Command() {\n    override fun getDirectAffectedParent(shapeManager: ShapeManager): Group? =\n        shapeManager.getGroup(shape.parentId)\n\n    override fun execute(shapeManager: ShapeManager, parent: Group) =\n        parent.changeOrder(shape, changeOrderType.orderType)\n\n    enum class ChangeOrderType(internal val orderType: QuickList.MoveActionType) {\n        FORWARD(QuickList.MoveActionType.UP),\n        BACKWARD(QuickList.MoveActionType.DOWN),\n        FRONT(QuickList.MoveActionType.TOP),\n        BACK(QuickList.MoveActionType.BOTTOM)\n    }\n}\n","package mono.shape.command\n\nimport mono.shape.ShapeManager\nimport mono.shape.shape.Group\nimport mono.shape.shape.Text\n\n/**\n * A [Command] for changing text for Text shape.\n */\nclass ChangeText(\n    private val target: Text,\n    private val newText: String\n) : Command() {\n    override fun getDirectAffectedParent(shapeManager: ShapeManager): Group? =\n        shapeManager.getGroup(target.parentId)\n\n    override fun execute(shapeManager: ShapeManager, parent: Group) {\n        val currentVersion = target.versionCode\n        target.setText(newText)\n        parent.update { currentVersion != target.versionCode }\n    }\n}\n\n/**\n * A [Command] for making an uneditable text to be editable.\n */\nclass MakeTextEditable(private val target: Text) : Command() {\n    override fun getDirectAffectedParent(shapeManager: ShapeManager): Group? =\n        shapeManager.getGroup(target.parentId)\n\n    override fun execute(shapeManager: ShapeManager, parent: Group) {\n        val currentVersion = target.versionCode\n        target.makeTextEditable()\n        parent.update { currentVersion != target.versionCode }\n    }\n}\n\n/**\n * A [Command] for updating text shape's text editing mode.\n */\nclass UpdateTextEditingMode(\n    private val target: Text,\n    private val isEditing: Boolean\n) : Command() {\n    override fun getDirectAffectedParent(shapeManager: ShapeManager): Group? =\n        shapeManager.getGroup(target.parentId)\n\n    override fun execute(shapeManager: ShapeManager, parent: Group) {\n        val currentVersion = target.versionCode\n        target.setTextEditingMode(isEditing)\n        parent.update { currentVersion != target.versionCode }\n    }\n}\n","package mono.shape.extra\n\nimport mono.shape.ShapeExtraManager\nimport mono.shape.extra.style.AnchorChar\nimport mono.shape.extra.style.StraightStrokeDashPattern\nimport mono.shape.extra.style.StraightStrokeStyle\nimport mono.shape.serialization.SerializableLine\n\n/**\n * A [ShapeExtra] for [mono.shape.shape.Line].\n */\ndata class LineExtra(\n    val isStrokeEnabled: Boolean,\n    val userSelectedStrokeStyle: StraightStrokeStyle,\n    val isStartAnchorEnabled: Boolean,\n    val userSelectedStartAnchor: AnchorChar,\n    val isEndAnchorEnabled: Boolean,\n    val userSelectedEndAnchor: AnchorChar,\n    val dashPattern: StraightStrokeDashPattern\n) : ShapeExtra() {\n\n    val startAnchor: AnchorChar?\n        get() = userSelectedStartAnchor.takeIf { isStartAnchorEnabled }\n    val endAnchor: AnchorChar?\n        get() = userSelectedEndAnchor.takeIf { isEndAnchorEnabled }\n\n    val strokeStyle: StraightStrokeStyle?\n        get() = userSelectedStrokeStyle.takeIf { isStrokeEnabled }\n\n    constructor(serializableExtra: SerializableLine.SerializableExtra) : this(\n        serializableExtra.isStrokeEnabled,\n        ShapeExtraManager.getLineStrokeStyle(serializableExtra.userSelectedStrokeStyleId),\n\n        serializableExtra.isStartAnchorEnabled,\n        ShapeExtraManager.getStartHeadAnchorChar(serializableExtra.userSelectedStartAnchorId),\n\n        serializableExtra.isEndAnchorEnabled,\n        ShapeExtraManager.getEndHeadAnchorChar(serializableExtra.userSelectedEndAnchorId),\n\n        StraightStrokeDashPattern.fromSerializableValue(serializableExtra.dashPattern)\n    )\n\n    fun toSerializableExtra(): SerializableLine.SerializableExtra =\n        SerializableLine.SerializableExtra(\n            isStrokeEnabled = isStrokeEnabled,\n            userSelectedStrokeStyleId = userSelectedStrokeStyle.id,\n            isStartAnchorEnabled = isStartAnchorEnabled,\n            userSelectedStartAnchorId = userSelectedStartAnchor.id,\n            isEndAnchorEnabled = isEndAnchorEnabled,\n            userSelectedEndAnchorId = userSelectedEndAnchor.id,\n            dashPattern = dashPattern.toSerializableValue()\n        )\n}\n","package mono.shape.extra\n\nimport mono.shape.ShapeExtraManager\nimport mono.shape.extra.style.RectangleFillStyle\nimport mono.shape.extra.style.StraightStrokeDashPattern\nimport mono.shape.extra.style.StraightStrokeStyle\nimport mono.shape.serialization.SerializableRectangle\n\n/**\n * A [ShapeExtra] for [mono.shape.shape.Rectangle]\n */\ndata class RectangleExtra(\n    val isFillEnabled: Boolean,\n    val userSelectedFillStyle: RectangleFillStyle,\n    val isBorderEnabled: Boolean,\n    val userSelectedBorderStyle: StraightStrokeStyle,\n    val dashPattern: StraightStrokeDashPattern\n) : ShapeExtra() {\n    val fillStyle: RectangleFillStyle?\n        get() = if (isFillEnabled) userSelectedFillStyle else null\n\n    val strokeStyle: StraightStrokeStyle?\n        get() = if (isBorderEnabled) userSelectedBorderStyle else null\n\n    constructor(serializableExtra: SerializableRectangle.SerializableExtra) : this(\n        serializableExtra.isFillEnabled,\n        ShapeExtraManager.getRectangleFillStyle(serializableExtra.userSelectedFillStyleId),\n        serializableExtra.isBorderEnabled,\n        ShapeExtraManager.getRectangleBorderStyle(serializableExtra.userSelectedBorderStyleId),\n        StraightStrokeDashPattern.fromSerializableValue(serializableExtra.dashPattern)\n    )\n\n    fun toSerializableExtra(): SerializableRectangle.SerializableExtra =\n        SerializableRectangle.SerializableExtra(\n            isFillEnabled = isFillEnabled,\n            userSelectedFillStyleId = userSelectedFillStyle.id,\n            isBorderEnabled = isBorderEnabled,\n            userSelectedBorderStyleId = userSelectedBorderStyle.id,\n            dashPattern = dashPattern.toSerializableValue()\n        )\n}\n","package mono.shape.extra\n\n/**\n * An sealed interface for extra attributes for shapes\n */\nsealed class ShapeExtra\n\nobject NoExtra : ShapeExtra()\n","package mono.shape.extra\n\nimport mono.shape.ShapeExtraManager\nimport mono.shape.extra.style.TextAlign\nimport mono.shape.serialization.SerializableText\n\n/**\n * A [ShapeExtra] for [mono.shape.shape.Text].\n */\ndata class TextExtra(\n    val boundExtra: RectangleExtra,\n    val textAlign: TextAlign\n) : ShapeExtra() {\n\n    constructor(serializableExtra: SerializableText.SerializableExtra) : this(\n        RectangleExtra(serializableExtra.boundExtra),\n        TextAlign(serializableExtra.textHorizontalAlign, serializableExtra.textVerticalAlign)\n    )\n\n    fun toSerializableExtra(): SerializableText.SerializableExtra =\n        SerializableText.SerializableExtra(\n            boundExtra.toSerializableExtra(),\n            textAlign.horizontalAlign.ordinal,\n            textAlign.verticalAlign.ordinal\n        )\n\n    fun hasBorder(): Boolean = boundExtra.isBorderEnabled\n\n    companion object {\n        val NO_BOUND = TextExtra(\n            boundExtra = ShapeExtraManager.defaultRectangleExtra.copy(\n                isFillEnabled = false,\n                isBorderEnabled = false\n            ),\n            textAlign = TextAlign(TextAlign.HorizontalAlign.LEFT, TextAlign.VerticalAlign.TOP)\n        )\n\n        fun withDefault(): TextExtra = TextExtra(\n            boundExtra = ShapeExtraManager.defaultRectangleExtra,\n            textAlign = ShapeExtraManager.defaultTextAlign\n        )\n    }\n}\n","package mono.shape.extra.style\n\n/**\n * A model for defining text aligns.\n */\ndata class TextAlign(val horizontalAlign: HorizontalAlign, val verticalAlign: VerticalAlign) {\n    constructor(\n        textHorizontalAlign: Int,\n        textVerticalAlign: Int\n    ) : this(HorizontalAlign.ALL[textHorizontalAlign], VerticalAlign.ALL[textVerticalAlign])\n\n    enum class HorizontalAlign {\n        LEFT, MIDDLE, RIGHT;\n\n        companion object {\n            val ALL = values()\n        }\n    }\n\n    enum class VerticalAlign {\n        TOP, MIDDLE, BOTTOM;\n\n        companion object {\n            val ALL = values()\n        }\n    }\n}\n","package mono.shape.extra.manager.predefined\n\nimport mono.shape.extra.style.AnchorChar\n\n/**\n * An object for listing all predefined anchor chars.\n */\ninternal object PredefinedAnchorChar {\n    val PREDEFINED_ANCHOR_CHARS = listOf(\n        AnchorChar(id = \"A1\", displayName = \"▶\", '◀', '▶', '▲', '▼'),\n        AnchorChar(id = \"A2\", displayName = \"■\", '■'),\n        AnchorChar(id = \"A3\", displayName = \"○\", '○'),\n        AnchorChar(id = \"A4\", displayName = \"◎\", '◎'),\n        AnchorChar(id = \"A5\", displayName = \"●\", '●')\n    )\n\n    val PREDEFINED_ANCHOR_CHAR_MAP = PREDEFINED_ANCHOR_CHARS.associateBy { it.id }\n}\n","package mono.shape.extra.manager.predefined\n\nimport mono.common.Characters\nimport mono.graphics.bitmap.drawable.CharDrawable\nimport mono.shape.extra.style.RectangleFillStyle\n\n/**\n * An object for listing all predefined rectangle fill styles.\n */\ninternal object PredefinedRectangleFillStyle {\n    val NOFILLED_STYLE = RectangleFillStyle(\n        id = \"F0\",\n        displayName = \"No Fill\",\n        CharDrawable(Characters.TRANSPARENT_CHAR)\n    )\n\n    val PREDEFINED_STYLES = listOf(\n        RectangleFillStyle(\n            id = \"F1\",\n            displayName = \" \",\n            CharDrawable(' ')\n        ),\n        RectangleFillStyle(\n            id = \"F2\",\n            displayName = \"█\",\n            CharDrawable('█')\n        ),\n        RectangleFillStyle(\n            id = \"F3\",\n            displayName = \"▒\",\n            CharDrawable('▒')\n        ),\n        RectangleFillStyle(\n            id = \"F4\",\n            displayName = \"░\",\n            CharDrawable('░')\n        ),\n        RectangleFillStyle(\n            id = \"F5\",\n            displayName = \"▚\",\n            CharDrawable('▚')\n        )\n    )\n\n    val PREDEFINED_STYLE_MAP = PREDEFINED_STYLES.associateBy { it.id }\n}\n","package mono.shape.extra.manager.predefined\n\nimport mono.common.Characters\nimport mono.shape.extra.style.StraightStrokeStyle\n\n/**\n * An object for listing all predefined [mono.shape.extra.manager.model.StraightStrokeStyle]\n */\nobject PredefinedStraightStrokeStyle {\n    val NO_STROKE = StraightStrokeStyle(\n        id = \"S0\",\n        displayName = \"No Stroke\",\n        horizontal = Characters.HALF_TRANSPARENT_CHAR,\n        vertical = Characters.HALF_TRANSPARENT_CHAR,\n        downLeft = Characters.HALF_TRANSPARENT_CHAR,\n        upRight = Characters.HALF_TRANSPARENT_CHAR,\n        upLeft = Characters.HALF_TRANSPARENT_CHAR,\n        downRight = Characters.HALF_TRANSPARENT_CHAR\n    )\n\n    val PREDEFINED_STYLES = listOf(\n        StraightStrokeStyle(\n            id = \"S1\",\n            displayName = \"─\",\n            horizontal = '─',\n            vertical = '│',\n            downLeft = '┐',\n            upRight = '┌',\n            upLeft = '┘',\n            downRight = '└'\n        ),\n        StraightStrokeStyle(\n            id = \"S2\",\n            displayName = \"━\",\n            horizontal = '━',\n            vertical = '┃',\n            downLeft = '┓',\n            upRight = '┏',\n            upLeft = '┛',\n            downRight = '┗'\n        ),\n        StraightStrokeStyle(\n            id = \"S3\",\n            displayName = \"═\",\n            horizontal = '═',\n            vertical = '║',\n            downLeft = '╗',\n            upRight = '╔',\n            upLeft = '╝',\n            downRight = '╚'\n        )\n    )\n\n    val PREDEFINED_STYLE_MAP: Map<String, StraightStrokeStyle> =\n        PREDEFINED_STYLES.associateBy { it.id }\n}\n","package mono.shape.extra.style\n\n/**\n * A class for defining an anchor end-char.\n *\n * @param id is the key for retrieving predefined [AnchorChar] when serialization.\n *\n * @param displayName is the text visible on the UI tool for selection.\n */\nclass AnchorChar(\n    val id: String,\n    val displayName: String,\n    val left: Char,\n    val right: Char,\n    val top: Char,\n    val bottom: Char\n) {\n\n    constructor(id: String, displayName: String, all: Char) :\n        this(id, displayName, all, all, all, all)\n\n    constructor(id: String, displayName: String, horizontal: Char, vertical: Char) :\n        this(id, displayName, horizontal, horizontal, vertical, vertical)\n}\n","package mono.shape.extra.style\n\nimport mono.graphics.bitmap.drawable.Drawable\n\n/**\n * A class for defining a fill style for rectangle.\n *\n * @param id is the key for retrieving predefined [RectangleFillStyle] when serialization.\n * @param displayName is the text visible on the UI tool for selection.\n */\nclass RectangleFillStyle(\n    val id: String,\n    val displayName: String,\n    val drawable: Drawable\n)\n","package mono.shape.extra.style\n\n/**\n * A class to define dash pattern of straight stroke.\n * @param dash is the solid of dash, min value is 1\n */\ndata class StraightStrokeDashPattern(val dash: Int, val gap: Int, val offset: Int) {\n\n    private val adjustedSegment: Int = dash.coerceAtLeast(1)\n    private val adjustedGap: Int = gap.coerceAtLeast(0)\n    private val totalLength: Int = adjustedSegment + adjustedGap\n\n    // Adjust offset to be in [0, length). Calculation for `isGap` does not work well with\n    // negative number\n    private val adjustedOffset: Int = ((offset % totalLength) + totalLength) % totalLength\n\n    fun isGap(index: Int): Boolean =\n        if (adjustedGap != 0) (index + adjustedOffset) % totalLength >= adjustedSegment else false\n\n    fun toSerializableValue(): String = \"$dash|$gap|$offset\"\n\n    companion object {\n        val SOLID = StraightStrokeDashPattern(dash = 1, gap = 0, offset = 0)\n\n        fun fromSerializableValue(value: String): StraightStrokeDashPattern {\n            val (dash, gap, offset) = value.split('|')\n            return StraightStrokeDashPattern(\n                dash.toIntOrNull() ?: 1,\n                gap.toIntOrNull() ?: 0,\n                offset.toIntOrNull() ?: 0\n            )\n        }\n    }\n}\n","package mono.shape.extra.style\n\n/**\n * A class for defining a stroke style of straight line.\n */\nclass StraightStrokeStyle(\n    val id: String,\n    val displayName: String,\n    val horizontal: Char,\n    val vertical: Char,\n    val downLeft: Char,\n    val upRight: Char,\n    val upLeft: Char,\n    val downRight: Char\n)\n","package mono.shape.list\n\n/**\n * A collection which works similar to [LinkedHashMap] by making accessing item fast while keeping\n * the order of items based on add-sequence.\n * This also supports move up/down/top/bottom of the list for an item as well as adding item into\n * the head or the tail or after an specific item.\n */\ninternal class QuickList<T : QuickList.Identifier> : Collection<T> {\n    private val linkedList: DoubleLinkedList<T> = DoubleLinkedList()\n    private val map: MutableMap<String, Node<T>> = mutableMapOf()\n\n    override val size: Int\n        get() = map.size\n\n    override fun contains(element: T): Boolean = element.id in map\n\n    override fun containsAll(elements: Collection<T>): Boolean = elements.all { it in this }\n\n    override fun isEmpty(): Boolean = map.isEmpty()\n\n    override fun iterator(): Iterator<T> = linkedList.iterator()\n\n    fun add(element: T, position: AddPosition = AddPosition.Last): Boolean {\n        if (element in this) {\n            return false\n        }\n\n        val preNode = when (position) {\n            AddPosition.Last -> linkedList.tail.pre\n            AddPosition.First -> linkedList.head\n            is AddPosition.After -> map[position.identifier.id]\n        } ?: return false\n        val node = linkedList.add(element, preNode)\n        map[element.id] = node\n\n        return true\n    }\n\n    fun addAll(collection: Collection<T>, position: AddPosition = AddPosition.Last) {\n        var previous = position\n        for (element in collection) {\n            add(element, previous)\n            previous = when (previous) {\n                AddPosition.Last -> AddPosition.Last\n                is AddPosition.After,\n                AddPosition.First -> AddPosition.After(element)\n            }\n        }\n    }\n\n    fun remove(identifier: Identifier): T? {\n        val node = map.remove(identifier.id) ?: return null\n        linkedList.remove(node)\n\n        return node.value\n    }\n\n    fun removeAll(): List<T> {\n        val result = linkedList.iterator().asSequence().toList()\n        linkedList.clear()\n        map.clear()\n        return result\n    }\n\n    operator fun get(id: String): T? = map[id]?.value\n\n    fun move(identifier: Identifier, moveActionType: MoveActionType): Boolean {\n        if (size < 2) {\n            return false\n        }\n\n        val node = map[identifier.id] ?: return false\n        return linkedList.move(node, moveActionType)\n    }\n\n    interface Identifier {\n        val id: String\n    }\n\n    sealed class AddPosition {\n        object First : AddPosition()\n        object Last : AddPosition()\n        data class After(val identifier: Identifier) : AddPosition()\n    }\n\n    enum class MoveActionType {\n        UP, DOWN, TOP, BOTTOM\n    }\n\n    private class Node<T>(var pre: Node<T>?, var next: Node<T>?, val value: T?)\n\n    private class DoubleLinkedList<T> {\n        // Publishing head and tail is unsafe. However, since they are only used under QuickList\n        // context, this is acceptable. head and tail's next and pre pointers must not be changed\n        // outside this class.\n        val head: Node<T> = Node(null, null, null)\n        val tail: Node<T> = Node(null, null, null)\n\n        init {\n            head.next = tail\n            tail.pre = head\n        }\n\n        fun add(value: T, previousNode: Node<T>): Node<T> {\n            val afterNode = previousNode.next\n            val node = Node(previousNode, afterNode, value)\n            previousNode.next = node\n            afterNode?.pre = node\n            return node\n        }\n\n        fun remove(node: Node<T>) {\n            val previousNode = node.pre\n            val afterNode = node.next\n            previousNode?.next = afterNode\n            afterNode?.pre = previousNode\n            node.next = null\n            node.pre = null\n        }\n\n        fun clear() {\n            head.next?.pre = null\n            tail.pre?.next = null\n            head.next = tail\n            tail.pre = head\n        }\n\n        fun move(node: Node<T>, moveActionType: MoveActionType): Boolean {\n            val newPreviousNode = when (moveActionType) {\n                MoveActionType.UP -> if (node != tail.pre) node.next else null\n                MoveActionType.TOP -> if (node != tail.pre) tail.pre else null\n                MoveActionType.DOWN -> if (node != head.next) node.pre?.pre else null\n                MoveActionType.BOTTOM -> if (node != head.next) head else null\n            } ?: return false\n\n            remove(node)\n\n            val newNextNode = newPreviousNode.next\n            newPreviousNode.next = node\n            newNextNode?.pre = node\n            node.pre = newPreviousNode\n            node.next = newNextNode\n            return true\n        }\n\n        fun iterator(): Iterator<T> = DoubleLinkedListIterator(head)\n\n        private class DoubleLinkedListIterator<T>(private var head: Node<T>?) : Iterator<T> {\n\n            override fun hasNext(): Boolean {\n                val nextNext = head?.next?.next\n                return nextNext != null\n            }\n\n            override fun next(): T {\n                val result = head?.next\n                head = head?.next\n                return result?.value!!\n            }\n        }\n    }\n}\n","package mono.shape.serialization\n\nimport kotlinx.serialization.SerialName\nimport kotlinx.serialization.Serializable\nimport mono.graphics.geo.DirectedPoint\nimport mono.graphics.geo.Point\nimport mono.graphics.geo.Rect\nimport mono.shape.shape.AbstractShape\n\n@Serializable\nsealed class AbstractSerializableShape {\n    // null for not having id.\n    abstract val id: String?\n    abstract val versionCode: Int\n}\n\n@Serializable\n@SerialName(\"R\")\ndata class SerializableRectangle(\n    @SerialName(\"i\")\n    override val id: String? = null,\n    @SerialName(\"v\")\n    override val versionCode: Int,\n    @SerialName(\"b\")\n    val bound: Rect,\n    @SerialName(\"e\")\n    val extra: SerializableExtra\n) : AbstractSerializableShape() {\n\n    @Serializable\n    data class SerializableExtra(\n        @SerialName(\"fe\")\n        val isFillEnabled: Boolean,\n        @SerialName(\"fu\")\n        val userSelectedFillStyleId: String,\n        @SerialName(\"be\")\n        val isBorderEnabled: Boolean,\n        @SerialName(\"bu\")\n        val userSelectedBorderStyleId: String,\n        @SerialName(\"du\")\n        val dashPattern: String\n    )\n}\n\n@Serializable\n@SerialName(\"T\")\ndata class SerializableText(\n    @SerialName(\"i\")\n    override val id: String? = null,\n    @SerialName(\"v\")\n    override val versionCode: Int = AbstractShape.nextVersionCode(),\n    @SerialName(\"b\")\n    val bound: Rect,\n    @SerialName(\"t\")\n    val text: String,\n    @SerialName(\"e\")\n    val extra: SerializableExtra,\n    @SerialName(\"te\")\n    val isTextEditable: Boolean = true\n) : AbstractSerializableShape() {\n\n    @Serializable\n    data class SerializableExtra(\n        @SerialName(\"be\")\n        val boundExtra: SerializableRectangle.SerializableExtra,\n        @SerialName(\"tha\")\n        val textHorizontalAlign: Int,\n        @SerialName(\"tva\")\n        val textVerticalAlign: Int\n    )\n}\n\n@Serializable\n@SerialName(\"L\")\ndata class SerializableLine(\n    @SerialName(\"i\")\n    override val id: String? = null,\n    @SerialName(\"v\")\n    override val versionCode: Int,\n    @SerialName(\"ps\")\n    val startPoint: DirectedPoint,\n    @SerialName(\"pe\")\n    val endPoint: DirectedPoint,\n    @SerialName(\"jps\")\n    val jointPoints: List<Point>,\n    @SerialName(\"e\")\n    val extra: SerializableExtra,\n    @SerialName(\"em\")\n    val wasMovingEdge: Boolean\n) : AbstractSerializableShape() {\n\n    @Serializable\n    data class SerializableExtra(\n        @SerialName(\"se\")\n        val isStrokeEnabled: Boolean = true,\n        @SerialName(\"su\")\n        val userSelectedStrokeStyleId: String,\n        @SerialName(\"ase\")\n        val isStartAnchorEnabled: Boolean = false,\n        @SerialName(\"asu\")\n        val userSelectedStartAnchorId: String,\n        @SerialName(\"aee\")\n        val isEndAnchorEnabled: Boolean = false,\n        @SerialName(\"aeu\")\n        val userSelectedEndAnchorId: String,\n        @SerialName(\"du\")\n        val dashPattern: String\n    )\n}\n\n@Serializable\n@SerialName(\"G\")\ndata class SerializableGroup(\n    @SerialName(\"i\")\n    override val id: String? = null,\n    @SerialName(\"v\")\n    override val versionCode: Int,\n    @SerialName(\"ss\")\n    val shapes: List<AbstractSerializableShape>\n) : AbstractSerializableShape()\n","package mono.shape.shape\n\nimport mono.graphics.geo.Point\nimport mono.graphics.geo.Rect\nimport mono.shape.extra.NoExtra\nimport mono.shape.extra.ShapeExtra\nimport mono.shape.list.QuickList\nimport mono.shape.serialization.AbstractSerializableShape\nimport mono.uuid.UUID\nimport kotlin.random.Random\n\n/**\n * An abstract class which is used for defining all kinds of shape which are supported by the app.\n * Each shape will be assigned an id which is automatically generated or manually assigned. Two\n * shapes which have the same ID will be considered identical regardless the other attributes of\n * each kinds of shape class.\n *\n * Each shape's attributes might be changed and [versionCode] reflects the update. To ensure the\n * [versionCode]'s value is accurate, all properties modifying must be wrapped inside [update].\n *\n * @param id with null means the id will be automatically generated.\n */\nsealed class AbstractShape(\n    id: String?,\n    internal var parentId: String? = null\n) : QuickList.Identifier {\n    override val id: String = id ?: UUID.generate()\n\n    var versionCode: Int = nextVersionCode()\n        protected set\n    abstract val bound: Rect\n\n    /**\n     * Extra information which is specific to each shape.\n     */\n    open val extra: ShapeExtra = NoExtra\n\n    abstract fun toSerializableShape(isIdIncluded: Boolean): AbstractSerializableShape\n\n    open fun setBound(newBound: Rect) = Unit\n\n    open fun setExtra(newExtra: ShapeExtra) = Unit\n\n    /**\n     * Updates properties of the shape by [action]. The [action] returns true if the shape's\n     * properties are changed.\n     */\n    internal fun update(action: () -> Boolean) {\n        val isChanged = action()\n        if (isChanged) {\n            versionCode = nextVersionCode(versionCode)\n        }\n    }\n\n    open fun contains(point: Point): Boolean = bound.contains(point)\n\n    open fun isOverlapped(rect: Rect): Boolean = bound.isOverlapped(rect)\n\n    companion object {\n        /**\n         * Generates a new version code which is different from [excludedValue].\n         */\n        internal fun nextVersionCode(excludedValue: Int = 0): Int {\n            var nextCode = Random.nextInt()\n            // The probability of a new number is equal to old number is low, therefore, this loop\n            // is short.\n            while (nextCode == excludedValue) {\n                nextCode = Random.nextInt()\n            }\n            return nextCode\n        }\n    }\n}\n","package mono.shape.shape\n\nimport mono.graphics.geo.Rect\nimport mono.shape.list.QuickList\nimport mono.shape.list.QuickList.AddPosition\nimport mono.shape.list.QuickList.MoveActionType\nimport mono.shape.serialization.AbstractSerializableShape\nimport mono.shape.serialization.SerializableGroup\nimport mono.shape.serialization.SerializableLine\nimport mono.shape.serialization.SerializableRectangle\nimport mono.shape.serialization.SerializableText\n\n/**\n * A special shape which manages a collection of shapes.\n */\nopen class Group(\n    id: String? = null,\n    parentId: String?\n) : AbstractShape(id = id, parentId = parentId) {\n    private val quickList: QuickList<AbstractShape> = QuickList()\n    val items: Collection<AbstractShape> = quickList\n    val itemCount: Int get() = items.size\n\n    override val bound: Rect\n        get() {\n            // TODO: Use heap or R-tree to improve performance\n            if (quickList.isEmpty()) {\n                return Rect.ZERO\n            }\n            val left = quickList.minOf { it.bound.left }\n            val right = quickList.maxOf { it.bound.right }\n            val top = quickList.minOf { it.bound.top }\n            val bottom = quickList.maxOf { it.bound.bottom }\n            return Rect.byLTRB(left, top, right, bottom)\n        }\n\n    constructor(\n        serializableGroup: SerializableGroup,\n        parentId: String?\n    ) : this(id = serializableGroup.id, parentId = parentId) {\n        for (serializableShape in serializableGroup.shapes) {\n            addInternal(toShape(id, serializableShape))\n        }\n        versionCode = serializableGroup.versionCode\n    }\n\n    override fun toSerializableShape(isIdIncluded: Boolean): AbstractSerializableShape =\n        SerializableGroup(\n            id.takeIf { isIdIncluded },\n            versionCode,\n            items.map { it.toSerializableShape(isIdIncluded) }\n        )\n\n    internal fun add(shape: AbstractShape, position: AddPosition = AddPosition.Last) = update {\n        addInternal(shape, position)\n    }\n\n    private fun addInternal(\n        shape: AbstractShape,\n        position: AddPosition = AddPosition.Last\n    ): Boolean {\n        if (shape.parentId != null && shape.parentId != id) {\n            return false\n        }\n        shape.parentId = id\n\n        quickList.add(shape, position)\n        return true\n    }\n\n    internal fun remove(shape: AbstractShape) = update {\n        quickList.remove(shape) != null\n    }\n\n    internal fun changeOrder(shape: AbstractShape, moveActionType: MoveActionType) = update {\n        quickList.move(shape, moveActionType)\n    }\n\n    override fun toString(): String {\n        return \"Group($id)\"\n    }\n\n    companion object {\n        fun toShape(parentId: String, serializableShape: AbstractSerializableShape): AbstractShape =\n            when (serializableShape) {\n                is SerializableRectangle -> Rectangle(serializableShape, parentId = parentId)\n                is SerializableText -> Text(serializableShape, parentId = parentId)\n                is SerializableLine -> Line(serializableShape, parentId = parentId)\n                is SerializableGroup -> Group(serializableShape, parentId = parentId)\n            }\n    }\n}\n","package mono.shape.shape\n\nimport mono.graphics.geo.DirectedPoint\nimport mono.graphics.geo.Point\nimport mono.graphics.geo.Rect\nimport mono.shape.ShapeExtraManager\nimport mono.shape.extra.LineExtra\nimport mono.shape.extra.ShapeExtra\nimport mono.shape.serialization.AbstractSerializableShape\nimport mono.shape.serialization.SerializableLine\nimport mono.shape.shape.line.LineHelper\n\n/**\n * A line shape which connects two end-dots with a collection of straight lines.\n *\n * A Line shape is defined by two end points which have direction. The inner algorithm will use the\n * defined direction to generate straight lines by creating joint points.\n * Line shapes are able to be modified by moving end points or moving connecting edges. Once the\n * edge is modified, the line won't depend on seeding direction.\n *\n * First initial line's edges will be decided by the direction inside the two end points\n * Examples\n *\n * 1. Same line\n * Start: (0, 0, Horizontal)\n * End  : (5, 0, Vertical)\n * Result:\n * ```\n * x----x\n * ```\n *\n * 2. Different line\n * 2.1.\n * Start: (0, 0, Horizontal)\n * End  : (5, 3, Vertical)\n * Result:\n * ```\n * x----+\n *      |\n *      |\n *      x\n * ```\n * 2.2.\n * Start: (0, 0, Horizontal)\n * End  : (5, 3, Horizontal)\n * Result:\n * ```\n * x-+\n *   |\n *   |\n *   +--x\n * ```\n * 2.3.\n * Start: (0, 0, Vertical)\n * End  : (5, 3, Horizontal)\n * Result:\n * ```\n * x\n * |\n * |\n * +----x\n * ```\n * 2.4.\n * Start: (0, 0, Vertical)\n * End  : (5, 4, Vertical)\n * Result:\n * ```\n * x\n * |\n * +----+\n *      |\n *      x\n * ```\n */\nclass Line(\n    startPoint: DirectedPoint,\n    endPoint: DirectedPoint,\n    id: String? = null,\n    parentId: String? = null\n) : AbstractShape(id = id, parentId = parentId) {\n\n    var startPoint: DirectedPoint = startPoint\n        private set\n    var endPoint: DirectedPoint = endPoint\n        private set\n\n    private var jointPoints: List<Point> =\n        LineHelper.createJointPoints(listOf(startPoint, endPoint))\n\n    val reducedJoinPoints: List<Point>\n        get() = LineHelper.reduce(jointPoints)\n\n    var edges: List<Edge> = LineHelper.createEdges(jointPoints)\n        private set\n\n    override var extra: LineExtra = ShapeExtraManager.defaultLineExtra\n        private set\n\n    /**\n     * A list of joint points which is determined once an edge is updated.\n     */\n    private var confirmedJointPoints: List<Point> = emptyList()\n\n    override val bound: Rect\n        get() {\n            val points = reducedJoinPoints\n            val left = points.minOf { it.left }\n            val right = points.maxOf { it.left }\n            val top = points.minOf { it.top }\n            val bottom = points.maxOf { it.top }\n            return Rect.byLTRB(left, top, right, bottom)\n        }\n\n    internal constructor(serializableLine: SerializableLine, parentId: String) : this(\n        serializableLine.startPoint,\n        serializableLine.endPoint,\n        id = serializableLine.id,\n        parentId = parentId\n    ) {\n        jointPoints = serializableLine.jointPoints\n        if (serializableLine.wasMovingEdge) {\n            confirmedJointPoints = jointPoints\n        }\n        edges = LineHelper.createEdges(jointPoints)\n        extra = LineExtra(serializableLine.extra)\n        versionCode = serializableLine.versionCode\n    }\n\n    override fun toSerializableShape(isIdIncluded: Boolean): AbstractSerializableShape =\n        SerializableLine(\n            id.takeIf { isIdIncluded },\n            versionCode,\n            startPoint,\n            endPoint,\n            jointPoints,\n            extra.toSerializableExtra(),\n            wasMovingEdge()\n        )\n\n    override fun setBound(newBound: Rect) {\n        val left = jointPoints.minOf { it.left }\n        val top = jointPoints.minOf { it.top }\n        val offsetPoint = Point(newBound.left - left, newBound.top - top)\n        if (offsetPoint.left == 0 && offsetPoint.top == 0) {\n            return\n        }\n        update {\n            startPoint += offsetPoint\n            endPoint += offsetPoint\n            jointPoints = jointPoints.map { it + offsetPoint }\n            confirmedJointPoints = confirmedJointPoints.map { it + offsetPoint }\n            edges = LineHelper.createEdges(jointPoints)\n            true\n        }\n    }\n\n    override fun setExtra(newExtra: ShapeExtra) {\n        if (newExtra !is LineExtra || newExtra == extra) {\n            return\n        }\n        update {\n            extra = newExtra\n            true\n        }\n    }\n\n    /**\n     * Move start point or end point to new location decided by [AnchorPointUpdate.anchor] of\n     * [anchorPointUpdate].\n     * If the line's edges have never been moved, new edges will be decided by new anchor point and\n     * unaffected point with their direction like at the initial step.\n     * Otherwise, the anchor point is just moved to new point.\n     * New point in the middle will be introduced if the new position is not on the same line with\n     * the previous containing edge.\n     *\n     * Examples for moved:\n     * Case 1. Line's edges are never moved: see examples in the class doc\n     * Case 2. Line's edges have been moved\n     * Input\n     * ```\n     * +-------o\n     * ```\n     * Result:\n     * Same line\n     * ```\n     * +---------------x\n     * ```\n     *\n     * 2.2. Different lines\n     * ```\n     * +----------+\n     *            |\n     *            x\n     * ```\n     *\n     */\n    fun moveAnchorPoint(anchorPointUpdate: AnchorPointUpdate, isReduceRequired: Boolean) = update {\n        when (anchorPointUpdate.anchor) {\n            Anchor.START -> startPoint = anchorPointUpdate.point\n            Anchor.END -> endPoint = anchorPointUpdate.point\n        }\n\n        val isEdgeUpdated = confirmedJointPoints.isNotEmpty()\n        val newJointPoints = if (!isEdgeUpdated) {\n            val seedPoints = listOf(startPoint, endPoint)\n            LineHelper.createJointPoints(seedPoints)\n        } else {\n            val newJointPoint = confirmedJointPoints.createNewJointPoint(anchorPointUpdate)\n            confirmedJointPoints.toMutableList().apply {\n                val (anchorIndex, newJointPointIndex) = when (anchorPointUpdate.anchor) {\n                    Anchor.START -> 0 to 1\n                    Anchor.END -> lastIndex to lastIndex\n                }\n                this[anchorIndex] = anchorPointUpdate.point.point\n                if (newJointPoint != null) {\n                    add(newJointPointIndex, newJointPoint)\n                }\n            }\n        }\n        val isUpdated = newJointPoints != jointPoints\n        jointPoints = if (isReduceRequired) LineHelper.reduce(newJointPoints) else newJointPoints\n        if (isReduceRequired && isEdgeUpdated) {\n            confirmedJointPoints = jointPoints\n        }\n        edges = LineHelper.createEdges(jointPoints)\n\n        isUpdated\n    }\n\n    private fun List<Point>.createNewJointPoint(anchorPointUpdate: AnchorPointUpdate): Point? {\n        val (anchorPointIndex, previousPointIndex) = when (anchorPointUpdate.anchor) {\n            Anchor.START -> 0 to 1\n            Anchor.END -> lastIndex to lastIndex - 1\n        }\n        val anchorEndPoint = get(anchorPointIndex)\n        val previousJointPoint = get(previousPointIndex)\n        val updatePoint = anchorPointUpdate.point.point\n\n        val isOnSameLine = LineHelper.isOnStraightLine(\n            anchorEndPoint,\n            previousJointPoint,\n            updatePoint,\n            isInOrderedRequired = false\n        )\n        if (isOnSameLine) {\n            // No new joint point when they are on the same line regardless order. Just move anchor\n            // point\n            return null\n        }\n\n        return if (isHorizontal(anchorEndPoint, previousJointPoint)) {\n            Point(updatePoint.left, anchorEndPoint.top)\n        } else {\n            Point(anchorEndPoint.left, updatePoint.top)\n        }\n    }\n\n    /**\n     * Move the targeted edge by [edgeId] to make its line contains [point].\n     * During moving edge, two anchor points won't be moved.\n     * If [edgeId] is the first or last edge, new edge will be introduced.\n     *\n     * Examples:\n     * 1. Move single edge\n     * ```\n     * x---o---x\n     * ```\n     * Result:\n     * ```\n     * x       x\n     * |       |\n     * +---o---+\n     * ```\n     *\n     * 2. Move 1st/last edge\n     * ```\n     * x----o----+       x---------+\n     *           |                 |\n     *           |                 o\n     *           |                 |\n     *           x                 x\n     * ```\n     * Result:\n     * ```\n     * x                x-----+\n     * |                      |\n     * +---o---+              o\n     *         |              |\n     *         x              +----x\n     * ```\n     * 3. Move edge in the middle\n     * ```\n     * x-------+\n     *         |\n     *         o\n     *         |\n     * x-------+\n     * ```\n     * Result\n     * ```\n     * x--------------+\n     *                |\n     *                o\n     *                |\n     * x--------------+\n     * ```\n     * Once the edge is moved successfully, the line becomes independent from direction in the\n     * stored in two anchor points.\n     *\n     * When reduce move is on ([isReduceRequired]), all adjacent edges which are on the same line\n     * by the same direction will be merged.\n     * For example\n     * ```\n     * 1-----2-----3   ->   1-----------3\n     *\n     * 1-----3-----2   ->   1-----3-----2\n     * ```\n     */\n    fun moveEdge(edgeId: Int, point: Point, isReduceRequired: Boolean) = update {\n        val edgeIndex = edges.indexOfFirst { it.id == edgeId }\n        if (edgeIndex < 0) {\n            return@update false\n        }\n\n        val edge = edges[edgeIndex]\n        val newEdge = edge.translate(point)\n        if (!isReduceRequired && edge == newEdge) {\n            // Skip when reducing is not required and old edge is identical to new edge.\n            return@update false\n        }\n\n        val newJointPoints = jointPoints.toMutableList()\n\n        when {\n            edgeIndex == 0 && edgeIndex == edges.lastIndex -> {\n                newJointPoints.add(1, newEdge.startPoint)\n                newJointPoints.add(2, newEdge.endPoint)\n            }\n            edgeIndex == 0 -> {\n                newJointPoints.add(1, newEdge.startPoint)\n                newJointPoints[2] = newEdge.endPoint\n            }\n            edgeIndex == edges.lastIndex -> {\n                val startPointIndex = newJointPoints.lastIndex - 1\n                newJointPoints[startPointIndex] = newEdge.startPoint\n                newJointPoints.add(startPointIndex + 1, newEdge.endPoint)\n            }\n            else -> {\n                // Just move affected points\n                val startPointIndex = newJointPoints.indexOfFirst { it === edge.startPoint }\n                newJointPoints[startPointIndex] = newEdge.startPoint\n                newJointPoints[startPointIndex + 1] = newEdge.endPoint\n            }\n        }\n\n        val isUpdated = jointPoints != newJointPoints\n        jointPoints = if (isReduceRequired) LineHelper.reduce(newJointPoints) else newJointPoints\n        confirmedJointPoints = jointPoints\n\n        val newEdges = LineHelper.createEdges(jointPoints)\n        if (!isReduceRequired) {\n            val newEdgeIndex = if (edgeIndex == 0) 1 else edgeIndex\n            // Reserve current interacted edge's id.\n            newEdges[newEdgeIndex] = newEdges[newEdgeIndex].copy(id = edge.id)\n        }\n        edges = newEdges\n\n        isUpdated\n    }\n\n    fun getDirection(anchor: Anchor): DirectedPoint.Direction = when (anchor) {\n        Anchor.START -> startPoint.direction\n        Anchor.END -> endPoint.direction\n    }\n\n    fun wasMovingEdge(): Boolean = confirmedJointPoints.isNotEmpty()\n\n    override fun contains(point: Point): Boolean = edges.any { it.contains(point) }\n\n    override fun isOverlapped(rect: Rect): Boolean =\n        edges.any {\n            val edgeBound = Rect.byLTRB(\n                it.startPoint.left,\n                it.startPoint.top,\n                it.endPoint.left,\n                it.endPoint.top\n            )\n            edgeBound.isOverlapped(rect)\n        }\n\n    data class Edge internal constructor(\n        val id: Int = getId(),\n        val startPoint: Point,\n        val endPoint: Point\n    ) {\n        val middleLeft: Double = (startPoint.left + endPoint.left).toDouble() / 2.0\n        val middleTop: Double = (startPoint.top + endPoint.top).toDouble() / 2.0\n\n        val isHorizontal: Boolean = isHorizontal(startPoint, endPoint)\n\n        internal fun translate(point: Point): Edge {\n            val (newStartPoint, newEndPoint) = if (isHorizontal) {\n                startPoint.copy(top = point.top) to endPoint.copy(top = point.top)\n            } else {\n                startPoint.copy(left = point.left) to endPoint.copy(left = point.left)\n            }\n            return copy(startPoint = newStartPoint, endPoint = newEndPoint)\n        }\n\n        internal fun contains(point: Point): Boolean =\n            LineHelper.isOnStraightLine(startPoint, point, endPoint, isInOrderedRequired = true)\n\n        companion object {\n            private var lastUsedId: Int = 0\n            internal fun getId(): Int {\n                val newId = lastUsedId + 1\n                lastUsedId = newId\n                return newId\n            }\n        }\n    }\n\n    data class AnchorPointUpdate(val anchor: Anchor, val point: DirectedPoint)\n\n    enum class Anchor {\n        START, END\n    }\n\n    companion object {\n        private fun isHorizontal(p1: Point, p2: Point): Boolean = p1.top == p2.top\n    }\n}\n","package mono.shape.shape\n\nimport mono.graphics.geo.Point\nimport mono.graphics.geo.Rect\nimport mono.shape.ShapeExtraManager\nimport mono.shape.extra.RectangleExtra\nimport mono.shape.extra.ShapeExtra\nimport mono.shape.serialization.AbstractSerializableShape\nimport mono.shape.serialization.SerializableRectangle\n\n/**\n * A rectangle shape.\n */\nclass Rectangle(\n    rect: Rect,\n    id: String? = null,\n    parentId: String? = null\n) : AbstractShape(id, parentId = parentId) {\n\n    override var bound: Rect = rect\n        set(value) = update {\n            val isUpdated = field != value\n            field = value\n            isUpdated\n        }\n\n    override var extra: RectangleExtra = ShapeExtraManager.defaultRectangleExtra\n        private set\n\n    /**\n     * The content of this shape also includes all vertical/horizontal lines created by [startPoint]\n     * and [endPoint].\n     */\n    constructor(\n        startPoint: Point,\n        endPoint: Point,\n        id: String? = null,\n        parentId: String? = null\n    ) : this(\n        Rect.byLTRB(startPoint.left, startPoint.top, endPoint.left, endPoint.top),\n        id = id,\n        parentId = parentId\n    )\n\n    internal constructor(\n        serializableRectangle: SerializableRectangle,\n        parentId: String? = null\n    ) : this(\n        serializableRectangle.bound,\n        id = serializableRectangle.id,\n        parentId = parentId\n    ) {\n        extra = RectangleExtra(serializableRectangle.extra)\n        versionCode = serializableRectangle.versionCode\n    }\n\n    override fun toSerializableShape(isIdIncluded: Boolean): AbstractSerializableShape =\n        SerializableRectangle(\n            id = id.takeIf { isIdIncluded },\n            versionCode,\n            bound,\n            extra = extra.toSerializableExtra()\n        )\n\n    override fun setBound(newBound: Rect) {\n        bound = newBound\n    }\n\n    override fun setExtra(newExtra: ShapeExtra) {\n        if (newExtra !is RectangleExtra || newExtra == extra) {\n            return\n        }\n        update {\n            extra = newExtra\n            true\n        }\n    }\n}\n","package mono.shape.shape\n\nimport mono.shape.serialization.SerializableGroup\n\n/**\n * A special [Group] for the root group of the file.\n * This group contains some extra information for storing and restoring from file.\n */\nclass RootGroup : Group {\n    constructor(id: String?) : super(id, parentId = null)\n    constructor(serializableGroup: SerializableGroup) : super(serializableGroup, parentId = null)\n}\n","package mono.shape.shape\n\nimport mono.graphics.geo.Point\nimport mono.graphics.geo.Rect\nimport mono.graphics.geo.Size\nimport mono.shape.extra.ShapeExtra\nimport mono.shape.extra.TextExtra\nimport mono.shape.serialization.AbstractSerializableShape\nimport mono.shape.serialization.SerializableText\nimport kotlin.math.max\n\n/**\n * A text shape which contains a bound and a text.\n *\n * TODO: Resize bound by text\n */\nclass Text(\n    rect: Rect,\n    id: String? = null,\n    parentId: String? = null,\n    isTextEditable: Boolean = true\n) : AbstractShape(id = id, parentId = parentId) {\n    private var userSettingSize: Size = Size.ZERO\n        set(value) {\n            field = value.takeIf { it.width >= 3 && it.height >= 3 } ?: Size.ZERO\n        }\n\n    // Text can be auto resized by text\n    override var bound: Rect = rect\n\n    val contentBound: Rect\n        get() = if (extra.boundExtra.isBorderEnabled) {\n            Rect.byLTWH(bound.left + 1, bound.top + 1, bound.width - 2, bound.height - 2)\n        } else {\n            bound\n        }\n\n    var text: String = \"\"\n        private set\n    var isTextEditable: Boolean = isTextEditable\n        private set\n\n    var isTextEditing: Boolean = false\n        private set\n\n    override var extra: TextExtra = TextExtra.withDefault()\n        private set\n\n    var renderableText: RenderableText = RenderableText.EMPTY\n        private set\n\n    constructor(\n        startPoint: Point,\n        endPoint: Point,\n        id: String? = null,\n        parentId: String? = null,\n        isTextEditable: Boolean\n    ) : this(\n        Rect.byLTRB(startPoint.left, startPoint.top, endPoint.left, endPoint.top),\n        id = id,\n        parentId = parentId,\n        isTextEditable = isTextEditable\n    )\n\n    internal constructor(serializableText: SerializableText, parentId: String?) : this(\n        serializableText.bound,\n        id = serializableText.id,\n        parentId = parentId,\n        isTextEditable = serializableText.isTextEditable\n    ) {\n        extra = TextExtra(serializableText.extra)\n        setText(serializableText.text)\n        versionCode = serializableText.versionCode\n    }\n\n    init {\n        userSettingSize = rect.size\n        updateRenderableText()\n    }\n\n    override fun toSerializableShape(isIdIncluded: Boolean): AbstractSerializableShape =\n        SerializableText(\n            id.takeIf { isIdIncluded },\n            versionCode,\n            bound,\n            text,\n            extra.toSerializableExtra(),\n            isTextEditable\n        )\n\n    override fun setBound(newBound: Rect) = update {\n        val isUpdated = bound != newBound\n        userSettingSize = newBound.size\n        bound = newBound\n\n        updateRenderableText()\n\n        isUpdated\n    }\n\n    fun setText(newText: String) = update {\n        val isTextChanged = newText != text\n        text = newText\n        updateRenderableText()\n        isTextChanged\n    }\n\n    fun setTextEditingMode(isEditing: Boolean) = update {\n        val isUpdated = isTextEditing != isEditing\n        isTextEditing = isEditing\n        isUpdated\n    }\n\n    override fun setExtra(newExtra: ShapeExtra) {\n        if (newExtra !is TextExtra || newExtra == extra) {\n            return\n        }\n        update {\n            extra = newExtra\n            updateRenderableText()\n\n            true\n        }\n    }\n\n    private fun updateRenderableText() {\n        val maxRowCharCount =\n            if (extra.hasBorder()) bound.width - 2 else bound.width\n        if (text != renderableText.text ||\n            maxRowCharCount != renderableText.maxRowCharCount\n        ) {\n            renderableText = RenderableText(text, max(maxRowCharCount, 1))\n        }\n    }\n\n    fun makeTextEditable() {\n        if (isTextEditable) {\n            return\n        }\n        update {\n            isTextEditable = true\n            true\n        }\n    }\n\n    /**\n     * A class to generate renderable text.\n     */\n    class RenderableText(val text: String, val maxRowCharCount: Int) {\n        private var renderableText: List<String>? = null\n        fun getRenderableText(): List<String> {\n            val nonNullRenderableText = renderableText ?: createRenderableText()\n            renderableText = nonNullRenderableText\n            return nonNullRenderableText\n        }\n\n        private fun createRenderableText(): List<String> =\n            if (maxRowCharCount == 1) {\n                text.map { it.toString() }\n            } else {\n                standardizeLines(text.split(\"\\n\"))\n            }\n\n        private fun standardizeLines(lines: List<String>): List<String> = lines\n            .flatMap { line ->\n                val adjustedLines = mutableListOf(StringBuilder())\n                for (word in line.toStandardizedWords(maxRowCharCount)) {\n                    val lastLine = adjustedLines.last()\n                    val space = if (lastLine.isNotEmpty()) \" \" else \"\"\n                    val newLineLength = lastLine.length + space.length + word.length\n                    if (newLineLength <= maxRowCharCount) {\n                        lastLine.append(space).append(word)\n                    } else {\n                        adjustedLines.add(StringBuilder(word))\n                    }\n                }\n                adjustedLines\n            }\n            .map { it.toString() }\n\n        private fun String.toStandardizedWords(maxCharCount: Int): List<String> =\n            split(\" \")\n                .flatMap { word ->\n                    if (word.length <= maxCharCount) listOf(word) else word.chunked(maxCharCount)\n                }\n\n        companion object {\n            val EMPTY = RenderableText(\"\", 0)\n        }\n    }\n}\n","package mono.shape.shape.line\n\nimport mono.graphics.geo.DirectedPoint\nimport mono.graphics.geo.DirectedPoint.Direction\nimport mono.graphics.geo.Point\nimport mono.shape.shape.Line\n\n/**\n * An utility object for line shape.\n */\ninternal object LineHelper {\n    fun createJointPoints(seedPoints: List<DirectedPoint>): List<Point> {\n        val mainPoints = createAnchorPoints(seedPoints)\n        if (mainPoints.isEmpty()) {\n            return emptyList()\n        }\n        val directedJointPoints = mutableListOf(mainPoints.first())\n        for (i in 1 until mainPoints.size) {\n            val startPoint = directedJointPoints.last()\n            val endPoint = mainPoints[i]\n            val middlePoint = when {\n                startPoint.isOnSameStraightLine(endPoint) -> null\n                startPoint.direction == Direction.HORIZONTAL ->\n                    DirectedPoint(\n                        endPoint.direction,\n                        endPoint.left,\n                        startPoint.top\n                    )\n                else ->\n                    DirectedPoint(\n                        endPoint.direction,\n                        startPoint.left,\n                        endPoint.top\n                    )\n            }\n            if (middlePoint != null) {\n                directedJointPoints.add(middlePoint)\n            }\n            directedJointPoints.add(endPoint)\n        }\n        val jointPoints = directedJointPoints.map { it.point }\n        return reduce(jointPoints)\n    }\n\n    private fun createAnchorPoints(initAnchorPoints: List<DirectedPoint>): List<DirectedPoint> {\n        if (initAnchorPoints.isEmpty()) {\n            return emptyList()\n        }\n        val mainPoints = mutableListOf(initAnchorPoints.first())\n        for (endPoint in initAnchorPoints.drop(1)) {\n            val startPoint = mainPoints.last()\n            if (startPoint.direction == endPoint.direction &&\n                !startPoint.isOnSameStraightLine(endPoint)\n            ) {\n                val middleLeft = (startPoint.left + endPoint.left) / 2\n                val middleTop = (startPoint.top + endPoint.top) / 2\n                val middleDirection = startPoint.toRightAngleDirection()\n                val middlePoint = DirectedPoint(middleDirection, middleLeft, middleTop)\n                mainPoints.add(middlePoint)\n            }\n            mainPoints.add(endPoint)\n        }\n        return mainPoints\n    }\n\n    fun reduce(points: List<Point>): List<Point> = reduceInner(reduceInner(points))\n\n    private fun reduceInner(points: List<Point>): List<Point> {\n        if (points.isEmpty()) {\n            return points\n        }\n        val list = mutableListOf<Point>()\n        for (i in 1 until points.size) {\n            val p1 = list.getOrNull(list.size - 2)\n            val p2 = list.getOrNull(list.size - 1)\n            val p3 = points[i]\n            if (p1 == null || p2 == null || !isOnStraightLine(p1, p2, p3, false)) {\n                list.add(p3)\n            } else {\n                list[list.size - 1] = p3\n            }\n        }\n\n        val p1 = points.first()\n        val p2 = list.getOrNull(0)\n        val p3 = list.getOrNull(1)\n        if (p2 == null || p3 == null || !isOnStraightLine(p1, p2, p3, false)) {\n            list.add(0, p1)\n        } else {\n            list[0] = p1\n        }\n        return list\n    }\n\n    fun isOnStraightLine(\n        p1: Point,\n        p2: Point,\n        p3: Point,\n        isInOrderedRequired: Boolean\n    ): Boolean =\n        if (isInOrderedRequired) {\n            isEquals(p1.left, p2.left, p3.left) && isMonotonic(p1.top, p2.top, p3.top) ||\n                isEquals(p1.top, p2.top, p3.top) && isMonotonic(p1.left, p2.left, p3.left)\n        } else {\n            isEquals(p1.left, p2.left, p3.left) || isEquals(p1.top, p2.top, p3.top)\n        }\n\n    private fun isEquals(a: Int, b: Int, c: Int): Boolean = a == b && b == c\n\n    private fun isMonotonic(a: Int, b: Int, c: Int): Boolean =\n        b in a..c || b in c..a\n\n    private fun DirectedPoint.isOnSameStraightLine(another: DirectedPoint): Boolean =\n        left == another.left || top == another.top\n\n    private fun DirectedPoint.toRightAngleDirection(): Direction =\n        if (direction == Direction.HORIZONTAL) Direction.VERTICAL else Direction.HORIZONTAL\n\n    fun createEdges(jointPoints: List<Point>): MutableList<Line.Edge> {\n        val edges = mutableListOf<Line.Edge>()\n        for (i in 0 until jointPoints.lastIndex) {\n            val startPoint = jointPoints[i]\n            val endPoint = jointPoints[i + 1]\n            edges.add(Line.Edge(startPoint = startPoint, endPoint = endPoint))\n        }\n        return edges\n    }\n}\n",null,"package mono.shapesearcher\n\nimport mono.common.Characters.isTransparent\nimport mono.graphics.bitmap.MonoBitmap\nimport mono.graphics.geo.DirectedPoint\nimport mono.graphics.geo.Point\nimport mono.graphics.geo.Rect\nimport mono.shape.ShapeManager\nimport mono.shape.shape.AbstractShape\nimport mono.shape.shape.Rectangle\nimport mono.shape.shape.Text\n\n/**\n * A model class which optimises shapes retrieval from a point.\n * A shape is only indexed after it's drawn onto the board. Do not use this for pre-draw check.\n */\nclass ShapeSearcher(\n    private val shapeManager: ShapeManager,\n    private val getBitmap: (AbstractShape) -> MonoBitmap?\n) {\n    private val shapeZoneAddressManager: ShapeZoneAddressManager =\n        ShapeZoneAddressManager(getBitmap)\n    private val zoneOwnersManager: ZoneOwnersManager = ZoneOwnersManager()\n\n    fun register(shape: AbstractShape) {\n        val addresses = shapeZoneAddressManager.getZoneAddresses(shape)\n        zoneOwnersManager.registerOwnerAddresses(shape.id, addresses)\n    }\n\n    fun clear(bound: Rect) {\n        zoneOwnersManager.clear(bound)\n    }\n\n    /**\n     * Returns a list of shapes which have a non-transparent pixel at [point].\n     * The other of the list is based on z-index which 1st item is the lowest index.\n     * Note: Group shape is not included in the result.\n     */\n    fun getShapes(point: Point): List<AbstractShape> = zoneOwnersManager.getPotentialOwners(point)\n        .asSequence()\n        .mapNotNull { shapeManager.getShape(it) }\n        .filter {\n            val position = it.bound.position\n            val bitmap = getBitmap(it) ?: return@filter false\n            val bitmapRow = point.row - position.row\n            val bitmapCol = point.column - position.column\n            !bitmap.get(bitmapRow, bitmapCol).isTransparent\n        }\n        .toList()\n\n    fun getAllShapesInZone(bound: Rect): List<AbstractShape> =\n        zoneOwnersManager.getAllPotentialOwnersInZone(bound)\n            .asSequence()\n            .mapNotNull { shapeManager.getShape(it) }\n            .filter { it.isOverlapped(bound) }\n            .toList()\n\n    /**\n     * Gets the edge direction of a shape having bound's edges at [point].\n     * The considerable shape types are shapes having static bound such as [Text], [Rectangle].\n     * If there are many shapes satisfying the conditions, the first one will be used.\n     */\n    fun getEdgeDirection(point: Point): DirectedPoint.Direction? {\n        val shape = zoneOwnersManager.getPotentialOwners(point)\n            .asSequence()\n            .mapNotNull { shapeManager.getShape(it) }\n            .filter { it is Text || it is Rectangle }\n            .filter { it.contains(point) }\n            .filter {\n                it.bound.left == point.left ||\n                    it.bound.right == point.left ||\n                    it.bound.top == point.top ||\n                    it.bound.bottom == point.top\n            }\n            .firstOrNull()\n        return when {\n            shape == null -> null\n            shape.bound.left == point.left ||\n                shape.bound.right == point.left -> DirectedPoint.Direction.VERTICAL\n            else -> DirectedPoint.Direction.HORIZONTAL\n        }\n    }\n}\n","package mono.shapesearcher\n\nimport mono.graphics.bitmap.MonoBitmap\nimport mono.shape.shape.AbstractShape\n\n/**\n * A model class to convert a shape to addresses which the shape have pixels on.\n * This class also cache the addresses belong to the shape along with its version.\n */\ninternal class ShapeZoneAddressManager(private val getBitmap: (AbstractShape) -> MonoBitmap?) {\n    private val idToZoneAddressMap: MutableMap<String, VersionizedZoneAddresses> = mutableMapOf()\n\n    fun getZoneAddresses(shape: AbstractShape): Set<ZoneAddress> {\n        val cachedAddresses = getCachedAddresses(shape)\n        if (cachedAddresses != null) {\n            return cachedAddresses\n        }\n\n        val bitmap = getBitmap(shape)\n        if (bitmap == null) {\n            idToZoneAddressMap.remove(shape.id)\n            return emptySet()\n        }\n        val position = shape.bound.position\n        val addresses = mutableSetOf<ZoneAddress>()\n        for (ir in bitmap.matrix.indices) {\n            bitmap.matrix[ir].forEachIndex { ic, _ ->\n                val row = ir + position.row\n                val col = ic + position.column\n                val address = ZoneAddressFactory.toAddress(row, col)\n                addresses.add(address)\n            }\n        }\n        val versionizedZoneAddresses = VersionizedZoneAddresses(shape.versionCode, addresses)\n        idToZoneAddressMap[shape.id] = versionizedZoneAddresses\n        return versionizedZoneAddresses.addresses\n    }\n\n    private fun getCachedAddresses(shape: AbstractShape): Set<ZoneAddress>? =\n        idToZoneAddressMap[shape.id]?.takeIf { it.version == shape.versionCode }?.addresses\n\n    private class VersionizedZoneAddresses(val version: Int, val addresses: Set<ZoneAddress>)\n}\n","package mono.shapesearcher\n\n/**\n * A data class to identify address of a zone\n */\ninternal data class ZoneAddress(val row: Int, val column: Int)\n\n/**\n * A factory of [ZoneAddress].\n */\ninternal object ZoneAddressFactory {\n    private val addressMap: MutableMap<Int, MutableMap<Int, ZoneAddress>> = mutableMapOf()\n\n    init {\n        for (left in -4..20) {\n            addressMap[left] = mutableMapOf()\n            for (top in -4..20) {\n                addressMap[left]!![top] = ZoneAddress(left, top)\n            }\n        }\n    }\n\n    fun toAddress(row: Int, column: Int): ZoneAddress {\n        val rowAddressIndex = toAddressIndex(row)\n        val colAddressIndex = toAddressIndex(column)\n        return get(rowAddressIndex, colAddressIndex)\n    }\n\n    fun get(rowAddressIndex: Int, colAddressIndex: Int): ZoneAddress =\n        addressMap.getOrPut(rowAddressIndex) { mutableMapOf() }\n            .getOrPut(colAddressIndex) { ZoneAddress(rowAddressIndex, colAddressIndex) }\n\n    fun toAddressIndex(number: Int) = number shr 4\n}\n","package mono.shapesearcher\n\nimport mono.graphics.geo.Point\nimport mono.graphics.geo.Rect\n\n/**\n * A model class to store owners of a zone whole size = 8x8 to fast identify potential candidate\n * owners of a position (row, column).\n * Owners of a zone will be stored in the same order as owners are added if overlapped.\n */\ninternal class ZoneOwnersManager {\n    private val zoneToOwnersMap: MutableMap<ZoneAddress, MutableList<String>> = mutableMapOf()\n\n    fun clear(clearBound: Rect) {\n        val leftIndex = ZoneAddressFactory.toAddressIndex(clearBound.left)\n        val rightIndex = ZoneAddressFactory.toAddressIndex(clearBound.right)\n        val topIndex = ZoneAddressFactory.toAddressIndex(clearBound.top)\n        val bottomIndex = ZoneAddressFactory.toAddressIndex(clearBound.bottom)\n\n        for (rowIndex in topIndex..bottomIndex) {\n            for (colIndex in leftIndex..rightIndex) {\n                val zone = ZoneAddressFactory.get(rowIndex, colIndex)\n                zoneToOwnersMap[zone]?.clear()\n            }\n        }\n    }\n\n    fun registerOwnerAddresses(ownerId: String, addresses: Set<ZoneAddress>) {\n        for (address in addresses) {\n            zoneToOwnersMap.getOrPut(address) { mutableListOf() }.add(ownerId)\n        }\n    }\n\n    fun getPotentialOwners(point: Point): List<String> {\n        val address = ZoneAddressFactory.toAddress(point.row, point.column)\n        return zoneToOwnersMap[address].orEmpty()\n    }\n\n    fun getAllPotentialOwnersInZone(zone: Rect): Set<String> {\n        val address1 = ZoneAddressFactory.toAddress(zone.top, zone.left)\n        val address2 = ZoneAddressFactory.toAddress(zone.bottom, zone.right)\n        val owners = mutableSetOf<String>()\n        for (addressRow in address1.row..address2.row) {\n            for (addressCol in address1.column..address2.column) {\n                val address = ZoneAddressFactory.get(addressRow, addressCol)\n                owners += zoneToOwnersMap[address].orEmpty()\n            }\n        }\n        return owners\n    }\n}\n",null,"package mono.state\n\nimport mono.graphics.geo.Point\nimport mono.lifecycle.LifecycleOwner\nimport mono.shape.clipboard.ShapeClipboardManager\nimport mono.shape.serialization.AbstractSerializableShape\nimport mono.shape.shape.AbstractShape\nimport mono.shape.shape.Group\nimport mono.state.command.CommandEnvironment\n\n/**\n * A manager class to handle clipboard related data.\n */\ninternal class ClipboardManager(\n    lifecycleOwner: LifecycleOwner,\n    private val commandEnvironment: CommandEnvironment,\n    private val shapeClipboardManager: ShapeClipboardManager\n) {\n    private var selectedShapes: Collection<AbstractShape> = emptyList()\n\n    init {\n        commandEnvironment.selectedShapesLiveData.observe(lifecycleOwner) {\n            selectedShapes = it\n        }\n        shapeClipboardManager.clipboardShapeLiveData.observe(\n            lifecycleOwner,\n            listener = ::pasteShapes\n        )\n    }\n\n    fun copySelectedShapes(isRemoveRequired: Boolean) {\n        val serializableShapes = selectedShapes.map { it.toSerializableShape(false) }\n        shapeClipboardManager.setClipboard(serializableShapes)\n        if (isRemoveRequired) {\n            for (shape in selectedShapes) {\n                commandEnvironment.removeShape(shape)\n            }\n            commandEnvironment.clearSelectedShapes()\n        }\n    }\n\n    private fun pasteShapes(serializableShapes: List<AbstractSerializableShape>) {\n        if (serializableShapes.isEmpty()) {\n            return\n        }\n        commandEnvironment.clearSelectedShapes()\n        val bound = commandEnvironment.getWindowBound()\n        val left = bound.left + bound.width / 5\n        val top = bound.top + bound.height / 5\n        insertShapes(left, top, serializableShapes)\n    }\n\n    fun duplicateSelectedShapes() {\n        if (selectedShapes.isEmpty()) {\n            return\n        }\n        val currentSelectedShapes = selectedShapes\n        val serializableShapes = currentSelectedShapes.map { it.toSerializableShape(false) }\n        val minLeft = currentSelectedShapes.minOf { it.bound.left }\n        val minTop = currentSelectedShapes.minOf { it.bound.top }\n\n        commandEnvironment.clearSelectedShapes()\n        insertShapes(minLeft + 1, minTop + 1, serializableShapes)\n    }\n\n    private fun insertShapes(\n        left: Int,\n        top: Int,\n        serializableShapes: List<AbstractSerializableShape>\n    ) {\n        val currentParentId = commandEnvironment.workingParentGroup.id\n        val shapes = serializableShapes.map { Group.toShape(currentParentId, it) }\n        val minLeft = shapes.minOf { it.bound.left }\n        val minTop = shapes.minOf { it.bound.top }\n\n        val offset = Point(minLeft - left, minTop - top)\n        for (shape in shapes) {\n            val shapeBound = shape.bound\n            val newShapeBound = shapeBound.copy(position = shapeBound.position.minus(offset))\n            shape.setBound(newShapeBound)\n\n            commandEnvironment.addShape(shape)\n            commandEnvironment.addSelectedShape(shape)\n        }\n    }\n}\n","package mono.state\n\nimport kotlinx.browser.document\nimport mono.html.A\nimport mono.html.Input\nimport mono.html.InputType\nimport mono.html.setAttributes\nimport org.w3c.dom.url.URL\nimport org.w3c.files.Blob\nimport org.w3c.files.FileList\nimport org.w3c.files.FileReader\nimport org.w3c.files.get\n\n/**\n * A mediator class for file interactions.\n */\ninternal class FileMediator {\n    fun saveFile(jsonString: String) {\n        document.body?.run {\n            val fileBlob = Blob(arrayOf(jsonString))\n            val node = A(classes = \"hidden\") {\n                href = URL.Companion.createObjectURL(fileBlob)\n                setAttributes(\"download\" to \"$DEFAULT_FILENAME.$EXTENSION\")\n            }\n            node.click()\n            node.remove()\n        }\n    }\n\n    fun openFile(onFileLoadedAction: (String) -> Unit) {\n        document.body?.run {\n            val fileInput = Input(InputType.FILE, classes = \"hidden\") {\n                setAttributes(\"accept\" to \".$EXTENSION\")\n            }\n            fileInput.onchange = {\n                readFile(fileInput.files, onFileLoadedAction)\n                fileInput.remove()\n            }\n            fileInput.click()\n        }\n    }\n\n    private fun readFile(fileList: FileList?, onFileLoadedAction: (String) -> Unit) {\n        val selectedFile = fileList?.get(0) ?: return\n        val reader = FileReader()\n        reader.onload = {\n            val text = reader.result.toString()\n            onFileLoadedAction(text)\n        }\n        reader.readAsText(selectedFile)\n    }\n\n    companion object {\n        private const val DEFAULT_FILENAME = \"monosketch\"\n        private const val EXTENSION = \"mono\"\n    }\n}\n",null,"package mono.state\n\nimport mono.actionmanager.ActionManager\nimport mono.actionmanager.OneTimeActionType\nimport mono.actionmanager.RetainableActionType\nimport mono.bitmap.manager.MonoBitmapManager\nimport mono.common.MouseCursor\nimport mono.common.currentTimeMillis\nimport mono.common.post\nimport mono.environment.Build\nimport mono.graphics.board.Highlight\nimport mono.graphics.board.MonoBoard\nimport mono.graphics.geo.DirectedPoint\nimport mono.graphics.geo.MousePointer\nimport mono.graphics.geo.Point\nimport mono.graphics.geo.Rect\nimport mono.html.canvas.CanvasViewController\nimport mono.lifecycle.LifecycleOwner\nimport mono.livedata.LiveData\nimport mono.livedata.MutableLiveData\nimport mono.livedata.distinctUntilChange\nimport mono.shape.ShapeManager\nimport mono.shape.add\nimport mono.shape.clipboard.ShapeClipboardManager\nimport mono.shape.remove\nimport mono.shape.selection.SelectedShapeManager\nimport mono.shape.shape.AbstractShape\nimport mono.shape.shape.Group\nimport mono.shape.shape.Line\nimport mono.shape.shape.MockShape\nimport mono.shape.shape.Rectangle\nimport mono.shape.shape.RootGroup\nimport mono.shape.shape.Text\nimport mono.shapebound.InteractionPoint\nimport mono.shapebound.LineInteractionBound\nimport mono.shapebound.ScalableInteractionBound\nimport mono.shapesearcher.ShapeSearcher\nimport mono.state.command.CommandEnvironment\nimport mono.state.command.CommandEnvironment.EditingMode\nimport mono.state.command.MouseCommandFactory\nimport mono.state.command.mouse.MouseCommand\nimport mono.store.manager.StoreManager\nimport mono.ui.appstate.AppUiStateManager\n\n/**\n * A class which connects components in the app.\n */\nclass MainStateManager(\n    lifecycleOwner: LifecycleOwner,\n    private val mainBoard: MonoBoard,\n    private val shapeManager: ShapeManager,\n    private val selectedShapeManager: SelectedShapeManager,\n    private val bitmapManager: MonoBitmapManager,\n    private val canvasManager: CanvasViewController,\n    shapeClipboardManager: ShapeClipboardManager,\n    mousePointerLiveData: LiveData<MousePointer>,\n    private val actionManager: ActionManager,\n    appUiStateManager: AppUiStateManager,\n    storeManager: StoreManager = StoreManager.getInstance(),\n    initialRootId: String = \"\"\n) {\n    private val shapeSearcher: ShapeSearcher = ShapeSearcher(shapeManager, bitmapManager::getBitmap)\n\n    private var workingParentGroup: Group = shapeManager.root\n\n    private var windowBoardBound: Rect = Rect.ZERO\n\n    private val environment = CommandEnvironmentImpl(this)\n\n    private var currentMouseCommand: MouseCommand? = null\n    private var currentRetainableActionType: RetainableActionType = RetainableActionType.IDLE\n\n    private val redrawRequestMutableLiveData = MutableLiveData(Unit)\n\n    private val editingModeLiveData = MutableLiveData(EditingMode.idle(null))\n\n    init {\n        mousePointerLiveData\n            .distinctUntilChange()\n            .observe(lifecycleOwner, listener = ::onMouseEvent)\n\n        mousePointerLiveData\n            .distinctUntilChange()\n            .observe(lifecycleOwner, listener = ::updateMouseCursor)\n\n        canvasManager.windowBoardBoundLiveData.observe(lifecycleOwner) {\n            windowBoardBound = it\n            if (Build.DEBUG) {\n                println(\n                    \"¶ Drawing info: window board size $windowBoardBound • \" +\n                        \"pixel size ${canvasManager.windowBoundPx}\"\n                )\n            }\n            requestRedraw()\n        }\n\n        shapeManager.versionLiveData\n            .distinctUntilChange()\n            .observe(lifecycleOwner) {\n                requestRedraw()\n            }\n\n        environment.selectedShapesLiveData.observe(\n            lifecycleOwner,\n            listener = ::updateInteractionBounds\n        )\n\n        redrawRequestMutableLiveData.observe(\n            lifecycleOwner,\n            throttleDurationMillis = 0\n        ) { redraw() }\n\n        actionManager.retainableActionLiveData.observe(lifecycleOwner) {\n            currentRetainableActionType = it\n        }\n\n        val stateHistoryManager = StateHistoryManager(\n            lifecycleOwner,\n            environment,\n            storeManager,\n            canvasManager\n        )\n        stateHistoryManager.restoreAndStartObserveStateChange(initialRootId)\n\n        OneTimeActionHandler(\n            lifecycleOwner,\n            actionManager.oneTimeActionLiveData,\n            environment,\n            bitmapManager,\n            shapeClipboardManager,\n            stateHistoryManager,\n            appUiStateManager\n        )\n    }\n\n    private fun onMouseEvent(mousePointer: MousePointer) {\n        if (mousePointer is MousePointer.DoubleClick) {\n            val targetedShape =\n                environment.getSelectedShapes().firstOrNull { it.contains(mousePointer.point) }\n            actionManager.setOneTimeAction(OneTimeActionType.EditSelectedShape(targetedShape))\n            return\n        }\n\n        val mouseCommand =\n            MouseCommandFactory.getCommand(environment, mousePointer, currentRetainableActionType)\n                ?: currentMouseCommand\n                ?: return\n        currentMouseCommand = mouseCommand\n\n        environment.enterEditingMode()\n        val commandResultType = mouseCommand.execute(environment, mousePointer)\n\n        if (commandResultType == MouseCommand.CommandResultType.DONE) {\n            environment.exitEditingMode(true)\n        }\n\n        if (commandResultType == MouseCommand.CommandResultType.DONE ||\n            commandResultType == MouseCommand.CommandResultType.WORKING_PHASE2\n        ) {\n            currentMouseCommand = null\n            requestRedraw()\n            // Avoid click when adding shape cause shape selection command\n            post { actionManager.setRetainableAction(RetainableActionType.IDLE) }\n        }\n    }\n\n    /**\n     * Redraws all content on the workspace.\n     * This is used when the theme is updated.\n     */\n    fun forceFullyRedrawWorkspace() {\n        canvasManager.fullyRedraw()\n    }\n\n    private fun requestRedraw() {\n        redrawRequestMutableLiveData.value = Unit\n    }\n\n    private fun redraw() {\n        auditPerformance(\"Redraw\") {\n            redrawMainBoard()\n        }\n        auditPerformance(\"Draw canvas\") {\n            canvasManager.drawBoard()\n        }\n    }\n\n    private fun redrawMainBoard() {\n        shapeSearcher.clear(windowBoardBound)\n        mainBoard.clearAndSetWindow(windowBoardBound)\n        drawShapeToMainBoard(shapeManager.root)\n    }\n\n    private fun drawShapeToMainBoard(shape: AbstractShape) {\n        if (shape is Group) {\n            for (child in shape.items) {\n                drawShapeToMainBoard(child)\n            }\n            return\n        }\n        val bitmap = bitmapManager.getBitmap(shape) ?: return\n        val highlight = when {\n            shape is Text && shape.isTextEditing -> Highlight.TEXT_EDITING\n            shape in environment.getSelectedShapes() -> Highlight.SELECTED\n            else -> Highlight.NO\n        }\n        mainBoard.fill(shape.bound.position, bitmap, highlight)\n        shapeSearcher.register(shape)\n    }\n\n    private fun auditPerformance(\n        objective: String,\n        isEnabled: Boolean = DEBUG_PERFORMANCE_AUDIT_ENABLED,\n        action: () -> Unit\n    ) {\n        if (!isEnabled || !Build.DEBUG) {\n            action()\n            return\n        }\n        val t0 = currentTimeMillis()\n        action()\n        println(\"$objective runtime: ${currentTimeMillis() - t0}\")\n    }\n\n    private fun updateMouseCursor(mousePointer: MousePointer) {\n        val mouseCursor = when (mousePointer) {\n            is MousePointer.Move -> getMouseMovingCursor(mousePointer)\n\n            is MousePointer.Drag -> {\n                val mouseCommand = currentMouseCommand\n                if (mouseCommand != null) mouseCommand.mouseCursor else MouseCursor.DEFAULT\n            }\n\n            is MousePointer.Up -> MouseCursor.DEFAULT\n\n            MousePointer.Idle,\n            is MousePointer.Down,\n            is MousePointer.Click,\n            is MousePointer.DoubleClick -> null\n        }\n        if (mouseCursor != null) {\n            canvasManager.setMouseCursor(mouseCursor)\n        }\n    }\n\n    private fun getMouseMovingCursor(mousePointer: MousePointer.Move): MouseCursor {\n        val interactionPoint = canvasManager.getInteractionPoint(mousePointer.pointPx)\n        return interactionPoint?.mouseCursor ?: currentRetainableActionType.mouseCursor\n    }\n\n    private fun updateInteractionBounds(selectedShapes: Collection<AbstractShape>) {\n        val bounds = selectedShapes.mapNotNull {\n            when (it) {\n                is Rectangle,\n                is Text -> ScalableInteractionBound(it.id, it.bound)\n\n                is Line -> LineInteractionBound(it.id, it.edges)\n\n                is Group -> null // TODO: Add new Interaction bound type for Group\n                is MockShape -> null\n            }\n        }\n        canvasManager.drawInteractionBounds(bounds)\n        requestRedraw()\n    }\n\n    private class CommandEnvironmentImpl(\n        private val stateManager: MainStateManager\n    ) : CommandEnvironment {\n        override val shapeManager: ShapeManager\n            get() = stateManager.shapeManager\n\n        override val shapeSearcher: ShapeSearcher\n            get() = stateManager.shapeSearcher\n\n        override val editingModeLiveData: LiveData<EditingMode>\n            get() = stateManager.editingModeLiveData\n\n        override var workingParentGroup: Group\n            get() = stateManager.workingParentGroup\n            private set(value) {\n                stateManager.workingParentGroup = value\n            }\n\n        override fun replaceRoot(newRoot: RootGroup) {\n            shapeManager.replaceRoot(newRoot)\n            workingParentGroup = shapeManager.root\n            clearSelectedShapes()\n        }\n\n        override fun enterEditingMode() {\n            stateManager.editingModeLiveData.value = EditingMode.edit()\n        }\n\n        override fun exitEditingMode(isNewStateAccepted: Boolean) {\n            val skippedVersion =\n                if (isNewStateAccepted) null else shapeManager.versionLiveData.value\n            stateManager.editingModeLiveData.value = EditingMode.idle(skippedVersion)\n        }\n\n        override fun addShape(shape: AbstractShape?) {\n            if (shape != null) {\n                shapeManager.add(shape)\n            }\n        }\n\n        override fun removeShape(shape: AbstractShape?) = shapeManager.remove(shape)\n\n        override fun getWindowBound(): Rect = stateManager.windowBoardBound\n\n        override fun getInteractionPoint(pointPx: Point): InteractionPoint? =\n            stateManager.canvasManager.getInteractionPoint(pointPx)\n\n        override fun updateInteractionBounds() =\n            stateManager.updateInteractionBounds(stateManager.selectedShapeManager.selectedShapes)\n\n        override fun isPointInInteractionBounds(point: Point): Boolean =\n            stateManager.selectedShapeManager.selectedShapes.any { it.contains(point) }\n\n        override fun setSelectionBound(bound: Rect?) =\n            stateManager.canvasManager.drawSelectionBound(bound)\n\n        override val selectedShapesLiveData: LiveData<Set<AbstractShape>> =\n            stateManager.selectedShapeManager.selectedShapesLiveData\n\n        override fun getSelectedShapes(): Set<AbstractShape> =\n            stateManager.selectedShapeManager.selectedShapes\n\n        override fun addSelectedShape(shape: AbstractShape?) {\n            if (shape != null) {\n                stateManager.selectedShapeManager.addSelectedShape(shape)\n            }\n        }\n\n        override fun toggleShapeSelection(shape: AbstractShape) =\n            stateManager.selectedShapeManager.toggleSelection(shape)\n\n        override fun selectAllShapes() {\n            for (shape in stateManager.workingParentGroup.items) {\n                addSelectedShape(shape)\n            }\n        }\n\n        override fun clearSelectedShapes() = stateManager.selectedShapeManager.clearSelectedShapes()\n\n        override fun getEdgeDirection(point: Point): DirectedPoint.Direction? =\n            shapeSearcher.getEdgeDirection(point)\n\n        override fun toXPx(column: Double): Double = stateManager.canvasManager.toXPx(column)\n\n        override fun toYPx(row: Double): Double = stateManager.canvasManager.toYPx(row)\n\n        override fun toWidthPx(width: Double): Double = stateManager.canvasManager.toWidthPx(width)\n\n        override fun toHeightPx(height: Double): Double =\n            stateManager.canvasManager.toHeightPx(height)\n    }\n\n    companion object {\n        private const val DEBUG_PERFORMANCE_AUDIT_ENABLED = false\n    }\n}\n","package mono.state\n\nimport mono.actionmanager.OneTimeActionType\nimport mono.bitmap.manager.MonoBitmapManager\nimport mono.common.exhaustive\nimport mono.export.ExportShapesHelper\nimport mono.graphics.geo.Point\nimport mono.graphics.geo.Rect\nimport mono.html.toolbar.view.keyboardshortcut.KeyboardShortcuts\nimport mono.lifecycle.LifecycleOwner\nimport mono.livedata.LiveData\nimport mono.shape.ShapeExtraManager\nimport mono.shape.clipboard.ShapeClipboardManager\nimport mono.shape.command.ChangeBound\nimport mono.shape.command.ChangeExtra\nimport mono.shape.command.ChangeOrder\nimport mono.shape.command.MakeTextEditable\nimport mono.shape.command.UpdateTextEditingMode\nimport mono.shape.extra.style.TextAlign\nimport mono.shape.serialization.SerializableGroup\nimport mono.shape.serialization.ShapeSerializationUtil\nimport mono.shape.shape.AbstractShape\nimport mono.shape.shape.Group\nimport mono.shape.shape.Line\nimport mono.shape.shape.MockShape\nimport mono.shape.shape.Rectangle\nimport mono.shape.shape.RootGroup\nimport mono.shape.shape.Text\nimport mono.state.command.CommandEnvironment\nimport mono.state.command.text.EditTextShapeHelper\nimport mono.ui.appstate.AppUiStateManager\nimport mono.ui.appstate.AppUiStateManager.UiStatePayload\n\n/**\n * A class to handle one time actions.\n */\ninternal class OneTimeActionHandler(\n    lifecycleOwner: LifecycleOwner,\n    oneTimeActionLiveData: LiveData<OneTimeActionType>,\n    private val environment: CommandEnvironment,\n    bitmapManager: MonoBitmapManager,\n    shapeClipboardManager: ShapeClipboardManager,\n    private val stateHistoryManager: StateHistoryManager,\n    uiStateManager: AppUiStateManager\n) {\n    private val fileMediator: FileMediator = FileMediator()\n    private val exportShapesHelper = ExportShapesHelper(\n        bitmapManager::getBitmap,\n        shapeClipboardManager::setClipboardText\n    )\n\n    private val clipboardManager: ClipboardManager =\n        ClipboardManager(lifecycleOwner, environment, shapeClipboardManager)\n\n    init {\n        oneTimeActionLiveData.observe(lifecycleOwner) {\n            when (it) {\n                OneTimeActionType.Idle -> Unit\n\n                // Main drop down menu\n                OneTimeActionType.SaveShapesAs ->\n                    saveCurrentShapesToFile()\n\n                OneTimeActionType.OpenShapes ->\n                    loadShapesFromFile()\n\n                OneTimeActionType.ExportSelectedShapes ->\n                    exportSelectedShapes(true)\n\n                OneTimeActionType.ShowFormatPanel ->\n                    uiStateManager.updateUiState(UiStatePayload.ShapeToolVisibility(true))\n\n                OneTimeActionType.HideFormatPanel ->\n                    uiStateManager.updateUiState(UiStatePayload.ShapeToolVisibility(false))\n\n                OneTimeActionType.ShowKeyboardShortcuts ->\n                    KeyboardShortcuts.showHint()\n\n                // ---------\n                OneTimeActionType.CopyText ->\n                    exportSelectedShapes(false)\n                // ---------\n                OneTimeActionType.SelectAllShapes ->\n                    environment.selectAllShapes()\n\n                OneTimeActionType.DeselectShapes ->\n                    environment.clearSelectedShapes()\n\n                OneTimeActionType.DeleteSelectedShapes ->\n                    deleteSelectedShapes()\n\n                OneTimeActionType.EditSelectedShapes ->\n                    editSelectedShape(environment.getSelectedShapes().singleOrNull())\n\n                is OneTimeActionType.EditSelectedShape ->\n                    editSelectedShape(it.shape)\n\n                is OneTimeActionType.TextAlignment ->\n                    setTextAlignment(it.newHorizontalAlign, it.newVerticalAlign)\n                // ---------\n                is OneTimeActionType.MoveShapes ->\n                    moveSelectedShapes(it.offsetRow, it.offsetCol)\n\n                is OneTimeActionType.ChangeShapeBound ->\n                    setSelectedShapeBound(it.newLeft, it.newTop, it.newWidth, it.newHeight)\n                // ---------\n                is OneTimeActionType.ChangeShapeFillExtra ->\n                    setSelectedShapeFillExtra(it.isEnabled, it.newFillStyleId)\n\n                is OneTimeActionType.ChangeShapeBorderExtra ->\n                    setSelectedShapeBorderExtra(it.isEnabled, it.newBorderStyleId)\n\n                is OneTimeActionType.ChangeShapeBorderDashPatternExtra ->\n                    setSelectedShapeBorderDashPatternExtra(it.dash, it.gap, it.offset)\n\n                is OneTimeActionType.ChangeLineStrokeExtra ->\n                    setSelectedLineStrokeExtra(it.isEnabled, it.newStrokeStyleId)\n\n                is OneTimeActionType.ChangeLineStrokeDashPatternExtra ->\n                    setSelectedLineStrokeDashPattern(it.dash, it.gap, it.offset)\n\n                is OneTimeActionType.ChangeLineStartAnchorExtra ->\n                    setSelectedShapeStartAnchorExtra(it.isEnabled, it.newHeadId)\n\n                is OneTimeActionType.ChangeLineEndAnchorExtra ->\n                    setSelectedShapeEndAnchorExtra(it.isEnabled, it.newHeadId)\n                // ---------\n                is OneTimeActionType.ReorderShape ->\n                    changeShapeOrder(it.orderType)\n                // ---------\n                is OneTimeActionType.Copy ->\n                    clipboardManager.copySelectedShapes(it.isRemoveRequired)\n\n                OneTimeActionType.Duplicate ->\n                    clipboardManager.duplicateSelectedShapes()\n                // ---------\n                OneTimeActionType.Undo ->\n                    stateHistoryManager.undo()\n\n                OneTimeActionType.Redo ->\n                    stateHistoryManager.redo()\n            }.exhaustive\n        }\n    }\n\n    private fun saveCurrentShapesToFile() {\n        val serializableRoot = environment.shapeManager.root.toSerializableShape(true)\n        fileMediator.saveFile(ShapeSerializationUtil.toJson(serializableRoot))\n    }\n\n    private fun loadShapesFromFile() {\n        fileMediator.openFile { jsonString ->\n            val serializableRoot = ShapeSerializationUtil.fromJson(jsonString) as? SerializableGroup\n            if (serializableRoot != null) {\n                stateHistoryManager.clear()\n                environment.replaceRoot(RootGroup(serializableRoot))\n            }\n        }\n    }\n\n    private fun exportSelectedShapes(isModalRequired: Boolean) {\n        val selectedShapes = environment.getSelectedShapes()\n        val extractableShapes = when {\n            selectedShapes.isNotEmpty() ->\n                environment.workingParentGroup.items.filter { it in selectedShapes }\n\n            isModalRequired ->\n                listOf(environment.workingParentGroup)\n\n            else ->\n                emptyList()\n        }\n\n        exportShapesHelper.exportText(extractableShapes, isModalRequired)\n    }\n\n    private fun deleteSelectedShapes() {\n        for (shape in environment.getSelectedShapes()) {\n            environment.removeShape(shape)\n        }\n        environment.clearSelectedShapes()\n    }\n\n    private fun editSelectedShape(shape: AbstractShape?) {\n        when (shape) {\n            is Text -> {\n                environment.enterEditingMode()\n                val oldText = shape.text\n                environment.shapeManager.execute(MakeTextEditable(shape))\n                environment.shapeManager.execute(UpdateTextEditingMode(shape, true))\n                EditTextShapeHelper.showEditTextDialog(environment, shape, false) {\n                    environment.shapeManager.execute(UpdateTextEditingMode(shape, false))\n                    environment.exitEditingMode(oldText != shape.text)\n                }\n            }\n\n            is Line,\n            is Rectangle,\n            is MockShape,\n            is Group,\n            null -> Unit\n        }.exhaustive\n    }\n\n    private fun setTextAlignment(\n        horizontalAlign: TextAlign.HorizontalAlign?,\n        verticalAlign: TextAlign.VerticalAlign?\n    ) {\n        val textShape = environment.getSelectedShapes().singleOrNull() as? Text\n        if (textShape == null) {\n            ShapeExtraManager.setDefaultValues(\n                textHorizontalAlign = horizontalAlign,\n                textVerticalAlign = verticalAlign\n            )\n            return\n        }\n        val newTextAlign = textShape.extra.textAlign.copy(\n            horizontalAlign ?: textShape.extra.textAlign.horizontalAlign,\n            verticalAlign ?: textShape.extra.textAlign.verticalAlign\n        )\n        val newExtra = textShape.extra.copy(textAlign = newTextAlign)\n        environment.shapeManager.execute(ChangeExtra(textShape, newExtra))\n    }\n\n    private fun moveSelectedShapes(offsetRow: Int, offsetCol: Int) {\n        val selectedShapes = environment.getSelectedShapes()\n        for (shape in selectedShapes) {\n            val bound = shape.bound\n            val newPosition = Point(bound.left + offsetCol, bound.top + offsetRow)\n            val newBound = shape.bound.copy(position = newPosition)\n            environment.shapeManager.execute(ChangeBound(shape, newBound))\n        }\n        environment.updateInteractionBounds()\n    }\n\n    private fun setSelectedShapeBound(left: Int?, top: Int?, width: Int?, height: Int?) {\n        val singleShape = environment.getSelectedShapes().singleOrNull() ?: return\n        val currentBound = singleShape.bound\n        val newLeft = left ?: currentBound.left\n        val newTop = top ?: currentBound.top\n        val newWidth = width ?: currentBound.width\n        val newHeight = height ?: currentBound.height\n        environment.shapeManager.execute(\n            ChangeBound(singleShape, Rect.byLTWH(newLeft, newTop, newWidth, newHeight))\n        )\n        environment.updateInteractionBounds()\n    }\n\n    private fun setSelectedShapeFillExtra(isEnabled: Boolean?, newFillStyleId: String?) {\n        val singleShape = environment.getSelectedShapes().singleOrNull()\n\n        if (singleShape == null) {\n            ShapeExtraManager.setDefaultValues(\n                isFillEnabled = isEnabled,\n                fillStyleId = newFillStyleId\n            )\n            return\n        }\n\n        val currentRectangleExtra = when (singleShape) {\n            is Rectangle -> singleShape.extra\n            is Text -> singleShape.extra.boundExtra\n            is Line,\n            is MockShape,\n            is Group -> null\n        } ?: return\n        val newIsFillEnabled = isEnabled ?: currentRectangleExtra.isFillEnabled\n        val newFillStyle = ShapeExtraManager.getRectangleFillStyle(\n            newFillStyleId,\n            currentRectangleExtra.userSelectedFillStyle\n        )\n        val rectangleExtra = currentRectangleExtra.copy(\n            isFillEnabled = newIsFillEnabled,\n            userSelectedFillStyle = newFillStyle\n        )\n        val newExtra = when (singleShape) {\n            is Rectangle -> rectangleExtra\n            is Text -> singleShape.extra.copy(boundExtra = rectangleExtra)\n            is Line,\n            is MockShape,\n            is Group -> null\n        } ?: return\n        environment.shapeManager.execute(ChangeExtra(singleShape, newExtra))\n    }\n\n    private fun setSelectedShapeBorderExtra(isEnabled: Boolean?, newBorderStyleId: String?) {\n        val singleShape = environment.getSelectedShapes().singleOrNull()\n        if (singleShape == null) {\n            ShapeExtraManager.setDefaultValues(\n                isBorderEnabled = isEnabled,\n                borderStyleId = newBorderStyleId\n            )\n            return\n        }\n\n        val currentRectangleExtra = when (singleShape) {\n            is Rectangle -> singleShape.extra\n            is Text -> singleShape.extra.boundExtra\n            is Line,\n            is MockShape,\n            is Group -> null\n        } ?: return\n        val newIsBorderEnabled = isEnabled ?: currentRectangleExtra.isBorderEnabled\n        val newBorderStyle = ShapeExtraManager.getRectangleBorderStyle(\n            newBorderStyleId,\n            currentRectangleExtra.userSelectedBorderStyle\n        )\n        val rectangleExtra = currentRectangleExtra.copy(\n            isBorderEnabled = newIsBorderEnabled,\n            userSelectedBorderStyle = newBorderStyle\n        )\n        val newExtra = when (singleShape) {\n            is Rectangle -> rectangleExtra\n            is Text -> singleShape.extra.copy(boundExtra = rectangleExtra)\n            is Line,\n            is MockShape,\n            is Group -> null\n        } ?: return\n        environment.shapeManager.execute(ChangeExtra(singleShape, newExtra))\n    }\n\n    private fun setSelectedShapeBorderDashPatternExtra(dash: Int?, gap: Int?, offset: Int?) {\n        val singleShape = environment.getSelectedShapes().singleOrNull() ?: return\n        val rectangleExtra = when (singleShape) {\n            is Rectangle -> singleShape.extra\n            is Text -> singleShape.extra.boundExtra\n            is Group,\n            is Line,\n            is MockShape -> null\n        }\n        val currentPattern = rectangleExtra?.dashPattern ?: return\n        val newPattern = currentPattern.copy(\n            dash = dash ?: currentPattern.dash,\n            gap = gap ?: currentPattern.gap,\n            offset = offset ?: currentPattern.offset\n        )\n        val newRectangleExtra = rectangleExtra.copy(dashPattern = newPattern)\n        val newExtra = when (singleShape) {\n            is Rectangle -> newRectangleExtra\n            is Text -> singleShape.extra.copy(boundExtra = newRectangleExtra)\n            is Group,\n            is Line,\n            is MockShape -> null\n        } ?: return\n        environment.shapeManager.execute(ChangeExtra(singleShape, newExtra))\n    }\n\n    private fun setSelectedLineStrokeExtra(isEnabled: Boolean?, newStrokeStyleId: String?) {\n        val line = environment.getSelectedShapes().singleOrNull() as? Line\n        if (line == null) {\n            ShapeExtraManager.setDefaultValues(\n                isLineStrokeEnabled = isEnabled,\n                lineStrokeStyleId = newStrokeStyleId\n            )\n            return\n        }\n\n        val currentLineExtra = line.extra\n        val newIsEnabled = isEnabled ?: currentLineExtra.isStrokeEnabled\n        val newStrokeStyle = ShapeExtraManager.getLineStrokeStyle(\n            newStrokeStyleId,\n            currentLineExtra.userSelectedStrokeStyle\n        )\n        val newExtra = currentLineExtra.copy(\n            isStrokeEnabled = newIsEnabled,\n            userSelectedStrokeStyle = newStrokeStyle\n        )\n        environment.shapeManager.execute(ChangeExtra(line, newExtra))\n    }\n\n    private fun setSelectedLineStrokeDashPattern(dash: Int?, gap: Int?, offset: Int?) {\n        val line = environment.getSelectedShapes().singleOrNull() as? Line ?: return\n        val currentExtra = line.extra\n        val currentPattern = currentExtra.dashPattern\n        val newPattern = currentPattern.copy(\n            dash = dash ?: currentPattern.dash,\n            gap = gap ?: currentPattern.gap,\n            offset = offset ?: currentPattern.offset\n        )\n        val newExtra = currentExtra.copy(dashPattern = newPattern)\n        environment.shapeManager.execute(ChangeExtra(line, newExtra))\n    }\n\n    private fun setSelectedShapeStartAnchorExtra(isEnabled: Boolean?, newAnchorId: String?) {\n        val line = environment.getSelectedShapes().singleOrNull() as? Line\n        if (line == null) {\n            ShapeExtraManager.setDefaultValues(\n                isStartHeadAnchorCharEnabled = isEnabled,\n                startHeadAnchorCharId = newAnchorId\n            )\n            return\n        }\n\n        val currentExtra = line.extra\n        val newIsEnabled = isEnabled ?: currentExtra.isStartAnchorEnabled\n        val newAnchor =\n            ShapeExtraManager.getStartHeadAnchorChar(\n                newAnchorId,\n                currentExtra.userSelectedStartAnchor\n            )\n        val newExtra = currentExtra.copy(\n            isStartAnchorEnabled = newIsEnabled,\n            userSelectedStartAnchor = newAnchor\n        )\n        environment.shapeManager.execute(ChangeExtra(line, newExtra))\n    }\n\n    private fun setSelectedShapeEndAnchorExtra(isEnabled: Boolean?, newAnchorId: String?) {\n        val line = environment.getSelectedShapes().singleOrNull() as? Line\n        if (line == null) {\n            ShapeExtraManager.setDefaultValues(\n                isEndHeadAnchorCharEnabled = isEnabled,\n                endHeadAnchorCharId = newAnchorId\n            )\n            return\n        }\n        val currentExtra = line.extra\n        val newIsEnabled = isEnabled ?: currentExtra.isEndAnchorEnabled\n        val newAnchor =\n            ShapeExtraManager.getEndHeadAnchorChar(\n                newAnchorId,\n                currentExtra.userSelectedEndAnchor\n            )\n        val newExtra = currentExtra.copy(\n            isEndAnchorEnabled = newIsEnabled,\n            userSelectedEndAnchor = newAnchor\n        )\n        environment.shapeManager.execute(ChangeExtra(line, newExtra))\n    }\n\n    private fun changeShapeOrder(orderType: ChangeOrder.ChangeOrderType) {\n        val singleShape = environment.getSelectedShapes().singleOrNull() ?: return\n        environment.shapeManager.execute(ChangeOrder(singleShape, orderType))\n    }\n}\n","package mono.state\n\nimport mono.common.setTimeout\nimport mono.environment.Build\nimport mono.graphics.geo.Point\nimport mono.html.canvas.CanvasViewController\nimport mono.lifecycle.LifecycleOwner\nimport mono.livedata.combineLiveData\nimport mono.shape.serialization.SerializableGroup\nimport mono.shape.serialization.ShapeSerializationUtil\nimport mono.shape.shape.RootGroup\nimport mono.state.command.CommandEnvironment\nimport mono.store.manager.StoreManager\nimport mono.uuid.UUID\n\n/**\n * A class which manages state history of the shapes.\n */\ninternal class StateHistoryManager(\n    private val lifecycleOwner: LifecycleOwner,\n    private val environment: CommandEnvironment,\n    private val storeManager: StoreManager,\n    private val canvasViewController: CanvasViewController\n) {\n    private val historyStack = HistoryStack()\n\n    init {\n        migrationTo1_1_0()\n    }\n\n    fun restoreAndStartObserveStateChange(rootId: String) {\n        val adjustedRootId = rootId.ifEmpty {\n            storeManager.get(BACKUP_LAST_OPEN_PROJECT_KEY) ?: UUID.generate()\n        }\n\n        restoreShapes(adjustedRootId)\n        restoreOffset(adjustedRootId)\n\n        storeManager.set(BACKUP_LAST_OPEN_PROJECT_KEY, adjustedRootId)\n\n        combineLiveData(\n            environment.shapeManager.versionLiveData,\n            environment.editingModeLiveData\n        ) { versionCode, editingMode ->\n            if (!editingMode.isEditing && versionCode != editingMode.skippedVersion) {\n                registerBackupShapes(versionCode)\n            }\n        }\n\n        canvasViewController.drawingOffsetPointPxLiveData.observe(lifecycleOwner) {\n            val backupKey = getBackupKey(BACKUP_OFFSET_KEY, environment.shapeManager.root.id)\n            storeManager.set(backupKey, \"${it.left}|${it.top}\")\n        }\n    }\n\n    fun clear() = historyStack.clear()\n\n    fun undo() {\n        val history = historyStack.undo() ?: return\n        val root = RootGroup(history.serializableGroup)\n        environment.replaceRoot(root)\n    }\n\n    fun redo() {\n        val history = historyStack.redo() ?: return\n        val root = RootGroup(history.serializableGroup)\n        environment.replaceRoot(root)\n    }\n\n    private fun registerBackupShapes(version: Int) {\n        setTimeout(300) {\n            // Only backup if the shape manager is idle.\n            if (environment.shapeManager.versionLiveData.value == version) {\n                backupShapes()\n            }\n        }\n    }\n\n    private fun backupShapes() {\n        val root = environment.shapeManager.root\n        val serializableGroup = root.toSerializableShape(true) as SerializableGroup\n\n        historyStack.pushState(root.versionCode, serializableGroup)\n\n        val backupKey = getBackupKey(BACKUP_SHAPES_KEY, root.id)\n        val jsonRoot = ShapeSerializationUtil.toJson(serializableGroup)\n        storeManager.set(backupKey, jsonRoot)\n    }\n\n    private fun restoreShapes(rootId: String = \"\") {\n        val backupKey = getBackupKey(BACKUP_SHAPES_KEY, rootId)\n        val rootJson = storeManager.get(backupKey)\n        val serializableGroup =\n            rootJson?.let(ShapeSerializationUtil::fromJson) as? SerializableGroup\n        val rootGroup = if (serializableGroup != null) {\n            RootGroup(serializableGroup)\n        } else {\n            RootGroup(rootId)\n        }\n        environment.replaceRoot(rootGroup)\n    }\n\n    private fun restoreOffset(rootId: String = \"\") {\n        val backupKey = getBackupKey(BACKUP_OFFSET_KEY, rootId)\n        val storedOffsetString = storeManager.get(backupKey) ?: return\n        val (leftString, topString) = storedOffsetString.split('|').takeIf { it.size == 2 }\n            ?: return\n        val left = leftString.toIntOrNull() ?: return\n        val top = topString.toIntOrNull() ?: return\n        val offset = Point(left, top)\n        canvasViewController.setOffset(offset)\n    }\n\n    @Suppress(\"FunctionName\")\n    private fun migrationTo1_1_0() {\n        val defaultBackupShapeJson = storeManager.get(BACKUP_SHAPES_KEY)\n        if (defaultBackupShapeJson.isNullOrEmpty()) {\n            return\n        }\n        val serializableGroup =\n            ShapeSerializationUtil.fromJson(defaultBackupShapeJson)\n        val id = serializableGroup?.id ?: return\n        storeManager.set(getBackupKey(BACKUP_SHAPES_KEY, id), defaultBackupShapeJson)\n\n        val defaultBackupOffsetValue = storeManager.get(BACKUP_OFFSET_KEY)\n        if (defaultBackupOffsetValue != null) {\n            storeManager.set(getBackupKey(BACKUP_OFFSET_KEY, id), defaultBackupOffsetValue)\n        }\n\n        storeManager.remove(BACKUP_SHAPES_KEY)\n        storeManager.remove(BACKUP_OFFSET_KEY)\n\n        storeManager.set(BACKUP_LAST_OPEN_PROJECT_KEY, id)\n    }\n\n    private fun getBackupKey(prefix: String, rootId: String): String = \"$prefix:$rootId\"\n\n    private class HistoryStack {\n        private val undoStack = mutableListOf<History>()\n        private val redoStack = mutableListOf<History>()\n\n        fun pushState(version: Int, state: SerializableGroup) {\n            if (version == undoStack.lastOrNull()?.versionCode) {\n                return\n            }\n            undoStack.add(History(version, state))\n            redoStack.clear()\n            if (Build.DEBUG) {\n                println(\"Push history stack ${undoStack.map { it.versionCode }}\")\n            }\n        }\n\n        fun clear() {\n            undoStack.clear()\n            redoStack.clear()\n        }\n\n        fun undo(): History? {\n            if (undoStack.size <= 1) {\n                return null\n            }\n            val currentState = undoStack.removeLastOrNull()\n            if (currentState != null) {\n                redoStack.add(currentState)\n            }\n            return undoStack.lastOrNull()\n        }\n\n        fun redo(): History? {\n            val currentState = redoStack.removeLastOrNull()\n            if (currentState != null) {\n                undoStack.add(currentState)\n            }\n            return currentState\n        }\n    }\n\n    private class History(val versionCode: Int, val serializableGroup: SerializableGroup)\n\n    companion object {\n        private const val BACKUP_SHAPES_KEY = \"backup-shapes\"\n        private const val BACKUP_OFFSET_KEY = \"offset\"\n        private const val BACKUP_LAST_OPEN_PROJECT_KEY = \"last-open\"\n    }\n}\n","package mono.state.command\n\nimport mono.graphics.geo.DirectedPoint\nimport mono.graphics.geo.Point\nimport mono.graphics.geo.Rect\nimport mono.livedata.LiveData\nimport mono.shape.ShapeManager\nimport mono.shape.shape.AbstractShape\nimport mono.shape.shape.Group\nimport mono.shape.shape.RootGroup\nimport mono.shapebound.InteractionPoint\nimport mono.shapesearcher.ShapeSearcher\n\n/**\n * An interface defines apis for command to interact with the environment.\n */\ninternal interface CommandEnvironment {\n    val shapeManager: ShapeManager\n    val shapeSearcher: ShapeSearcher\n\n    val editingModeLiveData: LiveData<EditingMode>\n\n    val workingParentGroup: Group\n\n    fun replaceRoot(newRoot: RootGroup)\n\n    fun enterEditingMode()\n\n    fun exitEditingMode(isNewStateAccepted: Boolean)\n\n    fun addShape(shape: AbstractShape?)\n\n    fun removeShape(shape: AbstractShape?)\n\n    fun getWindowBound(): Rect\n\n    fun getInteractionPoint(pointPx: Point): InteractionPoint?\n\n    fun updateInteractionBounds()\n\n    fun isPointInInteractionBounds(point: Point): Boolean\n\n    fun setSelectionBound(bound: Rect?)\n\n    val selectedShapesLiveData: LiveData<Set<AbstractShape>>\n\n    fun getSelectedShapes(): Set<AbstractShape>\n\n    fun addSelectedShape(shape: AbstractShape?)\n\n    fun toggleShapeSelection(shape: AbstractShape)\n\n    fun selectAllShapes()\n\n    fun clearSelectedShapes()\n\n    fun getEdgeDirection(point: Point): DirectedPoint.Direction?\n\n    fun toXPx(column: Double): Double\n    fun toYPx(row: Double): Double\n    fun toWidthPx(width: Double): Double\n    fun toHeightPx(height: Double): Double\n\n    class EditingMode private constructor(val isEditing: Boolean, val skippedVersion: Int?) {\n        companion object {\n            private val EDIT = EditingMode(true, null)\n            private val IDLE = EditingMode(false, null)\n\n            fun edit(): EditingMode = EDIT\n            fun idle(skippedVersion: Int?): EditingMode =\n                if (skippedVersion == null) IDLE else EditingMode(false, skippedVersion)\n        }\n    }\n}\n","package mono.state.command\n\nimport mono.actionmanager.RetainableActionType\nimport mono.graphics.geo.MousePointer\nimport mono.shape.shape.Line\nimport mono.shapebound.InteractionPoint\nimport mono.shapebound.LineInteractionPoint\nimport mono.shapebound.ScaleInteractionPoint\nimport mono.state.command.mouse.AddLineMouseCommand\nimport mono.state.command.mouse.AddTextMouseCommand\nimport mono.state.command.mouse.LineInteractionMouseCommand\nimport mono.state.command.mouse.MouseCommand\nimport mono.state.command.mouse.MoveShapeMouseCommand\nimport mono.state.command.mouse.ScaleShapeMouseCommand\nimport mono.state.command.mouse.SelectShapeMouseCommand\n\n/**\n * A factory of [MouseCommand].\n */\ninternal object MouseCommandFactory {\n    fun getCommand(\n        commandEnvironment: CommandEnvironment,\n        mousePointer: MousePointer,\n        commandType: RetainableActionType\n    ): MouseCommand? = when (mousePointer) {\n        is MousePointer.Down -> detectMouseCommandWithMouseDown(\n            commandEnvironment,\n            mousePointer,\n            commandType\n        )\n        is MousePointer.Click ->\n            if (commandType == RetainableActionType.IDLE) SelectShapeMouseCommand else null\n        is MousePointer.DoubleClick -> null\n        is MousePointer.Move,\n        is MousePointer.Drag,\n        is MousePointer.Up,\n        MousePointer.Idle -> null\n    }\n\n    private fun detectMouseCommandWithMouseDown(\n        commandEnvironment: CommandEnvironment,\n        mousePointer: MousePointer.Down,\n        commandType: RetainableActionType\n    ): MouseCommand {\n        val interactionCommand = detectInteractionCommand(commandEnvironment, mousePointer)\n        if (interactionCommand != null) {\n            return interactionCommand\n        }\n\n        return when (commandType) {\n            RetainableActionType.ADD_RECTANGLE -> AddTextMouseCommand(false)\n            RetainableActionType.ADD_TEXT -> AddTextMouseCommand(true)\n            RetainableActionType.ADD_LINE -> AddLineMouseCommand()\n            RetainableActionType.IDLE -> SelectShapeMouseCommand\n        }\n    }\n\n    private fun detectInteractionCommand(\n        commandEnvironment: CommandEnvironment,\n        mousePointer: MousePointer.Down\n    ): MouseCommand? {\n        val selectedShapes = commandEnvironment.getSelectedShapes()\n        if (selectedShapes.isEmpty()) {\n            return null\n        }\n\n        val sharpBoundInteractionCommand = createShapeBoundInteractionMouseCommandIfValid(\n            commandEnvironment,\n            commandEnvironment.getInteractionPoint(mousePointer.pointPx)\n        )\n        if (sharpBoundInteractionCommand != null) {\n            return sharpBoundInteractionCommand\n        }\n\n        if (!mousePointer.isWithShiftKey &&\n            commandEnvironment.isPointInInteractionBounds(mousePointer.point)\n        ) {\n            return MoveShapeMouseCommand(selectedShapes)\n        }\n        return null\n    }\n\n    private fun createShapeBoundInteractionMouseCommandIfValid(\n        commandEnvironment: CommandEnvironment,\n        interactionPoint: InteractionPoint?\n    ): MouseCommand? {\n        if (interactionPoint == null) {\n            return null\n        }\n        val shape =\n            commandEnvironment.shapeManager.getShape(interactionPoint.shapeId) ?: return null\n        return when (interactionPoint) {\n            is ScaleInteractionPoint -> ScaleShapeMouseCommand(shape, interactionPoint)\n            is LineInteractionPoint ->\n                if (shape is Line) LineInteractionMouseCommand(shape, interactionPoint) else null\n            null -> null\n        }\n    }\n}\n","package mono.state.command.mouse\n\nimport mono.common.MouseCursor\nimport mono.common.exhaustive\nimport mono.graphics.geo.DirectedPoint\nimport mono.graphics.geo.MousePointer\nimport mono.graphics.geo.Point\nimport mono.shape.command.MoveLineAnchor\nimport mono.shape.shape.Line\nimport mono.state.command.CommandEnvironment\nimport kotlin.math.abs\n\ninternal class AddLineMouseCommand : MouseCommand {\n    override val mouseCursor: MouseCursor = MouseCursor.CROSSHAIR\n\n    private var workingShape: Line? = null\n\n    override fun execute(\n        environment: CommandEnvironment,\n        mousePointer: MousePointer\n    ): MouseCommand.CommandResultType =\n        when (mousePointer) {\n            is MousePointer.Down -> {\n                val edgeDirection = environment.getEdgeDirection(mousePointer.point)\n                val direction =\n                    edgeDirection?.normalizedDirection ?: DirectedPoint.Direction.HORIZONTAL\n                val shape = Line(\n                    DirectedPoint(direction, mousePointer.point),\n                    DirectedPoint(DirectedPoint.Direction.VERTICAL, mousePointer.point),\n                    parentId = environment.workingParentGroup.id\n                )\n                workingShape = shape\n                environment.addShape(shape)\n                environment.clearSelectedShapes()\n                MouseCommand.CommandResultType.WORKING\n            }\n            is MousePointer.Drag -> {\n                environment.changeEndAnchor(\n                    environment,\n                    mousePointer.point,\n                    mousePointer.isWithShiftKey,\n                    isReducedRequired = false\n                )\n                MouseCommand.CommandResultType.WORKING\n            }\n            is MousePointer.Up -> {\n                environment.changeEndAnchor(\n                    environment,\n                    mousePointer.point,\n                    mousePointer.isWithShiftKey,\n                    isReducedRequired = true\n                )\n                environment.addSelectedShape(workingShape)\n                MouseCommand.CommandResultType.DONE\n            }\n\n            is MousePointer.Move,\n            is MousePointer.Click,\n            is MousePointer.DoubleClick,\n            MousePointer.Idle -> MouseCommand.CommandResultType.UNKNOWN\n        }.exhaustive\n\n    private fun CommandEnvironment.changeEndAnchor(\n        environment: CommandEnvironment,\n        point: Point,\n        isStraightLineMode: Boolean,\n        isReducedRequired: Boolean\n    ) {\n        val line = workingShape ?: return\n        val endPoint = adjustEndPoint(line.startPoint.point, point, isStraightLineMode)\n        val edgeDirection = environment.getEdgeDirection(point)\n        val direction = edgeDirection?.normalizedDirection ?: line.getDirection(Line.Anchor.END)\n        val anchorPointUpdate = Line.AnchorPointUpdate(\n            Line.Anchor.END,\n            DirectedPoint(direction, endPoint)\n        )\n        shapeManager.execute(MoveLineAnchor(line, anchorPointUpdate, isReducedRequired))\n    }\n\n    private fun adjustEndPoint(\n        startPoint: Point,\n        candidateEndPoint: Point,\n        isStraightLineMode: Boolean\n    ): Point {\n        if (!isStraightLineMode) {\n            return candidateEndPoint\n        }\n        val width = abs(startPoint.left - candidateEndPoint.left)\n        val height = abs(startPoint.top - candidateEndPoint.top)\n        return if (width > height) {\n            Point(candidateEndPoint.left, startPoint.top)\n        } else {\n            Point(startPoint.left, candidateEndPoint.top)\n        }\n    }\n}\n","package mono.state.command.mouse\n\nimport mono.common.MouseCursor\nimport mono.common.exhaustive\nimport mono.graphics.geo.MousePointer\nimport mono.graphics.geo.Point\nimport mono.graphics.geo.Rect\nimport mono.graphics.geo.Size\nimport mono.shape.command.ChangeBound\nimport mono.shape.command.ChangeExtra\nimport mono.shape.command.UpdateTextEditingMode\nimport mono.shape.extra.TextExtra\nimport mono.shape.extra.style.TextAlign\nimport mono.shape.shape.Text\nimport mono.state.command.CommandEnvironment\nimport mono.state.command.text.EditTextShapeHelper\n\n/**\n * A [MouseCommand] to add new text shape.\n * This command does two jobs:\n * 1. Identify the initial bound for the text shape\n * 2. Open a modal for entering text content when mouse up.\n */\ninternal class AddTextMouseCommand(private val isTextEditable: Boolean) : MouseCommand {\n    override val mouseCursor: MouseCursor = MouseCursor.CROSSHAIR\n\n    private var workingShape: Text? = null\n    override fun execute(\n        environment: CommandEnvironment,\n        mousePointer: MousePointer\n    ): MouseCommand.CommandResultType =\n        when (mousePointer) {\n            is MousePointer.Down -> {\n                val shape = Text(\n                    mousePointer.point,\n                    mousePointer.point,\n                    parentId = environment.workingParentGroup.id,\n                    isTextEditable = isTextEditable\n                )\n                workingShape = shape\n                environment.addShape(shape)\n                environment.clearSelectedShapes()\n                MouseCommand.CommandResultType.WORKING\n            }\n            is MousePointer.Drag -> {\n                environment.changeShapeBound(mousePointer.mouseDownPoint, mousePointer.point)\n                MouseCommand.CommandResultType.WORKING\n            }\n            is MousePointer.Up -> {\n                onMouseUp(environment, mousePointer)\n                MouseCommand.CommandResultType.WORKING_PHASE2\n            }\n\n            is MousePointer.Move,\n            is MousePointer.Click,\n            is MousePointer.DoubleClick,\n            MousePointer.Idle -> MouseCommand.CommandResultType.UNKNOWN\n        }.exhaustive\n\n    private fun onMouseUp(environment: CommandEnvironment, mousePointer: MousePointer.Up) {\n        val text = workingShape ?: return\n        environment.changeShapeBound(mousePointer.mouseDownPoint, mousePointer.point)\n\n        val isFreeText = text.isFreeText()\n        if (isFreeText) {\n            environment.makeTextFree(text)\n        } else {\n            environment.addSelectedShape(text)\n        }\n\n        if (isTextEditable) {\n            enterTextTypeMode(environment, text, isFreeText)\n        }\n    }\n\n    private fun Text.isFreeText(): Boolean =\n        isTextEditable && bound.width == 1 && bound.height == 1\n\n    private fun CommandEnvironment.makeTextFree(text: Text) {\n        val boundExtra =\n            text.extra.boundExtra.copy(isFillEnabled = false, isBorderEnabled = false)\n        val textAlignExtra =\n            text.extra.textAlign.copy(\n                horizontalAlign = TextAlign.HorizontalAlign.LEFT,\n                verticalAlign = TextAlign.VerticalAlign.TOP\n            )\n        val changeExtraCommand = ChangeExtra(text, TextExtra(boundExtra, textAlignExtra))\n        shapeManager.execute(changeExtraCommand)\n    }\n\n    private fun enterTextTypeMode(\n        environment: CommandEnvironment,\n        text: Text,\n        isFreeText: Boolean\n    ) {\n        environment.enterEditingMode()\n        environment.shapeManager.execute(UpdateTextEditingMode(text, true))\n        EditTextShapeHelper.showEditTextDialog(environment, text, isFreeText) {\n            environment.shapeManager.execute(UpdateTextEditingMode(text, false))\n            environment.adjustTextShape(text, isFreeText)\n\n            environment.exitEditingMode(it.isNotEmpty())\n            workingShape = null\n        }\n    }\n\n    private fun CommandEnvironment.adjustTextShape(text: Text, isFreeText: Boolean) {\n        if (isFreeText && text.text.isEmpty()) {\n            removeShape(text)\n            return\n        }\n\n        val newSize = if (isFreeText) {\n            text.getFreeTextActualSize()\n        } else {\n            text.getNormalTextActualSize()\n        }\n        val newBound = text.bound.copy(size = newSize)\n        shapeManager.execute(ChangeBound(text, newBound))\n        addSelectedShape(text)\n    }\n\n    private fun Text.getFreeTextActualSize(): Size {\n        val lines = text.split('\\n')\n        val maxWidth = lines.maxOf { it.length }\n        return Size(maxWidth, lines.size)\n    }\n\n    private fun Text.getNormalTextActualSize(): Size {\n        val height = if (extra.hasBorder()) {\n            renderableText.getRenderableText().size + 2\n        } else {\n            renderableText.getRenderableText().size\n        }\n        val newHeight = if (height > bound.height) height else bound.height\n        return Size(bound.width, newHeight)\n    }\n\n    private fun CommandEnvironment.changeShapeBound(point1: Point, point2: Point) {\n        val currentShape = workingShape ?: return\n        val rect = Rect.byLTRB(\n            left = point1.left,\n            top = point1.top,\n            right = point2.left,\n            bottom = point2.top\n        )\n\n        shapeManager.execute(ChangeBound(currentShape, rect))\n    }\n}\n","package mono.state.command.mouse\n\nimport mono.common.MouseCursor\nimport mono.common.exhaustive\nimport mono.graphics.geo.DirectedPoint\nimport mono.graphics.geo.MousePointer\nimport mono.graphics.geo.Point\nimport mono.shape.command.MoveLineAnchor\nimport mono.shape.command.MoveLineEdge\nimport mono.shape.shape.Line\nimport mono.shapebound.LineInteractionPoint\nimport mono.state.command.CommandEnvironment\n\n/**\n * A [MouseCommand] for moving anchor points or edges of Line shape.\n */\ninternal class LineInteractionMouseCommand(\n    private val lineShape: Line,\n    private val interactionPoint: LineInteractionPoint\n) : MouseCommand {\n    override val mouseCursor: MouseCursor? = null\n\n    override fun execute(\n        environment: CommandEnvironment,\n        mousePointer: MousePointer\n    ): MouseCommand.CommandResultType {\n        when (mousePointer) {\n            is MousePointer.Drag -> move(environment, mousePointer.point, false)\n            is MousePointer.Up -> move(environment, mousePointer.point, true)\n            is MousePointer.Down,\n            is MousePointer.Click,\n            is MousePointer.DoubleClick,\n            is MousePointer.Move,\n            MousePointer.Idle -> Unit\n        }.exhaustive\n\n        return if (mousePointer == MousePointer.Idle) {\n            MouseCommand.CommandResultType.DONE\n        } else {\n            MouseCommand.CommandResultType.WORKING\n        }\n    }\n\n    private fun move(environment: CommandEnvironment, point: Point, isReducedRequired: Boolean) {\n        when (interactionPoint) {\n            is LineInteractionPoint.Anchor ->\n                moveAnchor(environment, interactionPoint, point, isReducedRequired)\n            is LineInteractionPoint.Edge ->\n                moveEdge(environment, interactionPoint, point, isReducedRequired)\n        }\n    }\n\n    private fun moveAnchor(\n        environment: CommandEnvironment,\n        interactionPoint: LineInteractionPoint.Anchor,\n        point: Point,\n        isReducedRequired: Boolean\n    ) {\n        val edgeDirection = environment.getEdgeDirection(point)\n        val direction =\n            edgeDirection?.normalizedDirection ?: lineShape.getDirection(interactionPoint.anchor)\n        val anchorPointUpdate = Line.AnchorPointUpdate(\n            interactionPoint.anchor,\n            DirectedPoint(direction, point)\n        )\n        environment.shapeManager.execute(\n            MoveLineAnchor(\n                lineShape,\n                anchorPointUpdate,\n                isReducedRequired\n            )\n        )\n        environment.updateInteractionBounds()\n    }\n\n    private fun moveEdge(\n        environment: CommandEnvironment,\n        interactionPoint: LineInteractionPoint.Edge,\n        point: Point,\n        isReducedRequired: Boolean\n    ) {\n        environment.shapeManager.execute(\n            MoveLineEdge(\n                lineShape,\n                interactionPoint.edgeId,\n                point,\n                isReducedRequired\n            )\n        )\n        environment.updateInteractionBounds()\n    }\n}\n","package mono.state.command.mouse\n\nimport mono.common.MouseCursor\nimport mono.graphics.geo.MousePointer\nimport mono.graphics.geo.Point\nimport mono.shape.command.ChangeBound\nimport mono.shape.shape.AbstractShape\nimport mono.state.command.CommandEnvironment\nimport mono.state.command.mouse.MouseCommand.CommandResultType\n\n/**\n * A [MouseCommand] for moving selected shapes.\n */\ninternal class MoveShapeMouseCommand(private val shapes: Set<AbstractShape>) : MouseCommand {\n    override val mouseCursor: MouseCursor = MouseCursor.MOVE\n\n    private val initialPositions = shapes.associate { it.id to it.bound.position }\n\n    override fun execute(\n        environment: CommandEnvironment,\n        mousePointer: MousePointer\n    ): CommandResultType {\n        val offset = when (mousePointer) {\n            is MousePointer.Drag -> mousePointer.point - mousePointer.mouseDownPoint\n            is MousePointer.Up -> mousePointer.point - mousePointer.mouseDownPoint\n            is MousePointer.Down,\n            is MousePointer.Click,\n            is MousePointer.DoubleClick,\n            is MousePointer.Move,\n            MousePointer.Idle -> Point.ZERO\n        }\n\n        for (shape in shapes) {\n            val initialPosition = initialPositions[shape.id] ?: continue\n            val newPosition = initialPosition + offset\n            val newBound = shape.bound.copy(position = newPosition)\n            environment.shapeManager.execute(ChangeBound(shape, newBound))\n        }\n\n        environment.updateInteractionBounds()\n\n        val isDone = mousePointer is MousePointer.Up || mousePointer == MousePointer.Idle\n        return if (isDone) CommandResultType.DONE else CommandResultType.WORKING\n    }\n}\n","package mono.state.command.mouse\n\nimport mono.common.MouseCursor\nimport mono.common.exhaustive\nimport mono.graphics.geo.MousePointer\nimport mono.graphics.geo.Point\nimport mono.shape.command.ChangeBound\nimport mono.shape.shape.AbstractShape\nimport mono.shapebound.ScaleInteractionPoint\nimport mono.state.command.CommandEnvironment\n\n/**\n * A [MouseCommand] for scaling shape.\n */\ninternal class ScaleShapeMouseCommand(\n    private val shape: AbstractShape,\n    private val interactionPoint: ScaleInteractionPoint\n) : MouseCommand {\n    override val mouseCursor: MouseCursor? = null\n\n    private val initialBound = shape.bound\n    override fun execute(\n        environment: CommandEnvironment,\n        mousePointer: MousePointer\n    ): MouseCommand.CommandResultType {\n        when (mousePointer) {\n            is MousePointer.Drag -> scale(environment, mousePointer.point)\n            is MousePointer.Up -> scale(environment, mousePointer.point)\n            is MousePointer.Down,\n            is MousePointer.Click,\n            is MousePointer.DoubleClick,\n            is MousePointer.Move,\n            MousePointer.Idle -> Unit\n        }.exhaustive\n\n        return if (mousePointer == MousePointer.Idle) {\n            MouseCommand.CommandResultType.DONE\n        } else {\n            MouseCommand.CommandResultType.WORKING\n        }\n    }\n\n    private fun scale(environment: CommandEnvironment, point: Point) {\n        val newBound = interactionPoint.createNewShapeBound(initialBound, point)\n        environment.shapeManager.execute(ChangeBound(shape, newBound))\n\n        environment.updateInteractionBounds()\n    }\n}\n","package mono.state.command.mouse\n\nimport mono.common.MouseCursor\nimport mono.graphics.geo.MousePointer\nimport mono.graphics.geo.Rect\nimport mono.state.command.CommandEnvironment\n\n/**\n * A [MouseCommand] to select shapes.\n */\ninternal object SelectShapeMouseCommand : MouseCommand {\n    override val mouseCursor: MouseCursor = MouseCursor.DEFAULT\n\n    override fun execute(\n        environment: CommandEnvironment,\n        mousePointer: MousePointer\n    ): MouseCommand.CommandResultType =\n        when (mousePointer) {\n            is MousePointer.Down -> MouseCommand.CommandResultType.WORKING\n            is MousePointer.Drag -> {\n                environment.setSelectionBound(\n                    Rect.byLTRB(\n                        mousePointer.mouseDownPoint.left,\n                        mousePointer.mouseDownPoint.top,\n                        mousePointer.point.left,\n                        mousePointer.point.top\n                    )\n                )\n                MouseCommand.CommandResultType.WORKING\n            }\n            is MousePointer.Up -> {\n                environment.setSelectionBound(null)\n\n                val area = Rect.byLTRB(\n                    mousePointer.mouseDownPoint.left,\n                    mousePointer.mouseDownPoint.top,\n                    mousePointer.point.left,\n                    mousePointer.point.top\n                )\n\n                val shapes = if (area.width * area.height > 1) {\n                    environment.shapeSearcher.getAllShapesInZone(area)\n                } else {\n                    emptyList()\n                }\n\n                if (!mousePointer.isWithShiftKey) {\n                    environment.clearSelectedShapes()\n                }\n                for (shape in shapes) {\n                    environment.addSelectedShape(shape)\n                }\n                MouseCommand.CommandResultType.WORKING\n            }\n            is MousePointer.Click -> {\n                val shapes = environment.shapeSearcher.getShapes(mousePointer.point)\n                if (shapes.isNotEmpty()) {\n                    val shape = shapes.last()\n                    if (mousePointer.isWithShiftKey) {\n                        environment.toggleShapeSelection(shape)\n                    } else {\n                        environment.clearSelectedShapes()\n                        environment.addSelectedShape(shape)\n                    }\n                }\n                MouseCommand.CommandResultType.DONE\n            }\n            is MousePointer.DoubleClick,\n            is MousePointer.Move,\n            MousePointer.Idle -> MouseCommand.CommandResultType.DONE\n        }\n}\n","package mono.state.command.text\n\nimport mono.graphics.geo.Size\nimport mono.html.modal.EditTextModal\nimport mono.shape.command.ChangeBound\nimport mono.shape.command.ChangeText\nimport mono.shape.shape.Text\nimport mono.state.command.CommandEnvironment\n\n/**\n * A helper class to show edit text dialog for targeted text shape.\n */\ninternal object EditTextShapeHelper {\n    fun showEditTextDialog(\n        environment: CommandEnvironment,\n        textShape: Text,\n        isFreeText: Boolean,\n        onFinish: (String) -> Unit = {}\n    ) {\n        val contentBound = textShape.contentBound\n\n        val dialog = EditTextModal(textShape.text) {\n            environment.shapeManager.execute(ChangeText(textShape, it))\n            if (!isFreeText) {\n                environment.adjustNormalTextSize(textShape)\n            }\n        }\n        dialog.setOnDismiss {\n            onFinish(textShape.text)\n        }\n        val contentWidth =\n            if (isFreeText) {\n                (environment.getWindowBound().width - contentBound.left).coerceAtLeast(30)\n            } else {\n                contentBound.width\n            }\n        val contentHeight = if (isFreeText) 4 else contentBound.height\n        dialog.show(\n            environment.toXPx(contentBound.left.toDouble()),\n            environment.toYPx(contentBound.top.toDouble()),\n            environment.toWidthPx(contentWidth.toDouble()),\n            environment.toHeightPx(contentHeight.toDouble())\n        )\n    }\n\n    private fun CommandEnvironment.adjustNormalTextSize(text: Text) {\n        val newBound = text.bound.copy(size = text.getNormalTextActualSize())\n        shapeManager.execute(ChangeBound(text, newBound))\n        addSelectedShape(text)\n    }\n\n    private fun Text.getNormalTextActualSize(): Size {\n        val height = if (extra.hasBorder()) {\n            renderableText.getRenderableText().size + 2\n        } else {\n            renderableText.getRenderableText().size\n        }\n        val newHeight = if (height > bound.height) height else bound.height\n        return Size(bound.width, newHeight)\n    }\n}\n","package mono.store.manager\n\n/**\n * An object to gather all store keys to avoid conflict.\n *\n * TODO: Move all store keys which are in use to this object.\n */\nobject StoreKeys {\n    const val THEME_MODE = \"local-theme-mode\"\n}\n","package mono.store.manager\n\nimport kotlinx.browser.localStorage\nimport kotlinx.browser.window\nimport org.w3c.dom.StorageEvent\nimport org.w3c.dom.get\nimport org.w3c.dom.set\n\n/**\n * A class for managing storage.\n */\nclass StoreManager private constructor() {\n    private val keyToObserverMap: MutableMap<String, StoreObserver> = mutableMapOf()\n\n    init {\n        window.onstorage = ::onStorageChange\n    }\n\n    fun set(key: String, json: String) {\n        localStorage[key] = json\n    }\n\n    fun get(key: String): String? = localStorage[key]\n\n    fun remove(key: String) {\n        localStorage.removeItem(key)\n    }\n\n    fun setObserver(key: String, observer: StoreObserver) {\n        if (key in keyToObserverMap) {\n            error(\"$key's observer is set!\")\n        }\n        keyToObserverMap[key] = observer\n    }\n\n    fun removeObserver(key: String) {\n        keyToObserverMap.remove(key)\n    }\n\n    private fun onStorageChange(event: StorageEvent) {\n        val key = event.key ?: return\n        keyToObserverMap[key]?.onChange(key, event.oldValue, event.newValue)\n    }\n\n    /**\n     * An interface for observing storage change.\n     */\n    fun interface StoreObserver {\n        fun onChange(key: String, oldValue: String?, newValue: String?)\n    }\n\n    companion object {\n        private var instance: StoreManager? = null\n\n        fun getInstance(): StoreManager {\n            val nonNullInstance = instance ?: StoreManager()\n            instance = nonNullInstance\n            return nonNullInstance\n        }\n    }\n}\n",null,null,"package mono.ui.appstate\n\nimport mono.lifecycle.LifecycleOwner\nimport mono.store.manager.StoreKeys\nimport mono.store.manager.StoreManager\nimport mono.ui.theme.ThemeManager\nimport mono.ui.theme.ThemeMode\nimport org.w3c.dom.Element\n\n/**\n * A class for managing theme\n */\ninternal class AppThemeManager(\n    private val themeManager: ThemeManager,\n    private val storeManager: StoreManager\n) {\n    init {\n        val themeMode = storeManager.get(StoreKeys.THEME_MODE)\n            ?.let(ThemeMode::valueOf)\n            ?: ThemeMode.DARK\n        val themeManager = ThemeManager.getInstance()\n        themeManager.setTheme(themeMode)\n    }\n\n    fun observeTheme(\n        appLifecycleOwner: LifecycleOwner,\n        documentElement: Element,\n        forceUiUpdate: () -> Unit\n    ) {\n        themeManager.themeModeLiveData.observe(appLifecycleOwner) {\n            documentElement.className = when (it) {\n                ThemeMode.LIGHT -> THEME_LIGHT\n                ThemeMode.DARK -> THEME_DARK\n            }\n            forceUiUpdate()\n            storeManager.set(StoreKeys.THEME_MODE, it.name)\n        }\n\n        storeManager.setObserver(StoreKeys.THEME_MODE) { _, _, newValue ->\n            val themeMode = newValue?.let(ThemeMode::valueOf) ?: ThemeMode.DARK\n            themeManager.setTheme(themeMode)\n        }\n    }\n\n    companion object {\n        private const val THEME_LIGHT = \"light\"\n        private const val THEME_DARK = \"dark\"\n    }\n}\n","package mono.ui.appstate\n\nimport mono.lifecycle.LifecycleOwner\nimport mono.livedata.MutableLiveData\nimport mono.livedata.distinctUntilChange\nimport mono.store.manager.StoreManager\nimport mono.ui.theme.ThemeManager\nimport org.w3c.dom.Element\n\n/**\n * A class for managing the overall UI state of the app, including theme, visibility of a main\n * component, etc.\n */\nclass AppUiStateManager(\n    private val appLifecycleOwner: LifecycleOwner,\n    themeManager: ThemeManager = ThemeManager.getInstance(),\n    storageManager: StoreManager = StoreManager.getInstance()\n) {\n    private val appThemeManager = AppThemeManager(themeManager, storageManager)\n\n    private val shapeToolVisibilityMutableLiveData = MutableLiveData(true)\n    val shapeToolVisibilityLiveData = shapeToolVisibilityMutableLiveData.distinctUntilChange()\n\n    fun observeTheme(\n        documentElement: Element,\n        forceUiUpdate: () -> Unit\n    ) {\n        appThemeManager.observeTheme(appLifecycleOwner, documentElement, forceUiUpdate)\n    }\n\n    fun updateUiState(payload: UiStatePayload) {\n        when (payload) {\n            is UiStatePayload.ShapeToolVisibility ->\n                shapeToolVisibilityMutableLiveData.value = payload.isVisible\n        }\n    }\n\n    /**\n     * An interface for containing the payload of updating UI State.\n     */\n    sealed interface UiStatePayload {\n        class ShapeToolVisibility(val isVisible: Boolean) : UiStatePayload\n    }\n}\n","package mono.ui.theme\n\n/**\n * A class for enumerating all semantic colors.\n * [lightColorCode] and [darkColorCode] are the hex color code of RGB or RGBA used in CSS.\n */\nenum class ThemeColor(internal val lightColorCode: String, internal val darkColorCode: String) {\n    // Drawing space - Axis\n    AxisBackground(\"#EEEEEE\", \"#1E1E1E\"),\n    AxisText(\"#666666\", \"#666666\"),\n    AxisRule(\"#444444\", \"#666666\"),\n\n    // Drawing space - Grid\n    GridBackground(\"#FFFFFF\", \"#121212\"),\n    GridLine(\"#d9d9d9\", \"#282828\"),\n    GridLineZero(\"#BBBBBB\", \"#323232\"),\n\n    // Drawing space - Shape\n    Shape(\"#000000\", \"#F0F0F0\"),\n    ShapeSelected(\"#0D7CFF\", \"#FFD82F\"),\n    ShapeTextEditing(\"#0767C6\", \"#956d04\"),\n\n    // Drawing space - Selection\n    SelectionAreaStroke(\"#858585\", \"#858585\"),\n    SelectionBoundStroke(\"#64b5f6\", \"#FFE884\"),\n    SelectionDotStroke(\"#64b5f6\", \"#f2ae00\"),\n    SelectionDotFill(\"#FFFFFF\", \"#FFD51F\")\n    ;\n\n    val colorCode: String\n        get() = ThemeManager.getInstance().getColorCode(this)\n}\n","package mono.ui.theme\n\nimport mono.livedata.LiveData\nimport mono.livedata.MutableLiveData\nimport mono.livedata.distinctUntilChange\n\n/**\n * A class for managing the theme of the app.\n */\nclass ThemeManager private constructor(initialThemeMode: ThemeMode) {\n    private val themeModeMutableLiveData: MutableLiveData<ThemeMode> =\n        MutableLiveData(initialThemeMode)\n\n    val themeModeLiveData: LiveData<ThemeMode> = themeModeMutableLiveData.distinctUntilChange()\n\n    /**\n     * Gets color from [color] based on the current theme.\n     * The return is the hex code of RGB or RGBA, the same to the hex code used in CSS.\n     */\n    fun getColorCode(color: ThemeColor): String = when (themeModeLiveData.value) {\n        ThemeMode.LIGHT -> color.lightColorCode\n        ThemeMode.DARK -> color.darkColorCode\n    }\n\n    fun setTheme(themeMode: ThemeMode) {\n        themeModeMutableLiveData.value = themeMode\n    }\n\n    companion object {\n        private var instance: ThemeManager? = null\n\n        fun getInstance(): ThemeManager {\n            val nonNullInstance = instance ?: ThemeManager(ThemeMode.DARK)\n            instance = nonNullInstance\n            return nonNullInstance\n        }\n    }\n}\n","package mono.uuid\n\nimport kotlin.js.Date\nimport kotlin.random.Random\n\n/**\n * An object class that generate unique ID.\n *\n * Version 1:\n * ```\n * Structure: version datetime random random\n * Length   :   3        8      10     10\n * ```\n * Version: 01-\n * Datetime: Base64-like encoded current time (8 chars)\n * Random: Base64-like encoded random number (10 chars)\n */\nobject UUID {\n    const val VERSION = 1\n\n    private val BASE64_CHARS =\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+=\".toCharArray()\n\n    fun generate(): String {\n        val part1 = Date().getTime().toBits().toBase64().dropLast(3)\n        val part2 = Random.nextLong().toBase64()\n        val part3 = Random.nextLong().toBase64()\n        return \"0$VERSION-$part1$part2$part3\"\n    }\n\n    private fun Long.toBase64(): String {\n        var number = this\n        val chars = CharArray(10)\n        for (i in chars.indices) {\n            val v = number and 0b0111111\n            number = number ushr 6\n            chars[i] = BASE64_CHARS[v.toInt()]\n        }\n        return chars.joinToString(\"\")\n    }\n}\n","@file:Suppress(\"ktlint:filename\")\n\nimport kotlinx.browser.window\nimport mono.app.MonoSketchApplication\n\nfun main() {\n    val application = MonoSketchApplication()\n    window.onload = {\n        application.onStart()\n    }\n    window.onresize = {\n        application.onResize()\n    }\n}\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(305);\n"],"names":["root","factory","exports","module","define","amd","this","keyCommand","MoveShapes","Copy","MutableLiveData","distinctUntilChange","keyCommandLiveData","lifecycleOwner","actionType","DebugCommandController","debugCommand","console","log","command","params","action","error","Size","LifecycleOwner","MonoSketchAppModel","ShapeManager","SelectedShapeManager","MonoBitmapManager","size","document","body","getElementById","KeyCommandController","CanvasViewController","boardCanvasContainer","axisCanvasContainer","map","keyCommandController","it","ActionManager","actionManager","ShapeClipboardManager","canvasViewController","URLSearchParams","window","location","search","getInitialRootIdFromUrl","ToolbarViewController","ShapeToolViewController","documentElement","clientWidth","clientHeight","newSize","onkeydown","stopPropagation","durationMillis","AnimationFrame","requestAnimationFrame","Timeout","setTimeout","navigator","platform","cancelAnimationFrame","clearTimeout","isCommandKeySupported","metaKey","ctrlKey","Date","now","shapes","shape","drawShapesOntoExportingBoard","board","bitmap","pathBlock","SvgIcon","SvgPath","setOnClickListener","dismiss","Div","setAttributes","CopyButton","innerText","select","execCommand","addClass","nonNullRoot","remove","CloseButton","Content","left","top","right","bottom","exportingBoard","isModalRequired","ExportShapesModal","text","PrimitiveSerialDescriptor","Point","encoder","value","decoder","marshaledValue","toInt","base","direction","marshaledDirection","DirectedPoint","width","height","Rect","abs","point","rect","isHorizontalOverlap","attrs","key","setAttribute","toString","children","node","append","createElement","parent","classes","href","block","textContent","type","createSvgElement","svg","element","createElementNS","asSequence","attributes","TextArea","content","inputType","path","isApplicable","classList","add","clazz","querySelector","query","addEventListener","listener","styleOf","widthPx","heightPx","updateCanvasSize","DrawingInfoController","MediatorLiveData","MouseEventObserver","shiftKeyStateLiveData","axisContainer","drawingInfoLiveData","GridCanvasViewController","BoardCanvasViewController","InteractionCanvasViewController","SelectionCanvasViewController","windowSizeLiveData","tooltip","drawingInfo","canvasSizePx","isSizeChange","dpr","style","scale","BaseCanvasViewController","canvas","getContext","pixel","color","row","column","SizeF","container","bound","moveTo","leftPx","topPx","lineTo","rightPx","bottomPx","closePath","stroke","Path2D","beginPath","addDot","dotPath","fill","xPx","yPx","arc","emptyList","mousePointerLiveData","event","preventDefault","deltaX","deltaY","altKey","shiftKey","scrollDeltaX","scrollDeltaY","getScrollDelta","wheelDeltaLeft","wheelDeltaTop","accumulateWheelDeltaLeft","accumulateWheelDeltaTop","usableDeltaLeft","usableDeltaTop","offsetLeft","offsetTop","offsetX","offsetY","Down","toPoint","toPointPx","currentValue","Up","clickPoint","isDoubleClick","DoubleClick","Click","mousePointer","Drag","Move","newPointer","MouseDoubleClickDetector","onmousedown","onmouseup","onmousemove","onwheel","currentMouseValue","interactionBounds","pointPx","offsetPx","mouseCursor","fillRect","cellSizePx","fillText","col","xAxisHeight","drawAxis","clearRect","drawPixel","font","fontSize","getCellSizePx","offset","zeroX","y","maxX","x","zeroY","maxY","createGridPath","zeroLines","i","drawScalableInteractionBound","drawLineInteractionBound","reversed","isAround","setLineDash","Item","isVisible","item","Li","setOnFocusOut","focus","which","println","initItems","Input","textArea","oninput","lines","onpaste","insertText","keyCode","post","initTextArea","setOnMouseWheelListener","Tooltip","position","setOnMouseOverListener","setOnMouseOutListener","getBoundingClientRect","boundingRect","Span","tooltipLeft","tooltipTop","onDismiss","MouseActionGroupItem","selectedAction","ThemeIcon","DropDownMenuIcon","Text","listOf","DropDownMenu","items","getAttribute","Svg","isMacOs","Table","Shortcut","Key","length","bold","id","createAppearanceVisibilityLiveData","selectedShapesLiveData","single","toFillAppearanceVisibilityState","retainableActionTypeLiveData","defaultState","GridVisible","selectedFillPosition","toBorderAppearanceVisibilityState","singleOrNull","nullToFalse","boundExtra","selectedStrokePosition","extra","selectedStartHeadPosition","selectedStartHeaderPosition","selectedEndHeadPosition","combineLiveData","selectedShapeVisibilityLiveData","defaultVisibilityLiveData","selected","selectedBorderPosition","shapeManagerVersionLiveData","createFillAppearanceVisibilityLiveData","createBorderAppearanceVisibilityLiveData","createBorderDashPatternLiveData","createLineStrokeAppearanceVisibilityLiveData","createLineStrokeDashPatternLiveData","createStartHeadAppearanceVisibilityLiveData","createEndHeadAppearanceVisibilityLiveData","AppearanceOptionItem","AppearanceVisibility","liveData","setOnChangeListener","checked","isChecked","ToolCheckBox","CheckableTool","gridVisibleLiveData","filterNotNull","state","Options","DashPatternInput","DashPattern","ChangeShapeBorderDashPatternExtra","dash","gap","ChangeLineStrokeDashPatternExtra","Tool","bindClass","cssClass","ReorderShape","appendElement","currentTarget","hasClass","cls","singleShapeLiveData","toolContainer","toolIndicatorView","hasAnyVisibleToolLiveData","target","Visible","selectedTextAlignLiveData","defaultTextAlignLiveData","AppearanceDataController","ReorderSectionViewController","TransformToolViewController","AppearanceSectionViewController","TextSectionViewController","createTextAlignLiveData","addToolIndicatorView","reorderSectionViewController","transformToolViewController","appearanceSectionViewController","textSectionViewController","addFooterView","shapeToolVisibilityLiveData","TextAlignVisibility","textAlign","setOneTimeAction","textAlignLiveData","NumberCell","NumberCellInput","isSizeChangeable","isPositionEnabled","isSizeEnabled","setValue","retainableActionType","KeyboardShortcuts","ChangeShapeFillExtra","selectedId","ChangeShapeBorderExtra","ChangeLineStrokeExtra","ChangeLineStartAnchorExtra","ChangeLineEndAnchorExtra","TextAlignment","a","code","hasKey","hasCommandKey","hasShiftKey","lifecycleObserver","l","liveDatas","mediatorLiveData","initValue","TransformLiveData","transform","LiveData","LiveDataLifecycleOwner","newValue","timeoutTick","SimpleObserver","throttleDurationMillis","ThrottledObserver","OnStopLifecycleObserver","liveDataObserver","observer","liveData1","liveData2","liveData3","conversion","DistinctOnlyLiveData","NonNullOnlyLiveData","emptySequence","p0","p1","isHorizontal","strokeStyle","char","p2","Triple","flatMap","createLineChar","point0","point1","isHorizontal0","point2","isLeft","isUpper","getRightAngleChar","connectChar","line","connectPoint","last","lastLine","firstPoint","charPoints","lastLinePoint","lastPoint","anchor","previousPoint","anchorChar","Builder","sequenceOf","dashPattern","getCacheBitmap","cachedBitmap","BitmapBuilderDecoration","boundTop","boundLeft","boundRight","jointPoints","lineExtra","bitmapBuilder","startAnchor","putAnchorPoint","endAnchor","PointChar","beginExclusive","endExclusive","delta","begin","end","range","fillDrawable","drawBorder","boundSize","isTextEditingMode","bgBitmap","hasBorder","colOffset","coerceAtLeast","rowOffset","maxTextHeight","renderableText","take","rowIndex","horizontalAlign","maxTextWidth","colIndex","row0","col0","index","destIndex","chars","Cell","firstOrNull","inMatrixBound","overlap","startCol","startRow","inStartCol","inStartRow","r","inMatrix","src","Row","MonoBitmap","compareTo","foundLow","cell","toExclusiveIndex","fromIndex","getOrNull","builder","toSet","mapOf","leftIndex","rightIndex","topIndex","bottomIndex","getOrCreateBoard","isCreateRequired","affectedBoards","toBoardAddress","boardAddress","PainterBoard","newBoardPosition","createNewBoard","denominator","painterColumn","CrossPoint","bitmapColumn","highlight","hasLeft","hasHorizontal","hasTop","hasVertical","hasRight","hasBottom","BoardAddress","boardRowIndex","boardColIndex","windowBound","getOrCreateOverlappedBoards","crossingPoints","charPoint","currentPixel","directionMap","bitmapSurroundingChars","boardSurroundingChars","directionMark","drawCrossingPoints","painterBoard","first","dest","bitmapRow","painterRow","columnIndex","other","result","hashCode","isBlank","chunked","toBeUsedText","createTextShapeFromText","onPasteText","json","ScaleInteractionPoint","shapeId","InteractionPoint","LineInteractionPoint","edge","anotherPoint","Anchor","horizontalOffset","verticalOffset","InteractionBound","edges","createInteractionAnchor","Edge","anchorPoints","middleEdgePoints","shapeBound","TopLeft","targetedShapeId","TopMiddle","TopRight","MiddleLeft","MiddleRight","BottomLeft","BottomMiddle","BottomRight","newPoint","currentBound","emptySet","selectedShapes","RectangleExtra","LineExtra","TextAlign","createAllShapeMapRecursive","group","mutableMapOf","RemoveShape","Command","serializableExtra","ShapeExtra","textHorizontalAlign","textVerticalAlign","TextExtra","AnchorChar","RectangleFillStyle","CharDrawable","StraightStrokeStyle","displayName","all","StraightStrokeDashPattern","AddPosition","Node","DoubleLinkedList","AbstractSerializableShape","serializableGroup","parentId","serializableShape","AbstractShape","QuickList","serializableLine","isEdgeUpdated","anchorPointUpdate","anchorPointIndex","previousPointIndex","anchorEndPoint","previousJointPoint","updatePoint","createNewJointPoint","anchorIndex","newJointPointIndex","newJointPoint","seedPoints","newJointPoints","isUpdated","startPoint","endPoint","serializableRectangle","mutableListOf","toStandardizedWords","word","adjustedLines","space","StringBuilder","maxCharCount","RenderableText","isTextEditable","serializableText","maxRowCharCount","updateRenderableText","points","list","p3","b","c","another","isFillEnabled","fillStyleId","isBorderEnabled","borderStyleId","isLineStrokeEnabled","lineStrokeStyleId","isStartHeadAnchorCharEnabled","startHeadAnchorCharId","isEndHeadAnchorCharEnabled","endHeadAnchorCharId","newRoot","createAllShapeMap","currentVersion","getAllAncestors","affectedParent","allAncestors","shapeManager","Ungroup","After","SerializableExtra","toIntOrNull","previousNode","afterNode","moveActionType","newPreviousNode","newNextNode","DoubleLinkedListIterator","preNode","identifier","nextCode","excludedValue","isIdIncluded","SerializableGroup","addInternal","newId","newStartPoint","newEndPoint","SerializableLine","newBound","offsetPoint","newExtra","edgeIndex","newEdge","toMutableList","startPointIndex","newEdges","n","newEdgeIndex","SerializableRectangle","standardizeLines","createRenderableText","nonNullRenderableText","SerializableText","isTextChanged","initAnchorPoints","drop","mainPoints","isOnSameStraightLine","middleDirection","middleLeft","middleTop","middlePoint","createAnchorPoints","directedJointPoints","reduceInner","isInOrderedRequired","isEquals","isMonotonic","AddShape","ShapeZoneAddressManager","ZoneOwnersManager","ic","address","addresses","mapNotNull","toList","filter","bitmapCol","getCachedAddresses","cachedAddresses","ir","VersionizedZoneAddresses","versionizedZoneAddresses","rowAddressIndex","colAddressIndex","ZoneAddress","number","clearBound","zone","ownerId","address1","address2","addressRow","addressCol","owners","currentParentId","minLeft","newShapeBound","serializableShapes","insertShapes","fileList","FileReader","reader","onload","readAsText","selectedFile","EditSelectedShape","targetedShape","mouseCommand","commandResultType","requestRedraw","drawShapeToMainBoard","redrawMainBoard","isEnabled","currentTimeMillis","objective","t0","ScalableInteractionBound","LineInteractionBound","bounds","interactionPoint","getMouseMovingCursor","ShapeSearcher","CommandEnvironmentImpl","redraw","StateHistoryManager","storeManager","stateHistoryManager","initialRootId","OneTimeActionHandler","shapeClipboardManager","appUiStateManager","jsonString","serializableRoot","extractableShapes","MakeTextEditable","UpdateTextEditingMode","loadShapesFromFile","exportSelectedShapes","ShapeToolVisibility","deleteSelectedShapes","editSelectedShape","textShape","verticalAlign","newTextAlign","ChangeExtra","setTextAlignment","offsetCol","offsetRow","newPosition","ChangeBound","moveSelectedShapes","singleShape","newLeft","newTop","newWidth","newHeight","setSelectedShapeBound","newFillStyleId","currentRectangleExtra","newIsFillEnabled","newFillStyle","rectangleExtra","setSelectedShapeFillExtra","newBorderStyleId","newIsBorderEnabled","newBorderStyle","setSelectedShapeBorderExtra","currentPattern","newPattern","newRectangleExtra","setSelectedShapeBorderDashPatternExtra","newStrokeStyleId","currentLineExtra","newIsEnabled","newStrokeStyle","setSelectedLineStrokeExtra","currentExtra","setSelectedLineStrokeDashPattern","newAnchorId","newAnchor","setSelectedShapeStartAnchorExtra","setSelectedShapeEndAnchorExtra","ChangeOrder","orderType","changeShapeOrder","FileMediator","bitmapManager","ExportShapesHelper","ClipboardManager","oneTimeActionLiveData","getBackupKey","backupKey","jsonRoot","backupShapes","prefix","rootId","HistoryStack","defaultBackupShapeJson","defaultBackupOffsetValue","migrationTo1_1_0","EditingMode","commandEnvironment","ScaleShapeMouseCommand","LineInteractionMouseCommand","createShapeBoundInteractionMouseCommandIfValid","sharpBoundInteractionCommand","MoveShapeMouseCommand","detectInteractionCommand","interactionCommand","commandType","AddTextMouseCommand","AddLineMouseCommand","isStraightLineMode","candidateEndPoint","adjustEndPoint","environment","edgeDirection","AnchorPointUpdate","MoveLineAnchor","isReducedRequired","changeShapeBound","textAlignExtra","changeExtraCommand","makeTextFree","isFreeText","getFreeTextActualSize","getNormalTextActualSize","adjustTextShape","enterTextTypeMode","currentShape","moveAnchor","MoveLineEdge","moveEdge","isRemoveRequired","minTop","createObjectURL","readFile","files","isNewStateAccepted","skippedVersion","updateInteractionBounds","lastOrNull","version","History","removeLastOrNull","currentState","rootGroup","restoreShapes","adjustedRootId","leftString","topString","restoreOffset","editingMode","versionCode","registerBackupShapes","detectMouseCommandWithMouseDown","changeEndAnchor","onMouseUp","move","area","EditTextModal","ChangeText","adjustNormalTextSize","dialog","contentBound","contentWidth","contentHeight","oldValue","StoreManager","nonNullInstance","localStorage","removeItem","themeMode","AppThemeManager","themeManager","storageManager","appLifecycleOwner","forceUiUpdate","payload","initialThemeMode","ThemeManager","v","toCharArray","dropLast","toBase64","toBits","getTime","MonoSketchApplication","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}